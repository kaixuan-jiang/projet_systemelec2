
projet_systemelec.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be84  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800bf40  0800bf40  0001bf40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5b8  0800c5b8  00020250  2**0
                  CONTENTS
  4 .ARM          00000000  0800c5b8  0800c5b8  00020250  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c5b8  0800c5b8  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5b8  0800c5b8  0001c5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5bc  0800c5bc  0001c5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800c5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  20000250  0800c810  00020250  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000788  0800c810  00020788  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013eea  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000311e  00000000  00000000  000341a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001020  00000000  00000000  000372c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c8c  00000000  00000000  000382e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001864a  00000000  00000000  00038f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001699c  00000000  00000000  000515be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000906c3  00000000  00000000  00067f5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004bb4  00000000  00000000  000f8620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000fd1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000250 	.word	0x20000250
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800bf24 	.word	0x0800bf24

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000254 	.word	0x20000254
 80000fc:	0800bf24 	.word	0x0800bf24

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fe55 	bl	80020e4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 fda5 	bl	8001f94 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fe47 	bl	80020e4 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fe3d 	bl	80020e4 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fdcd 	bl	8002018 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fdc3 	bl	8002018 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_cfrcmple>:
 80004a0:	4684      	mov	ip, r0
 80004a2:	0008      	movs	r0, r1
 80004a4:	4661      	mov	r1, ip
 80004a6:	e7ff      	b.n	80004a8 <__aeabi_cfcmpeq>

080004a8 <__aeabi_cfcmpeq>:
 80004a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004aa:	f000 fb59 	bl	8000b60 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d401      	bmi.n	80004b6 <__aeabi_cfcmpeq+0xe>
 80004b2:	2100      	movs	r1, #0
 80004b4:	42c8      	cmn	r0, r1
 80004b6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b8 <__aeabi_fcmpeq>:
 80004b8:	b510      	push	{r4, lr}
 80004ba:	f000 fae5 	bl	8000a88 <__eqsf2>
 80004be:	4240      	negs	r0, r0
 80004c0:	3001      	adds	r0, #1
 80004c2:	bd10      	pop	{r4, pc}

080004c4 <__aeabi_fcmplt>:
 80004c4:	b510      	push	{r4, lr}
 80004c6:	f000 fb4b 	bl	8000b60 <__lesf2>
 80004ca:	2800      	cmp	r0, #0
 80004cc:	db01      	blt.n	80004d2 <__aeabi_fcmplt+0xe>
 80004ce:	2000      	movs	r0, #0
 80004d0:	bd10      	pop	{r4, pc}
 80004d2:	2001      	movs	r0, #1
 80004d4:	bd10      	pop	{r4, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)

080004d8 <__aeabi_fcmple>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 fb41 	bl	8000b60 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	dd01      	ble.n	80004e6 <__aeabi_fcmple+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmpgt>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 faf1 	bl	8000ad4 <__gesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dc01      	bgt.n	80004fa <__aeabi_fcmpgt+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpge>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 fae7 	bl	8000ad4 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	da01      	bge.n	800050e <__aeabi_fcmpge+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fadd>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	4647      	mov	r7, r8
 8000518:	46ce      	mov	lr, r9
 800051a:	024a      	lsls	r2, r1, #9
 800051c:	0243      	lsls	r3, r0, #9
 800051e:	0045      	lsls	r5, r0, #1
 8000520:	0fc4      	lsrs	r4, r0, #31
 8000522:	0a50      	lsrs	r0, r2, #9
 8000524:	4680      	mov	r8, r0
 8000526:	0048      	lsls	r0, r1, #1
 8000528:	0a5b      	lsrs	r3, r3, #9
 800052a:	0e00      	lsrs	r0, r0, #24
 800052c:	0992      	lsrs	r2, r2, #6
 800052e:	4694      	mov	ip, r2
 8000530:	b580      	push	{r7, lr}
 8000532:	001e      	movs	r6, r3
 8000534:	4681      	mov	r9, r0
 8000536:	0002      	movs	r2, r0
 8000538:	0e2d      	lsrs	r5, r5, #24
 800053a:	00df      	lsls	r7, r3, #3
 800053c:	0fc9      	lsrs	r1, r1, #31
 800053e:	428c      	cmp	r4, r1
 8000540:	d024      	beq.n	800058c <__aeabi_fadd+0x78>
 8000542:	1a28      	subs	r0, r5, r0
 8000544:	2800      	cmp	r0, #0
 8000546:	dd0e      	ble.n	8000566 <__aeabi_fadd+0x52>
 8000548:	2a00      	cmp	r2, #0
 800054a:	d13e      	bne.n	80005ca <__aeabi_fadd+0xb6>
 800054c:	4662      	mov	r2, ip
 800054e:	2a00      	cmp	r2, #0
 8000550:	d100      	bne.n	8000554 <__aeabi_fadd+0x40>
 8000552:	e0fd      	b.n	8000750 <__aeabi_fadd+0x23c>
 8000554:	1e42      	subs	r2, r0, #1
 8000556:	2801      	cmp	r0, #1
 8000558:	d100      	bne.n	800055c <__aeabi_fadd+0x48>
 800055a:	e137      	b.n	80007cc <__aeabi_fadd+0x2b8>
 800055c:	28ff      	cmp	r0, #255	; 0xff
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x4e>
 8000560:	e0a9      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 8000562:	0010      	movs	r0, r2
 8000564:	e039      	b.n	80005da <__aeabi_fadd+0xc6>
 8000566:	2800      	cmp	r0, #0
 8000568:	d063      	beq.n	8000632 <__aeabi_fadd+0x11e>
 800056a:	464b      	mov	r3, r9
 800056c:	1b52      	subs	r2, r2, r5
 800056e:	2d00      	cmp	r5, #0
 8000570:	d000      	beq.n	8000574 <__aeabi_fadd+0x60>
 8000572:	e0e0      	b.n	8000736 <__aeabi_fadd+0x222>
 8000574:	2f00      	cmp	r7, #0
 8000576:	d100      	bne.n	800057a <__aeabi_fadd+0x66>
 8000578:	e0ce      	b.n	8000718 <__aeabi_fadd+0x204>
 800057a:	1e53      	subs	r3, r2, #1
 800057c:	2a01      	cmp	r2, #1
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x6e>
 8000580:	e155      	b.n	800082e <__aeabi_fadd+0x31a>
 8000582:	2aff      	cmp	r2, #255	; 0xff
 8000584:	d100      	bne.n	8000588 <__aeabi_fadd+0x74>
 8000586:	e094      	b.n	80006b2 <__aeabi_fadd+0x19e>
 8000588:	001a      	movs	r2, r3
 800058a:	e0d9      	b.n	8000740 <__aeabi_fadd+0x22c>
 800058c:	1a2a      	subs	r2, r5, r0
 800058e:	2a00      	cmp	r2, #0
 8000590:	dc00      	bgt.n	8000594 <__aeabi_fadd+0x80>
 8000592:	e099      	b.n	80006c8 <__aeabi_fadd+0x1b4>
 8000594:	2800      	cmp	r0, #0
 8000596:	d062      	beq.n	800065e <__aeabi_fadd+0x14a>
 8000598:	2dff      	cmp	r5, #255	; 0xff
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x8a>
 800059c:	e08b      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	4661      	mov	r1, ip
 80005a2:	04db      	lsls	r3, r3, #19
 80005a4:	4319      	orrs	r1, r3
 80005a6:	468c      	mov	ip, r1
 80005a8:	2a1b      	cmp	r2, #27
 80005aa:	dc00      	bgt.n	80005ae <__aeabi_fadd+0x9a>
 80005ac:	e0d2      	b.n	8000754 <__aeabi_fadd+0x240>
 80005ae:	2301      	movs	r3, #1
 80005b0:	19db      	adds	r3, r3, r7
 80005b2:	015a      	lsls	r2, r3, #5
 80005b4:	d56a      	bpl.n	800068c <__aeabi_fadd+0x178>
 80005b6:	3501      	adds	r5, #1
 80005b8:	2dff      	cmp	r5, #255	; 0xff
 80005ba:	d05b      	beq.n	8000674 <__aeabi_fadd+0x160>
 80005bc:	2201      	movs	r2, #1
 80005be:	49a3      	ldr	r1, [pc, #652]	; (800084c <__aeabi_fadd+0x338>)
 80005c0:	401a      	ands	r2, r3
 80005c2:	085b      	lsrs	r3, r3, #1
 80005c4:	400b      	ands	r3, r1
 80005c6:	4313      	orrs	r3, r2
 80005c8:	e01c      	b.n	8000604 <__aeabi_fadd+0xf0>
 80005ca:	2dff      	cmp	r5, #255	; 0xff
 80005cc:	d100      	bne.n	80005d0 <__aeabi_fadd+0xbc>
 80005ce:	e072      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 80005d0:	2380      	movs	r3, #128	; 0x80
 80005d2:	4662      	mov	r2, ip
 80005d4:	04db      	lsls	r3, r3, #19
 80005d6:	431a      	orrs	r2, r3
 80005d8:	4694      	mov	ip, r2
 80005da:	281b      	cmp	r0, #27
 80005dc:	dc00      	bgt.n	80005e0 <__aeabi_fadd+0xcc>
 80005de:	e090      	b.n	8000702 <__aeabi_fadd+0x1ee>
 80005e0:	2301      	movs	r3, #1
 80005e2:	1afb      	subs	r3, r7, r3
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d551      	bpl.n	800068c <__aeabi_fadd+0x178>
 80005e8:	019b      	lsls	r3, r3, #6
 80005ea:	099e      	lsrs	r6, r3, #6
 80005ec:	0030      	movs	r0, r6
 80005ee:	f002 fd99 	bl	8003124 <__clzsi2>
 80005f2:	0033      	movs	r3, r6
 80005f4:	3805      	subs	r0, #5
 80005f6:	4083      	lsls	r3, r0
 80005f8:	4285      	cmp	r5, r0
 80005fa:	dc00      	bgt.n	80005fe <__aeabi_fadd+0xea>
 80005fc:	e075      	b.n	80006ea <__aeabi_fadd+0x1d6>
 80005fe:	4a94      	ldr	r2, [pc, #592]	; (8000850 <__aeabi_fadd+0x33c>)
 8000600:	1a2d      	subs	r5, r5, r0
 8000602:	4013      	ands	r3, r2
 8000604:	075a      	lsls	r2, r3, #29
 8000606:	d004      	beq.n	8000612 <__aeabi_fadd+0xfe>
 8000608:	220f      	movs	r2, #15
 800060a:	401a      	ands	r2, r3
 800060c:	2a04      	cmp	r2, #4
 800060e:	d000      	beq.n	8000612 <__aeabi_fadd+0xfe>
 8000610:	3304      	adds	r3, #4
 8000612:	015a      	lsls	r2, r3, #5
 8000614:	d53c      	bpl.n	8000690 <__aeabi_fadd+0x17c>
 8000616:	1c68      	adds	r0, r5, #1
 8000618:	2dfe      	cmp	r5, #254	; 0xfe
 800061a:	d02b      	beq.n	8000674 <__aeabi_fadd+0x160>
 800061c:	019b      	lsls	r3, r3, #6
 800061e:	0a5e      	lsrs	r6, r3, #9
 8000620:	b2c0      	uxtb	r0, r0
 8000622:	05c0      	lsls	r0, r0, #23
 8000624:	4330      	orrs	r0, r6
 8000626:	07e4      	lsls	r4, r4, #31
 8000628:	4320      	orrs	r0, r4
 800062a:	bcc0      	pop	{r6, r7}
 800062c:	46b9      	mov	r9, r7
 800062e:	46b0      	mov	r8, r6
 8000630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000632:	20fe      	movs	r0, #254	; 0xfe
 8000634:	1c6a      	adds	r2, r5, #1
 8000636:	4210      	tst	r0, r2
 8000638:	d172      	bne.n	8000720 <__aeabi_fadd+0x20c>
 800063a:	2d00      	cmp	r5, #0
 800063c:	d000      	beq.n	8000640 <__aeabi_fadd+0x12c>
 800063e:	e0ae      	b.n	800079e <__aeabi_fadd+0x28a>
 8000640:	2f00      	cmp	r7, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0x132>
 8000644:	e0ec      	b.n	8000820 <__aeabi_fadd+0x30c>
 8000646:	4663      	mov	r3, ip
 8000648:	2000      	movs	r0, #0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0e9      	beq.n	8000622 <__aeabi_fadd+0x10e>
 800064e:	1afb      	subs	r3, r7, r3
 8000650:	015a      	lsls	r2, r3, #5
 8000652:	d400      	bmi.n	8000656 <__aeabi_fadd+0x142>
 8000654:	e0f3      	b.n	800083e <__aeabi_fadd+0x32a>
 8000656:	4663      	mov	r3, ip
 8000658:	000c      	movs	r4, r1
 800065a:	1bdb      	subs	r3, r3, r7
 800065c:	e7d2      	b.n	8000604 <__aeabi_fadd+0xf0>
 800065e:	4661      	mov	r1, ip
 8000660:	2900      	cmp	r1, #0
 8000662:	d05b      	beq.n	800071c <__aeabi_fadd+0x208>
 8000664:	1e51      	subs	r1, r2, #1
 8000666:	2a01      	cmp	r2, #1
 8000668:	d100      	bne.n	800066c <__aeabi_fadd+0x158>
 800066a:	e0a7      	b.n	80007bc <__aeabi_fadd+0x2a8>
 800066c:	2aff      	cmp	r2, #255	; 0xff
 800066e:	d022      	beq.n	80006b6 <__aeabi_fadd+0x1a2>
 8000670:	000a      	movs	r2, r1
 8000672:	e799      	b.n	80005a8 <__aeabi_fadd+0x94>
 8000674:	20ff      	movs	r0, #255	; 0xff
 8000676:	2600      	movs	r6, #0
 8000678:	e7d3      	b.n	8000622 <__aeabi_fadd+0x10e>
 800067a:	21fe      	movs	r1, #254	; 0xfe
 800067c:	1c6a      	adds	r2, r5, #1
 800067e:	4211      	tst	r1, r2
 8000680:	d073      	beq.n	800076a <__aeabi_fadd+0x256>
 8000682:	2aff      	cmp	r2, #255	; 0xff
 8000684:	d0f6      	beq.n	8000674 <__aeabi_fadd+0x160>
 8000686:	0015      	movs	r5, r2
 8000688:	4467      	add	r7, ip
 800068a:	087b      	lsrs	r3, r7, #1
 800068c:	075a      	lsls	r2, r3, #29
 800068e:	d1bb      	bne.n	8000608 <__aeabi_fadd+0xf4>
 8000690:	08db      	lsrs	r3, r3, #3
 8000692:	2dff      	cmp	r5, #255	; 0xff
 8000694:	d00f      	beq.n	80006b6 <__aeabi_fadd+0x1a2>
 8000696:	025b      	lsls	r3, r3, #9
 8000698:	0a5e      	lsrs	r6, r3, #9
 800069a:	b2e8      	uxtb	r0, r5
 800069c:	e7c1      	b.n	8000622 <__aeabi_fadd+0x10e>
 800069e:	4662      	mov	r2, ip
 80006a0:	2a00      	cmp	r2, #0
 80006a2:	d008      	beq.n	80006b6 <__aeabi_fadd+0x1a2>
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	03d2      	lsls	r2, r2, #15
 80006a8:	4213      	tst	r3, r2
 80006aa:	d004      	beq.n	80006b6 <__aeabi_fadd+0x1a2>
 80006ac:	4640      	mov	r0, r8
 80006ae:	4210      	tst	r0, r2
 80006b0:	d101      	bne.n	80006b6 <__aeabi_fadd+0x1a2>
 80006b2:	000c      	movs	r4, r1
 80006b4:	4643      	mov	r3, r8
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0dc      	beq.n	8000674 <__aeabi_fadd+0x160>
 80006ba:	2680      	movs	r6, #128	; 0x80
 80006bc:	03f6      	lsls	r6, r6, #15
 80006be:	431e      	orrs	r6, r3
 80006c0:	0276      	lsls	r6, r6, #9
 80006c2:	20ff      	movs	r0, #255	; 0xff
 80006c4:	0a76      	lsrs	r6, r6, #9
 80006c6:	e7ac      	b.n	8000622 <__aeabi_fadd+0x10e>
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	d0d6      	beq.n	800067a <__aeabi_fadd+0x166>
 80006cc:	1b42      	subs	r2, r0, r5
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d05c      	beq.n	800078c <__aeabi_fadd+0x278>
 80006d2:	28ff      	cmp	r0, #255	; 0xff
 80006d4:	d0ee      	beq.n	80006b4 <__aeabi_fadd+0x1a0>
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	04db      	lsls	r3, r3, #19
 80006da:	431f      	orrs	r7, r3
 80006dc:	2a1b      	cmp	r2, #27
 80006de:	dc00      	bgt.n	80006e2 <__aeabi_fadd+0x1ce>
 80006e0:	e082      	b.n	80007e8 <__aeabi_fadd+0x2d4>
 80006e2:	2301      	movs	r3, #1
 80006e4:	464d      	mov	r5, r9
 80006e6:	4463      	add	r3, ip
 80006e8:	e763      	b.n	80005b2 <__aeabi_fadd+0x9e>
 80006ea:	2220      	movs	r2, #32
 80006ec:	1b40      	subs	r0, r0, r5
 80006ee:	3001      	adds	r0, #1
 80006f0:	1a12      	subs	r2, r2, r0
 80006f2:	0019      	movs	r1, r3
 80006f4:	4093      	lsls	r3, r2
 80006f6:	40c1      	lsrs	r1, r0
 80006f8:	1e5a      	subs	r2, r3, #1
 80006fa:	4193      	sbcs	r3, r2
 80006fc:	2500      	movs	r5, #0
 80006fe:	430b      	orrs	r3, r1
 8000700:	e780      	b.n	8000604 <__aeabi_fadd+0xf0>
 8000702:	2320      	movs	r3, #32
 8000704:	4661      	mov	r1, ip
 8000706:	1a1b      	subs	r3, r3, r0
 8000708:	4099      	lsls	r1, r3
 800070a:	4662      	mov	r2, ip
 800070c:	000b      	movs	r3, r1
 800070e:	40c2      	lsrs	r2, r0
 8000710:	1e59      	subs	r1, r3, #1
 8000712:	418b      	sbcs	r3, r1
 8000714:	4313      	orrs	r3, r2
 8000716:	e764      	b.n	80005e2 <__aeabi_fadd+0xce>
 8000718:	000c      	movs	r4, r1
 800071a:	4643      	mov	r3, r8
 800071c:	0015      	movs	r5, r2
 800071e:	e7b8      	b.n	8000692 <__aeabi_fadd+0x17e>
 8000720:	4663      	mov	r3, ip
 8000722:	1afe      	subs	r6, r7, r3
 8000724:	0173      	lsls	r3, r6, #5
 8000726:	d445      	bmi.n	80007b4 <__aeabi_fadd+0x2a0>
 8000728:	2e00      	cmp	r6, #0
 800072a:	d000      	beq.n	800072e <__aeabi_fadd+0x21a>
 800072c:	e75e      	b.n	80005ec <__aeabi_fadd+0xd8>
 800072e:	2400      	movs	r4, #0
 8000730:	2000      	movs	r0, #0
 8000732:	2600      	movs	r6, #0
 8000734:	e775      	b.n	8000622 <__aeabi_fadd+0x10e>
 8000736:	2bff      	cmp	r3, #255	; 0xff
 8000738:	d0bb      	beq.n	80006b2 <__aeabi_fadd+0x19e>
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	04db      	lsls	r3, r3, #19
 800073e:	431f      	orrs	r7, r3
 8000740:	2a1b      	cmp	r2, #27
 8000742:	dd47      	ble.n	80007d4 <__aeabi_fadd+0x2c0>
 8000744:	2301      	movs	r3, #1
 8000746:	4662      	mov	r2, ip
 8000748:	000c      	movs	r4, r1
 800074a:	464d      	mov	r5, r9
 800074c:	1ad3      	subs	r3, r2, r3
 800074e:	e749      	b.n	80005e4 <__aeabi_fadd+0xd0>
 8000750:	0005      	movs	r5, r0
 8000752:	e79e      	b.n	8000692 <__aeabi_fadd+0x17e>
 8000754:	4661      	mov	r1, ip
 8000756:	2320      	movs	r3, #32
 8000758:	40d1      	lsrs	r1, r2
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	4662      	mov	r2, ip
 800075e:	409a      	lsls	r2, r3
 8000760:	0013      	movs	r3, r2
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	4193      	sbcs	r3, r2
 8000766:	430b      	orrs	r3, r1
 8000768:	e722      	b.n	80005b0 <__aeabi_fadd+0x9c>
 800076a:	2d00      	cmp	r5, #0
 800076c:	d146      	bne.n	80007fc <__aeabi_fadd+0x2e8>
 800076e:	2f00      	cmp	r7, #0
 8000770:	d062      	beq.n	8000838 <__aeabi_fadd+0x324>
 8000772:	4663      	mov	r3, ip
 8000774:	2000      	movs	r0, #0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d100      	bne.n	800077c <__aeabi_fadd+0x268>
 800077a:	e752      	b.n	8000622 <__aeabi_fadd+0x10e>
 800077c:	003b      	movs	r3, r7
 800077e:	4463      	add	r3, ip
 8000780:	015a      	lsls	r2, r3, #5
 8000782:	d583      	bpl.n	800068c <__aeabi_fadd+0x178>
 8000784:	4a32      	ldr	r2, [pc, #200]	; (8000850 <__aeabi_fadd+0x33c>)
 8000786:	3501      	adds	r5, #1
 8000788:	4013      	ands	r3, r2
 800078a:	e77f      	b.n	800068c <__aeabi_fadd+0x178>
 800078c:	2f00      	cmp	r7, #0
 800078e:	d0c4      	beq.n	800071a <__aeabi_fadd+0x206>
 8000790:	1e53      	subs	r3, r2, #1
 8000792:	2a01      	cmp	r2, #1
 8000794:	d012      	beq.n	80007bc <__aeabi_fadd+0x2a8>
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d08c      	beq.n	80006b4 <__aeabi_fadd+0x1a0>
 800079a:	001a      	movs	r2, r3
 800079c:	e79e      	b.n	80006dc <__aeabi_fadd+0x1c8>
 800079e:	2f00      	cmp	r7, #0
 80007a0:	d000      	beq.n	80007a4 <__aeabi_fadd+0x290>
 80007a2:	e77c      	b.n	800069e <__aeabi_fadd+0x18a>
 80007a4:	4663      	mov	r3, ip
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d183      	bne.n	80006b2 <__aeabi_fadd+0x19e>
 80007aa:	2680      	movs	r6, #128	; 0x80
 80007ac:	2400      	movs	r4, #0
 80007ae:	20ff      	movs	r0, #255	; 0xff
 80007b0:	03f6      	lsls	r6, r6, #15
 80007b2:	e736      	b.n	8000622 <__aeabi_fadd+0x10e>
 80007b4:	4663      	mov	r3, ip
 80007b6:	000c      	movs	r4, r1
 80007b8:	1bde      	subs	r6, r3, r7
 80007ba:	e717      	b.n	80005ec <__aeabi_fadd+0xd8>
 80007bc:	003b      	movs	r3, r7
 80007be:	4463      	add	r3, ip
 80007c0:	2501      	movs	r5, #1
 80007c2:	015a      	lsls	r2, r3, #5
 80007c4:	d400      	bmi.n	80007c8 <__aeabi_fadd+0x2b4>
 80007c6:	e761      	b.n	800068c <__aeabi_fadd+0x178>
 80007c8:	2502      	movs	r5, #2
 80007ca:	e6f7      	b.n	80005bc <__aeabi_fadd+0xa8>
 80007cc:	4663      	mov	r3, ip
 80007ce:	2501      	movs	r5, #1
 80007d0:	1afb      	subs	r3, r7, r3
 80007d2:	e707      	b.n	80005e4 <__aeabi_fadd+0xd0>
 80007d4:	2320      	movs	r3, #32
 80007d6:	1a9b      	subs	r3, r3, r2
 80007d8:	0038      	movs	r0, r7
 80007da:	409f      	lsls	r7, r3
 80007dc:	003b      	movs	r3, r7
 80007de:	40d0      	lsrs	r0, r2
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	4303      	orrs	r3, r0
 80007e6:	e7ae      	b.n	8000746 <__aeabi_fadd+0x232>
 80007e8:	2320      	movs	r3, #32
 80007ea:	1a9b      	subs	r3, r3, r2
 80007ec:	0039      	movs	r1, r7
 80007ee:	409f      	lsls	r7, r3
 80007f0:	003b      	movs	r3, r7
 80007f2:	40d1      	lsrs	r1, r2
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	4193      	sbcs	r3, r2
 80007f8:	430b      	orrs	r3, r1
 80007fa:	e773      	b.n	80006e4 <__aeabi_fadd+0x1d0>
 80007fc:	2f00      	cmp	r7, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x2ee>
 8000800:	e758      	b.n	80006b4 <__aeabi_fadd+0x1a0>
 8000802:	4662      	mov	r2, ip
 8000804:	2a00      	cmp	r2, #0
 8000806:	d100      	bne.n	800080a <__aeabi_fadd+0x2f6>
 8000808:	e755      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	03d2      	lsls	r2, r2, #15
 800080e:	4213      	tst	r3, r2
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x300>
 8000812:	e750      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 8000814:	4641      	mov	r1, r8
 8000816:	4211      	tst	r1, r2
 8000818:	d000      	beq.n	800081c <__aeabi_fadd+0x308>
 800081a:	e74c      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 800081c:	4643      	mov	r3, r8
 800081e:	e74a      	b.n	80006b6 <__aeabi_fadd+0x1a2>
 8000820:	4663      	mov	r3, ip
 8000822:	2b00      	cmp	r3, #0
 8000824:	d083      	beq.n	800072e <__aeabi_fadd+0x21a>
 8000826:	000c      	movs	r4, r1
 8000828:	4646      	mov	r6, r8
 800082a:	2000      	movs	r0, #0
 800082c:	e6f9      	b.n	8000622 <__aeabi_fadd+0x10e>
 800082e:	4663      	mov	r3, ip
 8000830:	000c      	movs	r4, r1
 8000832:	1bdb      	subs	r3, r3, r7
 8000834:	3501      	adds	r5, #1
 8000836:	e6d5      	b.n	80005e4 <__aeabi_fadd+0xd0>
 8000838:	4646      	mov	r6, r8
 800083a:	2000      	movs	r0, #0
 800083c:	e6f1      	b.n	8000622 <__aeabi_fadd+0x10e>
 800083e:	2b00      	cmp	r3, #0
 8000840:	d000      	beq.n	8000844 <__aeabi_fadd+0x330>
 8000842:	e723      	b.n	800068c <__aeabi_fadd+0x178>
 8000844:	2400      	movs	r4, #0
 8000846:	2600      	movs	r6, #0
 8000848:	e6eb      	b.n	8000622 <__aeabi_fadd+0x10e>
 800084a:	46c0      	nop			; (mov r8, r8)
 800084c:	7dffffff 	.word	0x7dffffff
 8000850:	fbffffff 	.word	0xfbffffff

08000854 <__aeabi_fdiv>:
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000856:	464f      	mov	r7, r9
 8000858:	4646      	mov	r6, r8
 800085a:	46d6      	mov	lr, sl
 800085c:	0245      	lsls	r5, r0, #9
 800085e:	b5c0      	push	{r6, r7, lr}
 8000860:	0047      	lsls	r7, r0, #1
 8000862:	1c0c      	adds	r4, r1, #0
 8000864:	0a6d      	lsrs	r5, r5, #9
 8000866:	0e3f      	lsrs	r7, r7, #24
 8000868:	0fc6      	lsrs	r6, r0, #31
 800086a:	2f00      	cmp	r7, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fdiv+0x1c>
 800086e:	e06f      	b.n	8000950 <__aeabi_fdiv+0xfc>
 8000870:	2fff      	cmp	r7, #255	; 0xff
 8000872:	d100      	bne.n	8000876 <__aeabi_fdiv+0x22>
 8000874:	e074      	b.n	8000960 <__aeabi_fdiv+0x10c>
 8000876:	2300      	movs	r3, #0
 8000878:	2280      	movs	r2, #128	; 0x80
 800087a:	4699      	mov	r9, r3
 800087c:	469a      	mov	sl, r3
 800087e:	00ed      	lsls	r5, r5, #3
 8000880:	04d2      	lsls	r2, r2, #19
 8000882:	4315      	orrs	r5, r2
 8000884:	3f7f      	subs	r7, #127	; 0x7f
 8000886:	0263      	lsls	r3, r4, #9
 8000888:	0a5b      	lsrs	r3, r3, #9
 800088a:	4698      	mov	r8, r3
 800088c:	0063      	lsls	r3, r4, #1
 800088e:	0e1b      	lsrs	r3, r3, #24
 8000890:	0fe4      	lsrs	r4, r4, #31
 8000892:	2b00      	cmp	r3, #0
 8000894:	d04d      	beq.n	8000932 <__aeabi_fdiv+0xde>
 8000896:	2bff      	cmp	r3, #255	; 0xff
 8000898:	d045      	beq.n	8000926 <__aeabi_fdiv+0xd2>
 800089a:	4642      	mov	r2, r8
 800089c:	2180      	movs	r1, #128	; 0x80
 800089e:	00d2      	lsls	r2, r2, #3
 80008a0:	04c9      	lsls	r1, r1, #19
 80008a2:	4311      	orrs	r1, r2
 80008a4:	4688      	mov	r8, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	3b7f      	subs	r3, #127	; 0x7f
 80008aa:	0031      	movs	r1, r6
 80008ac:	1aff      	subs	r7, r7, r3
 80008ae:	464b      	mov	r3, r9
 80008b0:	4061      	eors	r1, r4
 80008b2:	b2c9      	uxtb	r1, r1
 80008b4:	2b0f      	cmp	r3, #15
 80008b6:	d900      	bls.n	80008ba <__aeabi_fdiv+0x66>
 80008b8:	e0b8      	b.n	8000a2c <__aeabi_fdiv+0x1d8>
 80008ba:	4870      	ldr	r0, [pc, #448]	; (8000a7c <__aeabi_fdiv+0x228>)
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	58c3      	ldr	r3, [r0, r3]
 80008c0:	469f      	mov	pc, r3
 80008c2:	2300      	movs	r3, #0
 80008c4:	4698      	mov	r8, r3
 80008c6:	0026      	movs	r6, r4
 80008c8:	4645      	mov	r5, r8
 80008ca:	4692      	mov	sl, r2
 80008cc:	4653      	mov	r3, sl
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d100      	bne.n	80008d4 <__aeabi_fdiv+0x80>
 80008d2:	e08d      	b.n	80009f0 <__aeabi_fdiv+0x19c>
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d100      	bne.n	80008da <__aeabi_fdiv+0x86>
 80008d8:	e0a1      	b.n	8000a1e <__aeabi_fdiv+0x1ca>
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d018      	beq.n	8000910 <__aeabi_fdiv+0xbc>
 80008de:	003b      	movs	r3, r7
 80008e0:	337f      	adds	r3, #127	; 0x7f
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	dd6d      	ble.n	80009c2 <__aeabi_fdiv+0x16e>
 80008e6:	076a      	lsls	r2, r5, #29
 80008e8:	d004      	beq.n	80008f4 <__aeabi_fdiv+0xa0>
 80008ea:	220f      	movs	r2, #15
 80008ec:	402a      	ands	r2, r5
 80008ee:	2a04      	cmp	r2, #4
 80008f0:	d000      	beq.n	80008f4 <__aeabi_fdiv+0xa0>
 80008f2:	3504      	adds	r5, #4
 80008f4:	012a      	lsls	r2, r5, #4
 80008f6:	d503      	bpl.n	8000900 <__aeabi_fdiv+0xac>
 80008f8:	4b61      	ldr	r3, [pc, #388]	; (8000a80 <__aeabi_fdiv+0x22c>)
 80008fa:	401d      	ands	r5, r3
 80008fc:	003b      	movs	r3, r7
 80008fe:	3380      	adds	r3, #128	; 0x80
 8000900:	2bfe      	cmp	r3, #254	; 0xfe
 8000902:	dd00      	ble.n	8000906 <__aeabi_fdiv+0xb2>
 8000904:	e074      	b.n	80009f0 <__aeabi_fdiv+0x19c>
 8000906:	01aa      	lsls	r2, r5, #6
 8000908:	0a52      	lsrs	r2, r2, #9
 800090a:	b2d8      	uxtb	r0, r3
 800090c:	e002      	b.n	8000914 <__aeabi_fdiv+0xc0>
 800090e:	000e      	movs	r6, r1
 8000910:	2000      	movs	r0, #0
 8000912:	2200      	movs	r2, #0
 8000914:	05c0      	lsls	r0, r0, #23
 8000916:	07f6      	lsls	r6, r6, #31
 8000918:	4310      	orrs	r0, r2
 800091a:	4330      	orrs	r0, r6
 800091c:	bce0      	pop	{r5, r6, r7}
 800091e:	46ba      	mov	sl, r7
 8000920:	46b1      	mov	r9, r6
 8000922:	46a8      	mov	r8, r5
 8000924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000926:	4643      	mov	r3, r8
 8000928:	2b00      	cmp	r3, #0
 800092a:	d13f      	bne.n	80009ac <__aeabi_fdiv+0x158>
 800092c:	2202      	movs	r2, #2
 800092e:	3fff      	subs	r7, #255	; 0xff
 8000930:	e003      	b.n	800093a <__aeabi_fdiv+0xe6>
 8000932:	4643      	mov	r3, r8
 8000934:	2b00      	cmp	r3, #0
 8000936:	d12d      	bne.n	8000994 <__aeabi_fdiv+0x140>
 8000938:	2201      	movs	r2, #1
 800093a:	0031      	movs	r1, r6
 800093c:	464b      	mov	r3, r9
 800093e:	4061      	eors	r1, r4
 8000940:	b2c9      	uxtb	r1, r1
 8000942:	4313      	orrs	r3, r2
 8000944:	2b0f      	cmp	r3, #15
 8000946:	d838      	bhi.n	80009ba <__aeabi_fdiv+0x166>
 8000948:	484e      	ldr	r0, [pc, #312]	; (8000a84 <__aeabi_fdiv+0x230>)
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	58c3      	ldr	r3, [r0, r3]
 800094e:	469f      	mov	pc, r3
 8000950:	2d00      	cmp	r5, #0
 8000952:	d113      	bne.n	800097c <__aeabi_fdiv+0x128>
 8000954:	2304      	movs	r3, #4
 8000956:	4699      	mov	r9, r3
 8000958:	3b03      	subs	r3, #3
 800095a:	2700      	movs	r7, #0
 800095c:	469a      	mov	sl, r3
 800095e:	e792      	b.n	8000886 <__aeabi_fdiv+0x32>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d105      	bne.n	8000970 <__aeabi_fdiv+0x11c>
 8000964:	2308      	movs	r3, #8
 8000966:	4699      	mov	r9, r3
 8000968:	3b06      	subs	r3, #6
 800096a:	27ff      	movs	r7, #255	; 0xff
 800096c:	469a      	mov	sl, r3
 800096e:	e78a      	b.n	8000886 <__aeabi_fdiv+0x32>
 8000970:	230c      	movs	r3, #12
 8000972:	4699      	mov	r9, r3
 8000974:	3b09      	subs	r3, #9
 8000976:	27ff      	movs	r7, #255	; 0xff
 8000978:	469a      	mov	sl, r3
 800097a:	e784      	b.n	8000886 <__aeabi_fdiv+0x32>
 800097c:	0028      	movs	r0, r5
 800097e:	f002 fbd1 	bl	8003124 <__clzsi2>
 8000982:	2776      	movs	r7, #118	; 0x76
 8000984:	1f43      	subs	r3, r0, #5
 8000986:	409d      	lsls	r5, r3
 8000988:	2300      	movs	r3, #0
 800098a:	427f      	negs	r7, r7
 800098c:	4699      	mov	r9, r3
 800098e:	469a      	mov	sl, r3
 8000990:	1a3f      	subs	r7, r7, r0
 8000992:	e778      	b.n	8000886 <__aeabi_fdiv+0x32>
 8000994:	4640      	mov	r0, r8
 8000996:	f002 fbc5 	bl	8003124 <__clzsi2>
 800099a:	4642      	mov	r2, r8
 800099c:	1f43      	subs	r3, r0, #5
 800099e:	409a      	lsls	r2, r3
 80009a0:	2376      	movs	r3, #118	; 0x76
 80009a2:	425b      	negs	r3, r3
 80009a4:	4690      	mov	r8, r2
 80009a6:	1a1b      	subs	r3, r3, r0
 80009a8:	2200      	movs	r2, #0
 80009aa:	e77e      	b.n	80008aa <__aeabi_fdiv+0x56>
 80009ac:	2303      	movs	r3, #3
 80009ae:	464a      	mov	r2, r9
 80009b0:	431a      	orrs	r2, r3
 80009b2:	4691      	mov	r9, r2
 80009b4:	33fc      	adds	r3, #252	; 0xfc
 80009b6:	2203      	movs	r2, #3
 80009b8:	e777      	b.n	80008aa <__aeabi_fdiv+0x56>
 80009ba:	000e      	movs	r6, r1
 80009bc:	20ff      	movs	r0, #255	; 0xff
 80009be:	2200      	movs	r2, #0
 80009c0:	e7a8      	b.n	8000914 <__aeabi_fdiv+0xc0>
 80009c2:	2201      	movs	r2, #1
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	2b1b      	cmp	r3, #27
 80009c8:	dca2      	bgt.n	8000910 <__aeabi_fdiv+0xbc>
 80009ca:	379e      	adds	r7, #158	; 0x9e
 80009cc:	002a      	movs	r2, r5
 80009ce:	40bd      	lsls	r5, r7
 80009d0:	40da      	lsrs	r2, r3
 80009d2:	1e6b      	subs	r3, r5, #1
 80009d4:	419d      	sbcs	r5, r3
 80009d6:	4315      	orrs	r5, r2
 80009d8:	076a      	lsls	r2, r5, #29
 80009da:	d004      	beq.n	80009e6 <__aeabi_fdiv+0x192>
 80009dc:	220f      	movs	r2, #15
 80009de:	402a      	ands	r2, r5
 80009e0:	2a04      	cmp	r2, #4
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fdiv+0x192>
 80009e4:	3504      	adds	r5, #4
 80009e6:	016a      	lsls	r2, r5, #5
 80009e8:	d544      	bpl.n	8000a74 <__aeabi_fdiv+0x220>
 80009ea:	2001      	movs	r0, #1
 80009ec:	2200      	movs	r2, #0
 80009ee:	e791      	b.n	8000914 <__aeabi_fdiv+0xc0>
 80009f0:	20ff      	movs	r0, #255	; 0xff
 80009f2:	2200      	movs	r2, #0
 80009f4:	e78e      	b.n	8000914 <__aeabi_fdiv+0xc0>
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	2600      	movs	r6, #0
 80009fa:	20ff      	movs	r0, #255	; 0xff
 80009fc:	03d2      	lsls	r2, r2, #15
 80009fe:	e789      	b.n	8000914 <__aeabi_fdiv+0xc0>
 8000a00:	2300      	movs	r3, #0
 8000a02:	4698      	mov	r8, r3
 8000a04:	2280      	movs	r2, #128	; 0x80
 8000a06:	03d2      	lsls	r2, r2, #15
 8000a08:	4215      	tst	r5, r2
 8000a0a:	d008      	beq.n	8000a1e <__aeabi_fdiv+0x1ca>
 8000a0c:	4643      	mov	r3, r8
 8000a0e:	4213      	tst	r3, r2
 8000a10:	d105      	bne.n	8000a1e <__aeabi_fdiv+0x1ca>
 8000a12:	431a      	orrs	r2, r3
 8000a14:	0252      	lsls	r2, r2, #9
 8000a16:	0026      	movs	r6, r4
 8000a18:	20ff      	movs	r0, #255	; 0xff
 8000a1a:	0a52      	lsrs	r2, r2, #9
 8000a1c:	e77a      	b.n	8000914 <__aeabi_fdiv+0xc0>
 8000a1e:	2280      	movs	r2, #128	; 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	432a      	orrs	r2, r5
 8000a24:	0252      	lsls	r2, r2, #9
 8000a26:	20ff      	movs	r0, #255	; 0xff
 8000a28:	0a52      	lsrs	r2, r2, #9
 8000a2a:	e773      	b.n	8000914 <__aeabi_fdiv+0xc0>
 8000a2c:	4642      	mov	r2, r8
 8000a2e:	016b      	lsls	r3, r5, #5
 8000a30:	0155      	lsls	r5, r2, #5
 8000a32:	42ab      	cmp	r3, r5
 8000a34:	d21a      	bcs.n	8000a6c <__aeabi_fdiv+0x218>
 8000a36:	201b      	movs	r0, #27
 8000a38:	2200      	movs	r2, #0
 8000a3a:	3f01      	subs	r7, #1
 8000a3c:	2601      	movs	r6, #1
 8000a3e:	001c      	movs	r4, r3
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	2c00      	cmp	r4, #0
 8000a46:	db01      	blt.n	8000a4c <__aeabi_fdiv+0x1f8>
 8000a48:	429d      	cmp	r5, r3
 8000a4a:	d801      	bhi.n	8000a50 <__aeabi_fdiv+0x1fc>
 8000a4c:	1b5b      	subs	r3, r3, r5
 8000a4e:	4332      	orrs	r2, r6
 8000a50:	3801      	subs	r0, #1
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d1f3      	bne.n	8000a3e <__aeabi_fdiv+0x1ea>
 8000a56:	1e58      	subs	r0, r3, #1
 8000a58:	4183      	sbcs	r3, r0
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	001d      	movs	r5, r3
 8000a5e:	003b      	movs	r3, r7
 8000a60:	337f      	adds	r3, #127	; 0x7f
 8000a62:	000e      	movs	r6, r1
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	dd00      	ble.n	8000a6a <__aeabi_fdiv+0x216>
 8000a68:	e73d      	b.n	80008e6 <__aeabi_fdiv+0x92>
 8000a6a:	e7aa      	b.n	80009c2 <__aeabi_fdiv+0x16e>
 8000a6c:	201a      	movs	r0, #26
 8000a6e:	2201      	movs	r2, #1
 8000a70:	1b5b      	subs	r3, r3, r5
 8000a72:	e7e3      	b.n	8000a3c <__aeabi_fdiv+0x1e8>
 8000a74:	01aa      	lsls	r2, r5, #6
 8000a76:	2000      	movs	r0, #0
 8000a78:	0a52      	lsrs	r2, r2, #9
 8000a7a:	e74b      	b.n	8000914 <__aeabi_fdiv+0xc0>
 8000a7c:	0800c0ac 	.word	0x0800c0ac
 8000a80:	f7ffffff 	.word	0xf7ffffff
 8000a84:	0800c0ec 	.word	0x0800c0ec

08000a88 <__eqsf2>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	0042      	lsls	r2, r0, #1
 8000a8c:	0245      	lsls	r5, r0, #9
 8000a8e:	024e      	lsls	r6, r1, #9
 8000a90:	004c      	lsls	r4, r1, #1
 8000a92:	0fc3      	lsrs	r3, r0, #31
 8000a94:	0a6d      	lsrs	r5, r5, #9
 8000a96:	2001      	movs	r0, #1
 8000a98:	0e12      	lsrs	r2, r2, #24
 8000a9a:	0a76      	lsrs	r6, r6, #9
 8000a9c:	0e24      	lsrs	r4, r4, #24
 8000a9e:	0fc9      	lsrs	r1, r1, #31
 8000aa0:	2aff      	cmp	r2, #255	; 0xff
 8000aa2:	d006      	beq.n	8000ab2 <__eqsf2+0x2a>
 8000aa4:	2cff      	cmp	r4, #255	; 0xff
 8000aa6:	d003      	beq.n	8000ab0 <__eqsf2+0x28>
 8000aa8:	42a2      	cmp	r2, r4
 8000aaa:	d101      	bne.n	8000ab0 <__eqsf2+0x28>
 8000aac:	42b5      	cmp	r5, r6
 8000aae:	d006      	beq.n	8000abe <__eqsf2+0x36>
 8000ab0:	bd70      	pop	{r4, r5, r6, pc}
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d1fc      	bne.n	8000ab0 <__eqsf2+0x28>
 8000ab6:	2cff      	cmp	r4, #255	; 0xff
 8000ab8:	d1fa      	bne.n	8000ab0 <__eqsf2+0x28>
 8000aba:	2e00      	cmp	r6, #0
 8000abc:	d1f8      	bne.n	8000ab0 <__eqsf2+0x28>
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d006      	beq.n	8000ad0 <__eqsf2+0x48>
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	d1f3      	bne.n	8000ab0 <__eqsf2+0x28>
 8000ac8:	0028      	movs	r0, r5
 8000aca:	1e43      	subs	r3, r0, #1
 8000acc:	4198      	sbcs	r0, r3
 8000ace:	e7ef      	b.n	8000ab0 <__eqsf2+0x28>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e7ed      	b.n	8000ab0 <__eqsf2+0x28>

08000ad4 <__gesf2>:
 8000ad4:	b570      	push	{r4, r5, r6, lr}
 8000ad6:	0042      	lsls	r2, r0, #1
 8000ad8:	0245      	lsls	r5, r0, #9
 8000ada:	024e      	lsls	r6, r1, #9
 8000adc:	004c      	lsls	r4, r1, #1
 8000ade:	0fc3      	lsrs	r3, r0, #31
 8000ae0:	0a6d      	lsrs	r5, r5, #9
 8000ae2:	0e12      	lsrs	r2, r2, #24
 8000ae4:	0a76      	lsrs	r6, r6, #9
 8000ae6:	0e24      	lsrs	r4, r4, #24
 8000ae8:	0fc8      	lsrs	r0, r1, #31
 8000aea:	2aff      	cmp	r2, #255	; 0xff
 8000aec:	d01b      	beq.n	8000b26 <__gesf2+0x52>
 8000aee:	2cff      	cmp	r4, #255	; 0xff
 8000af0:	d00e      	beq.n	8000b10 <__gesf2+0x3c>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d11b      	bne.n	8000b2e <__gesf2+0x5a>
 8000af6:	2c00      	cmp	r4, #0
 8000af8:	d101      	bne.n	8000afe <__gesf2+0x2a>
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d01c      	beq.n	8000b38 <__gesf2+0x64>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d00c      	beq.n	8000b1c <__gesf2+0x48>
 8000b02:	4283      	cmp	r3, r0
 8000b04:	d01c      	beq.n	8000b40 <__gesf2+0x6c>
 8000b06:	2102      	movs	r1, #2
 8000b08:	1e58      	subs	r0, r3, #1
 8000b0a:	4008      	ands	r0, r1
 8000b0c:	3801      	subs	r0, #1
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d122      	bne.n	8000b5a <__gesf2+0x86>
 8000b14:	2a00      	cmp	r2, #0
 8000b16:	d1f4      	bne.n	8000b02 <__gesf2+0x2e>
 8000b18:	2d00      	cmp	r5, #0
 8000b1a:	d1f2      	bne.n	8000b02 <__gesf2+0x2e>
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	d1f6      	bne.n	8000b0e <__gesf2+0x3a>
 8000b20:	2001      	movs	r0, #1
 8000b22:	4240      	negs	r0, r0
 8000b24:	e7f3      	b.n	8000b0e <__gesf2+0x3a>
 8000b26:	2d00      	cmp	r5, #0
 8000b28:	d117      	bne.n	8000b5a <__gesf2+0x86>
 8000b2a:	2cff      	cmp	r4, #255	; 0xff
 8000b2c:	d0f0      	beq.n	8000b10 <__gesf2+0x3c>
 8000b2e:	2c00      	cmp	r4, #0
 8000b30:	d1e7      	bne.n	8000b02 <__gesf2+0x2e>
 8000b32:	2e00      	cmp	r6, #0
 8000b34:	d1e5      	bne.n	8000b02 <__gesf2+0x2e>
 8000b36:	e7e6      	b.n	8000b06 <__gesf2+0x32>
 8000b38:	2000      	movs	r0, #0
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	d0e7      	beq.n	8000b0e <__gesf2+0x3a>
 8000b3e:	e7e2      	b.n	8000b06 <__gesf2+0x32>
 8000b40:	42a2      	cmp	r2, r4
 8000b42:	dc05      	bgt.n	8000b50 <__gesf2+0x7c>
 8000b44:	dbea      	blt.n	8000b1c <__gesf2+0x48>
 8000b46:	42b5      	cmp	r5, r6
 8000b48:	d802      	bhi.n	8000b50 <__gesf2+0x7c>
 8000b4a:	d3e7      	bcc.n	8000b1c <__gesf2+0x48>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e7de      	b.n	8000b0e <__gesf2+0x3a>
 8000b50:	4243      	negs	r3, r0
 8000b52:	4158      	adcs	r0, r3
 8000b54:	0040      	lsls	r0, r0, #1
 8000b56:	3801      	subs	r0, #1
 8000b58:	e7d9      	b.n	8000b0e <__gesf2+0x3a>
 8000b5a:	2002      	movs	r0, #2
 8000b5c:	4240      	negs	r0, r0
 8000b5e:	e7d6      	b.n	8000b0e <__gesf2+0x3a>

08000b60 <__lesf2>:
 8000b60:	b570      	push	{r4, r5, r6, lr}
 8000b62:	0042      	lsls	r2, r0, #1
 8000b64:	0245      	lsls	r5, r0, #9
 8000b66:	024e      	lsls	r6, r1, #9
 8000b68:	004c      	lsls	r4, r1, #1
 8000b6a:	0fc3      	lsrs	r3, r0, #31
 8000b6c:	0a6d      	lsrs	r5, r5, #9
 8000b6e:	0e12      	lsrs	r2, r2, #24
 8000b70:	0a76      	lsrs	r6, r6, #9
 8000b72:	0e24      	lsrs	r4, r4, #24
 8000b74:	0fc8      	lsrs	r0, r1, #31
 8000b76:	2aff      	cmp	r2, #255	; 0xff
 8000b78:	d00b      	beq.n	8000b92 <__lesf2+0x32>
 8000b7a:	2cff      	cmp	r4, #255	; 0xff
 8000b7c:	d00d      	beq.n	8000b9a <__lesf2+0x3a>
 8000b7e:	2a00      	cmp	r2, #0
 8000b80:	d11f      	bne.n	8000bc2 <__lesf2+0x62>
 8000b82:	2c00      	cmp	r4, #0
 8000b84:	d116      	bne.n	8000bb4 <__lesf2+0x54>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	d114      	bne.n	8000bb4 <__lesf2+0x54>
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d010      	beq.n	8000bb2 <__lesf2+0x52>
 8000b90:	e009      	b.n	8000ba6 <__lesf2+0x46>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	d10c      	bne.n	8000bb0 <__lesf2+0x50>
 8000b96:	2cff      	cmp	r4, #255	; 0xff
 8000b98:	d113      	bne.n	8000bc2 <__lesf2+0x62>
 8000b9a:	2e00      	cmp	r6, #0
 8000b9c:	d108      	bne.n	8000bb0 <__lesf2+0x50>
 8000b9e:	2a00      	cmp	r2, #0
 8000ba0:	d008      	beq.n	8000bb4 <__lesf2+0x54>
 8000ba2:	4283      	cmp	r3, r0
 8000ba4:	d012      	beq.n	8000bcc <__lesf2+0x6c>
 8000ba6:	2102      	movs	r1, #2
 8000ba8:	1e58      	subs	r0, r3, #1
 8000baa:	4008      	ands	r0, r1
 8000bac:	3801      	subs	r0, #1
 8000bae:	e000      	b.n	8000bb2 <__lesf2+0x52>
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	2d00      	cmp	r5, #0
 8000bb6:	d1f4      	bne.n	8000ba2 <__lesf2+0x42>
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	d1fa      	bne.n	8000bb2 <__lesf2+0x52>
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	4240      	negs	r0, r0
 8000bc0:	e7f7      	b.n	8000bb2 <__lesf2+0x52>
 8000bc2:	2c00      	cmp	r4, #0
 8000bc4:	d1ed      	bne.n	8000ba2 <__lesf2+0x42>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	d1eb      	bne.n	8000ba2 <__lesf2+0x42>
 8000bca:	e7ec      	b.n	8000ba6 <__lesf2+0x46>
 8000bcc:	42a2      	cmp	r2, r4
 8000bce:	dc05      	bgt.n	8000bdc <__lesf2+0x7c>
 8000bd0:	dbf2      	blt.n	8000bb8 <__lesf2+0x58>
 8000bd2:	42b5      	cmp	r5, r6
 8000bd4:	d802      	bhi.n	8000bdc <__lesf2+0x7c>
 8000bd6:	d3ef      	bcc.n	8000bb8 <__lesf2+0x58>
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e7ea      	b.n	8000bb2 <__lesf2+0x52>
 8000bdc:	4243      	negs	r3, r0
 8000bde:	4158      	adcs	r0, r3
 8000be0:	0040      	lsls	r0, r0, #1
 8000be2:	3801      	subs	r0, #1
 8000be4:	e7e5      	b.n	8000bb2 <__lesf2+0x52>
 8000be6:	46c0      	nop			; (mov r8, r8)

08000be8 <__aeabi_fmul>:
 8000be8:	0243      	lsls	r3, r0, #9
 8000bea:	0a5b      	lsrs	r3, r3, #9
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	464f      	mov	r7, r9
 8000bf0:	4646      	mov	r6, r8
 8000bf2:	4699      	mov	r9, r3
 8000bf4:	46d6      	mov	lr, sl
 8000bf6:	0fc3      	lsrs	r3, r0, #31
 8000bf8:	0045      	lsls	r5, r0, #1
 8000bfa:	4698      	mov	r8, r3
 8000bfc:	b5c0      	push	{r6, r7, lr}
 8000bfe:	464b      	mov	r3, r9
 8000c00:	1c0f      	adds	r7, r1, #0
 8000c02:	0e2d      	lsrs	r5, r5, #24
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fmul+0x20>
 8000c06:	e0cb      	b.n	8000da0 <__aeabi_fmul+0x1b8>
 8000c08:	2dff      	cmp	r5, #255	; 0xff
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fmul+0x26>
 8000c0c:	e0cf      	b.n	8000dae <__aeabi_fmul+0x1c6>
 8000c0e:	2280      	movs	r2, #128	; 0x80
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	04d2      	lsls	r2, r2, #19
 8000c14:	431a      	orrs	r2, r3
 8000c16:	2300      	movs	r3, #0
 8000c18:	4691      	mov	r9, r2
 8000c1a:	2600      	movs	r6, #0
 8000c1c:	469a      	mov	sl, r3
 8000c1e:	3d7f      	subs	r5, #127	; 0x7f
 8000c20:	027c      	lsls	r4, r7, #9
 8000c22:	007b      	lsls	r3, r7, #1
 8000c24:	0a64      	lsrs	r4, r4, #9
 8000c26:	0e1b      	lsrs	r3, r3, #24
 8000c28:	0fff      	lsrs	r7, r7, #31
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fmul+0x48>
 8000c2e:	e0a9      	b.n	8000d84 <__aeabi_fmul+0x19c>
 8000c30:	2bff      	cmp	r3, #255	; 0xff
 8000c32:	d011      	beq.n	8000c58 <__aeabi_fmul+0x70>
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	00e4      	lsls	r4, r4, #3
 8000c38:	04d2      	lsls	r2, r2, #19
 8000c3a:	4314      	orrs	r4, r2
 8000c3c:	4642      	mov	r2, r8
 8000c3e:	3b7f      	subs	r3, #127	; 0x7f
 8000c40:	195b      	adds	r3, r3, r5
 8000c42:	407a      	eors	r2, r7
 8000c44:	2000      	movs	r0, #0
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	1c5d      	adds	r5, r3, #1
 8000c4a:	2e0a      	cmp	r6, #10
 8000c4c:	dd13      	ble.n	8000c76 <__aeabi_fmul+0x8e>
 8000c4e:	003a      	movs	r2, r7
 8000c50:	2e0b      	cmp	r6, #11
 8000c52:	d047      	beq.n	8000ce4 <__aeabi_fmul+0xfc>
 8000c54:	4647      	mov	r7, r8
 8000c56:	e03f      	b.n	8000cd8 <__aeabi_fmul+0xf0>
 8000c58:	002b      	movs	r3, r5
 8000c5a:	33ff      	adds	r3, #255	; 0xff
 8000c5c:	2c00      	cmp	r4, #0
 8000c5e:	d11e      	bne.n	8000c9e <__aeabi_fmul+0xb6>
 8000c60:	2202      	movs	r2, #2
 8000c62:	4316      	orrs	r6, r2
 8000c64:	4642      	mov	r2, r8
 8000c66:	3501      	adds	r5, #1
 8000c68:	407a      	eors	r2, r7
 8000c6a:	b2d2      	uxtb	r2, r2
 8000c6c:	35ff      	adds	r5, #255	; 0xff
 8000c6e:	2e0a      	cmp	r6, #10
 8000c70:	dd00      	ble.n	8000c74 <__aeabi_fmul+0x8c>
 8000c72:	e0e4      	b.n	8000e3e <__aeabi_fmul+0x256>
 8000c74:	2002      	movs	r0, #2
 8000c76:	2e02      	cmp	r6, #2
 8000c78:	dc1c      	bgt.n	8000cb4 <__aeabi_fmul+0xcc>
 8000c7a:	3e01      	subs	r6, #1
 8000c7c:	2e01      	cmp	r6, #1
 8000c7e:	d842      	bhi.n	8000d06 <__aeabi_fmul+0x11e>
 8000c80:	2802      	cmp	r0, #2
 8000c82:	d03d      	beq.n	8000d00 <__aeabi_fmul+0x118>
 8000c84:	2801      	cmp	r0, #1
 8000c86:	d166      	bne.n	8000d56 <__aeabi_fmul+0x16e>
 8000c88:	2000      	movs	r0, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	05c0      	lsls	r0, r0, #23
 8000c8e:	4308      	orrs	r0, r1
 8000c90:	07d2      	lsls	r2, r2, #31
 8000c92:	4310      	orrs	r0, r2
 8000c94:	bce0      	pop	{r5, r6, r7}
 8000c96:	46ba      	mov	sl, r7
 8000c98:	46b1      	mov	r9, r6
 8000c9a:	46a8      	mov	r8, r5
 8000c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4316      	orrs	r6, r2
 8000ca2:	4642      	mov	r2, r8
 8000ca4:	3501      	adds	r5, #1
 8000ca6:	407a      	eors	r2, r7
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	35ff      	adds	r5, #255	; 0xff
 8000cac:	2e0a      	cmp	r6, #10
 8000cae:	dd00      	ble.n	8000cb2 <__aeabi_fmul+0xca>
 8000cb0:	e0e4      	b.n	8000e7c <__aeabi_fmul+0x294>
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	40b1      	lsls	r1, r6
 8000cb8:	26a6      	movs	r6, #166	; 0xa6
 8000cba:	00f6      	lsls	r6, r6, #3
 8000cbc:	4231      	tst	r1, r6
 8000cbe:	d10a      	bne.n	8000cd6 <__aeabi_fmul+0xee>
 8000cc0:	2690      	movs	r6, #144	; 0x90
 8000cc2:	00b6      	lsls	r6, r6, #2
 8000cc4:	4231      	tst	r1, r6
 8000cc6:	d116      	bne.n	8000cf6 <__aeabi_fmul+0x10e>
 8000cc8:	3eb9      	subs	r6, #185	; 0xb9
 8000cca:	3eff      	subs	r6, #255	; 0xff
 8000ccc:	420e      	tst	r6, r1
 8000cce:	d01a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cd0:	46a1      	mov	r9, r4
 8000cd2:	4682      	mov	sl, r0
 8000cd4:	e000      	b.n	8000cd8 <__aeabi_fmul+0xf0>
 8000cd6:	0017      	movs	r7, r2
 8000cd8:	4653      	mov	r3, sl
 8000cda:	003a      	movs	r2, r7
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d00f      	beq.n	8000d00 <__aeabi_fmul+0x118>
 8000ce0:	464c      	mov	r4, r9
 8000ce2:	4650      	mov	r0, sl
 8000ce4:	2803      	cmp	r0, #3
 8000ce6:	d1cd      	bne.n	8000c84 <__aeabi_fmul+0x9c>
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	03c9      	lsls	r1, r1, #15
 8000cec:	4321      	orrs	r1, r4
 8000cee:	0249      	lsls	r1, r1, #9
 8000cf0:	20ff      	movs	r0, #255	; 0xff
 8000cf2:	0a49      	lsrs	r1, r1, #9
 8000cf4:	e7ca      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	20ff      	movs	r0, #255	; 0xff
 8000cfc:	03c9      	lsls	r1, r1, #15
 8000cfe:	e7c5      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000d00:	20ff      	movs	r0, #255	; 0xff
 8000d02:	2100      	movs	r1, #0
 8000d04:	e7c2      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000d06:	0c20      	lsrs	r0, r4, #16
 8000d08:	4649      	mov	r1, r9
 8000d0a:	0424      	lsls	r4, r4, #16
 8000d0c:	0c24      	lsrs	r4, r4, #16
 8000d0e:	0027      	movs	r7, r4
 8000d10:	0c0e      	lsrs	r6, r1, #16
 8000d12:	0409      	lsls	r1, r1, #16
 8000d14:	0c09      	lsrs	r1, r1, #16
 8000d16:	4374      	muls	r4, r6
 8000d18:	434f      	muls	r7, r1
 8000d1a:	4346      	muls	r6, r0
 8000d1c:	4348      	muls	r0, r1
 8000d1e:	0c39      	lsrs	r1, r7, #16
 8000d20:	1900      	adds	r0, r0, r4
 8000d22:	1809      	adds	r1, r1, r0
 8000d24:	428c      	cmp	r4, r1
 8000d26:	d903      	bls.n	8000d30 <__aeabi_fmul+0x148>
 8000d28:	2080      	movs	r0, #128	; 0x80
 8000d2a:	0240      	lsls	r0, r0, #9
 8000d2c:	4684      	mov	ip, r0
 8000d2e:	4466      	add	r6, ip
 8000d30:	043f      	lsls	r7, r7, #16
 8000d32:	0408      	lsls	r0, r1, #16
 8000d34:	0c3f      	lsrs	r7, r7, #16
 8000d36:	19c0      	adds	r0, r0, r7
 8000d38:	0184      	lsls	r4, r0, #6
 8000d3a:	1e67      	subs	r7, r4, #1
 8000d3c:	41bc      	sbcs	r4, r7
 8000d3e:	0c09      	lsrs	r1, r1, #16
 8000d40:	0e80      	lsrs	r0, r0, #26
 8000d42:	1989      	adds	r1, r1, r6
 8000d44:	4304      	orrs	r4, r0
 8000d46:	0189      	lsls	r1, r1, #6
 8000d48:	430c      	orrs	r4, r1
 8000d4a:	0109      	lsls	r1, r1, #4
 8000d4c:	d571      	bpl.n	8000e32 <__aeabi_fmul+0x24a>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	0861      	lsrs	r1, r4, #1
 8000d52:	401c      	ands	r4, r3
 8000d54:	430c      	orrs	r4, r1
 8000d56:	002b      	movs	r3, r5
 8000d58:	337f      	adds	r3, #127	; 0x7f
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	dd51      	ble.n	8000e02 <__aeabi_fmul+0x21a>
 8000d5e:	0761      	lsls	r1, r4, #29
 8000d60:	d004      	beq.n	8000d6c <__aeabi_fmul+0x184>
 8000d62:	210f      	movs	r1, #15
 8000d64:	4021      	ands	r1, r4
 8000d66:	2904      	cmp	r1, #4
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fmul+0x184>
 8000d6a:	3404      	adds	r4, #4
 8000d6c:	0121      	lsls	r1, r4, #4
 8000d6e:	d503      	bpl.n	8000d78 <__aeabi_fmul+0x190>
 8000d70:	4b43      	ldr	r3, [pc, #268]	; (8000e80 <__aeabi_fmul+0x298>)
 8000d72:	401c      	ands	r4, r3
 8000d74:	002b      	movs	r3, r5
 8000d76:	3380      	adds	r3, #128	; 0x80
 8000d78:	2bfe      	cmp	r3, #254	; 0xfe
 8000d7a:	dcc1      	bgt.n	8000d00 <__aeabi_fmul+0x118>
 8000d7c:	01a1      	lsls	r1, r4, #6
 8000d7e:	0a49      	lsrs	r1, r1, #9
 8000d80:	b2d8      	uxtb	r0, r3
 8000d82:	e783      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000d84:	2c00      	cmp	r4, #0
 8000d86:	d12c      	bne.n	8000de2 <__aeabi_fmul+0x1fa>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	4642      	mov	r2, r8
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	002b      	movs	r3, r5
 8000d90:	407a      	eors	r2, r7
 8000d92:	2001      	movs	r0, #1
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	1c5d      	adds	r5, r3, #1
 8000d98:	2e0a      	cmp	r6, #10
 8000d9a:	dd00      	ble.n	8000d9e <__aeabi_fmul+0x1b6>
 8000d9c:	e757      	b.n	8000c4e <__aeabi_fmul+0x66>
 8000d9e:	e76a      	b.n	8000c76 <__aeabi_fmul+0x8e>
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d110      	bne.n	8000dc6 <__aeabi_fmul+0x1de>
 8000da4:	2301      	movs	r3, #1
 8000da6:	2604      	movs	r6, #4
 8000da8:	2500      	movs	r5, #0
 8000daa:	469a      	mov	sl, r3
 8000dac:	e738      	b.n	8000c20 <__aeabi_fmul+0x38>
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d104      	bne.n	8000dbc <__aeabi_fmul+0x1d4>
 8000db2:	2302      	movs	r3, #2
 8000db4:	2608      	movs	r6, #8
 8000db6:	25ff      	movs	r5, #255	; 0xff
 8000db8:	469a      	mov	sl, r3
 8000dba:	e731      	b.n	8000c20 <__aeabi_fmul+0x38>
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	260c      	movs	r6, #12
 8000dc0:	25ff      	movs	r5, #255	; 0xff
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	e72c      	b.n	8000c20 <__aeabi_fmul+0x38>
 8000dc6:	4648      	mov	r0, r9
 8000dc8:	f002 f9ac 	bl	8003124 <__clzsi2>
 8000dcc:	464a      	mov	r2, r9
 8000dce:	1f43      	subs	r3, r0, #5
 8000dd0:	2576      	movs	r5, #118	; 0x76
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	426d      	negs	r5, r5
 8000dd8:	4691      	mov	r9, r2
 8000dda:	2600      	movs	r6, #0
 8000ddc:	469a      	mov	sl, r3
 8000dde:	1a2d      	subs	r5, r5, r0
 8000de0:	e71e      	b.n	8000c20 <__aeabi_fmul+0x38>
 8000de2:	0020      	movs	r0, r4
 8000de4:	f002 f99e 	bl	8003124 <__clzsi2>
 8000de8:	4642      	mov	r2, r8
 8000dea:	1f43      	subs	r3, r0, #5
 8000dec:	409c      	lsls	r4, r3
 8000dee:	1a2b      	subs	r3, r5, r0
 8000df0:	3b76      	subs	r3, #118	; 0x76
 8000df2:	407a      	eors	r2, r7
 8000df4:	2000      	movs	r0, #0
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	1c5d      	adds	r5, r3, #1
 8000dfa:	2e0a      	cmp	r6, #10
 8000dfc:	dd00      	ble.n	8000e00 <__aeabi_fmul+0x218>
 8000dfe:	e726      	b.n	8000c4e <__aeabi_fmul+0x66>
 8000e00:	e739      	b.n	8000c76 <__aeabi_fmul+0x8e>
 8000e02:	2101      	movs	r1, #1
 8000e04:	1acb      	subs	r3, r1, r3
 8000e06:	2b1b      	cmp	r3, #27
 8000e08:	dd00      	ble.n	8000e0c <__aeabi_fmul+0x224>
 8000e0a:	e73d      	b.n	8000c88 <__aeabi_fmul+0xa0>
 8000e0c:	359e      	adds	r5, #158	; 0x9e
 8000e0e:	0021      	movs	r1, r4
 8000e10:	40ac      	lsls	r4, r5
 8000e12:	40d9      	lsrs	r1, r3
 8000e14:	1e63      	subs	r3, r4, #1
 8000e16:	419c      	sbcs	r4, r3
 8000e18:	4321      	orrs	r1, r4
 8000e1a:	074b      	lsls	r3, r1, #29
 8000e1c:	d004      	beq.n	8000e28 <__aeabi_fmul+0x240>
 8000e1e:	230f      	movs	r3, #15
 8000e20:	400b      	ands	r3, r1
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d000      	beq.n	8000e28 <__aeabi_fmul+0x240>
 8000e26:	3104      	adds	r1, #4
 8000e28:	014b      	lsls	r3, r1, #5
 8000e2a:	d504      	bpl.n	8000e36 <__aeabi_fmul+0x24e>
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	2100      	movs	r1, #0
 8000e30:	e72c      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000e32:	001d      	movs	r5, r3
 8000e34:	e78f      	b.n	8000d56 <__aeabi_fmul+0x16e>
 8000e36:	0189      	lsls	r1, r1, #6
 8000e38:	2000      	movs	r0, #0
 8000e3a:	0a49      	lsrs	r1, r1, #9
 8000e3c:	e726      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	2e0f      	cmp	r6, #15
 8000e42:	d10c      	bne.n	8000e5e <__aeabi_fmul+0x276>
 8000e44:	2180      	movs	r1, #128	; 0x80
 8000e46:	464b      	mov	r3, r9
 8000e48:	03c9      	lsls	r1, r1, #15
 8000e4a:	420b      	tst	r3, r1
 8000e4c:	d00d      	beq.n	8000e6a <__aeabi_fmul+0x282>
 8000e4e:	420c      	tst	r4, r1
 8000e50:	d10b      	bne.n	8000e6a <__aeabi_fmul+0x282>
 8000e52:	4321      	orrs	r1, r4
 8000e54:	0249      	lsls	r1, r1, #9
 8000e56:	003a      	movs	r2, r7
 8000e58:	20ff      	movs	r0, #255	; 0xff
 8000e5a:	0a49      	lsrs	r1, r1, #9
 8000e5c:	e716      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000e5e:	2e0b      	cmp	r6, #11
 8000e60:	d000      	beq.n	8000e64 <__aeabi_fmul+0x27c>
 8000e62:	e6f7      	b.n	8000c54 <__aeabi_fmul+0x6c>
 8000e64:	46a1      	mov	r9, r4
 8000e66:	469a      	mov	sl, r3
 8000e68:	e736      	b.n	8000cd8 <__aeabi_fmul+0xf0>
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	03c9      	lsls	r1, r1, #15
 8000e70:	4319      	orrs	r1, r3
 8000e72:	0249      	lsls	r1, r1, #9
 8000e74:	4642      	mov	r2, r8
 8000e76:	20ff      	movs	r0, #255	; 0xff
 8000e78:	0a49      	lsrs	r1, r1, #9
 8000e7a:	e707      	b.n	8000c8c <__aeabi_fmul+0xa4>
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e7df      	b.n	8000e40 <__aeabi_fmul+0x258>
 8000e80:	f7ffffff 	.word	0xf7ffffff

08000e84 <__aeabi_fsub>:
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e86:	46c6      	mov	lr, r8
 8000e88:	0243      	lsls	r3, r0, #9
 8000e8a:	0a5b      	lsrs	r3, r3, #9
 8000e8c:	0045      	lsls	r5, r0, #1
 8000e8e:	00da      	lsls	r2, r3, #3
 8000e90:	0fc4      	lsrs	r4, r0, #31
 8000e92:	0248      	lsls	r0, r1, #9
 8000e94:	004f      	lsls	r7, r1, #1
 8000e96:	4694      	mov	ip, r2
 8000e98:	0a42      	lsrs	r2, r0, #9
 8000e9a:	001e      	movs	r6, r3
 8000e9c:	4690      	mov	r8, r2
 8000e9e:	b500      	push	{lr}
 8000ea0:	0e2d      	lsrs	r5, r5, #24
 8000ea2:	0e3f      	lsrs	r7, r7, #24
 8000ea4:	0fc9      	lsrs	r1, r1, #31
 8000ea6:	0980      	lsrs	r0, r0, #6
 8000ea8:	2fff      	cmp	r7, #255	; 0xff
 8000eaa:	d059      	beq.n	8000f60 <__aeabi_fsub+0xdc>
 8000eac:	2201      	movs	r2, #1
 8000eae:	4051      	eors	r1, r2
 8000eb0:	428c      	cmp	r4, r1
 8000eb2:	d039      	beq.n	8000f28 <__aeabi_fsub+0xa4>
 8000eb4:	1bea      	subs	r2, r5, r7
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	dd58      	ble.n	8000f6c <__aeabi_fsub+0xe8>
 8000eba:	2f00      	cmp	r7, #0
 8000ebc:	d068      	beq.n	8000f90 <__aeabi_fsub+0x10c>
 8000ebe:	2dff      	cmp	r5, #255	; 0xff
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_fsub+0x40>
 8000ec2:	e0d1      	b.n	8001068 <__aeabi_fsub+0x1e4>
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	04db      	lsls	r3, r3, #19
 8000ec8:	4318      	orrs	r0, r3
 8000eca:	2a1b      	cmp	r2, #27
 8000ecc:	dc00      	bgt.n	8000ed0 <__aeabi_fsub+0x4c>
 8000ece:	e0e3      	b.n	8001098 <__aeabi_fsub+0x214>
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4662      	mov	r2, ip
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	015a      	lsls	r2, r3, #5
 8000ed8:	d400      	bmi.n	8000edc <__aeabi_fsub+0x58>
 8000eda:	e0ac      	b.n	8001036 <__aeabi_fsub+0x1b2>
 8000edc:	019b      	lsls	r3, r3, #6
 8000ede:	099e      	lsrs	r6, r3, #6
 8000ee0:	0030      	movs	r0, r6
 8000ee2:	f002 f91f 	bl	8003124 <__clzsi2>
 8000ee6:	0033      	movs	r3, r6
 8000ee8:	3805      	subs	r0, #5
 8000eea:	4083      	lsls	r3, r0
 8000eec:	4285      	cmp	r5, r0
 8000eee:	dc00      	bgt.n	8000ef2 <__aeabi_fsub+0x6e>
 8000ef0:	e0c6      	b.n	8001080 <__aeabi_fsub+0x1fc>
 8000ef2:	4ab2      	ldr	r2, [pc, #712]	; (80011bc <__aeabi_fsub+0x338>)
 8000ef4:	1a2d      	subs	r5, r5, r0
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	075a      	lsls	r2, r3, #29
 8000efa:	d004      	beq.n	8000f06 <__aeabi_fsub+0x82>
 8000efc:	220f      	movs	r2, #15
 8000efe:	401a      	ands	r2, r3
 8000f00:	2a04      	cmp	r2, #4
 8000f02:	d000      	beq.n	8000f06 <__aeabi_fsub+0x82>
 8000f04:	3304      	adds	r3, #4
 8000f06:	015a      	lsls	r2, r3, #5
 8000f08:	d400      	bmi.n	8000f0c <__aeabi_fsub+0x88>
 8000f0a:	e097      	b.n	800103c <__aeabi_fsub+0x1b8>
 8000f0c:	1c6a      	adds	r2, r5, #1
 8000f0e:	2dfe      	cmp	r5, #254	; 0xfe
 8000f10:	d100      	bne.n	8000f14 <__aeabi_fsub+0x90>
 8000f12:	e084      	b.n	800101e <__aeabi_fsub+0x19a>
 8000f14:	019b      	lsls	r3, r3, #6
 8000f16:	0a5e      	lsrs	r6, r3, #9
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	05d0      	lsls	r0, r2, #23
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	07e4      	lsls	r4, r4, #31
 8000f20:	4320      	orrs	r0, r4
 8000f22:	bc80      	pop	{r7}
 8000f24:	46b8      	mov	r8, r7
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	1bea      	subs	r2, r5, r7
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	dd41      	ble.n	8000fb2 <__aeabi_fsub+0x12e>
 8000f2e:	2f00      	cmp	r7, #0
 8000f30:	d06b      	beq.n	800100a <__aeabi_fsub+0x186>
 8000f32:	2dff      	cmp	r5, #255	; 0xff
 8000f34:	d100      	bne.n	8000f38 <__aeabi_fsub+0xb4>
 8000f36:	e097      	b.n	8001068 <__aeabi_fsub+0x1e4>
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	04db      	lsls	r3, r3, #19
 8000f3c:	4318      	orrs	r0, r3
 8000f3e:	2a1b      	cmp	r2, #27
 8000f40:	dc00      	bgt.n	8000f44 <__aeabi_fsub+0xc0>
 8000f42:	e0cc      	b.n	80010de <__aeabi_fsub+0x25a>
 8000f44:	2301      	movs	r3, #1
 8000f46:	4463      	add	r3, ip
 8000f48:	015a      	lsls	r2, r3, #5
 8000f4a:	d574      	bpl.n	8001036 <__aeabi_fsub+0x1b2>
 8000f4c:	3501      	adds	r5, #1
 8000f4e:	2dff      	cmp	r5, #255	; 0xff
 8000f50:	d065      	beq.n	800101e <__aeabi_fsub+0x19a>
 8000f52:	2201      	movs	r2, #1
 8000f54:	499a      	ldr	r1, [pc, #616]	; (80011c0 <__aeabi_fsub+0x33c>)
 8000f56:	401a      	ands	r2, r3
 8000f58:	085b      	lsrs	r3, r3, #1
 8000f5a:	400b      	ands	r3, r1
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	e7cb      	b.n	8000ef8 <__aeabi_fsub+0x74>
 8000f60:	2800      	cmp	r0, #0
 8000f62:	d01f      	beq.n	8000fa4 <__aeabi_fsub+0x120>
 8000f64:	428c      	cmp	r4, r1
 8000f66:	d022      	beq.n	8000fae <__aeabi_fsub+0x12a>
 8000f68:	002a      	movs	r2, r5
 8000f6a:	3aff      	subs	r2, #255	; 0xff
 8000f6c:	2a00      	cmp	r2, #0
 8000f6e:	d035      	beq.n	8000fdc <__aeabi_fsub+0x158>
 8000f70:	1b7a      	subs	r2, r7, r5
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	d000      	beq.n	8000f78 <__aeabi_fsub+0xf4>
 8000f76:	e099      	b.n	80010ac <__aeabi_fsub+0x228>
 8000f78:	4663      	mov	r3, ip
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0xfc>
 8000f7e:	e0dd      	b.n	800113c <__aeabi_fsub+0x2b8>
 8000f80:	1e53      	subs	r3, r2, #1
 8000f82:	2a01      	cmp	r2, #1
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x104>
 8000f86:	e105      	b.n	8001194 <__aeabi_fsub+0x310>
 8000f88:	2aff      	cmp	r2, #255	; 0xff
 8000f8a:	d06b      	beq.n	8001064 <__aeabi_fsub+0x1e0>
 8000f8c:	001a      	movs	r2, r3
 8000f8e:	e094      	b.n	80010ba <__aeabi_fsub+0x236>
 8000f90:	2800      	cmp	r0, #0
 8000f92:	d073      	beq.n	800107c <__aeabi_fsub+0x1f8>
 8000f94:	1e51      	subs	r1, r2, #1
 8000f96:	2a01      	cmp	r2, #1
 8000f98:	d100      	bne.n	8000f9c <__aeabi_fsub+0x118>
 8000f9a:	e0df      	b.n	800115c <__aeabi_fsub+0x2d8>
 8000f9c:	2aff      	cmp	r2, #255	; 0xff
 8000f9e:	d063      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 8000fa0:	000a      	movs	r2, r1
 8000fa2:	e792      	b.n	8000eca <__aeabi_fsub+0x46>
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4051      	eors	r1, r2
 8000fa8:	42a1      	cmp	r1, r4
 8000faa:	d000      	beq.n	8000fae <__aeabi_fsub+0x12a>
 8000fac:	e782      	b.n	8000eb4 <__aeabi_fsub+0x30>
 8000fae:	002a      	movs	r2, r5
 8000fb0:	3aff      	subs	r2, #255	; 0xff
 8000fb2:	2a00      	cmp	r2, #0
 8000fb4:	d036      	beq.n	8001024 <__aeabi_fsub+0x1a0>
 8000fb6:	1b7a      	subs	r2, r7, r5
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fsub+0x13a>
 8000fbc:	e0aa      	b.n	8001114 <__aeabi_fsub+0x290>
 8000fbe:	2fff      	cmp	r7, #255	; 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x140>
 8000fc2:	e0da      	b.n	800117a <__aeabi_fsub+0x2f6>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	4661      	mov	r1, ip
 8000fc8:	04db      	lsls	r3, r3, #19
 8000fca:	4319      	orrs	r1, r3
 8000fcc:	468c      	mov	ip, r1
 8000fce:	2a1b      	cmp	r2, #27
 8000fd0:	dc00      	bgt.n	8000fd4 <__aeabi_fsub+0x150>
 8000fd2:	e0d4      	b.n	800117e <__aeabi_fsub+0x2fa>
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	003d      	movs	r5, r7
 8000fd8:	181b      	adds	r3, r3, r0
 8000fda:	e7b5      	b.n	8000f48 <__aeabi_fsub+0xc4>
 8000fdc:	27fe      	movs	r7, #254	; 0xfe
 8000fde:	1c6a      	adds	r2, r5, #1
 8000fe0:	4217      	tst	r7, r2
 8000fe2:	d171      	bne.n	80010c8 <__aeabi_fsub+0x244>
 8000fe4:	2d00      	cmp	r5, #0
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0x166>
 8000fe8:	e09e      	b.n	8001128 <__aeabi_fsub+0x2a4>
 8000fea:	4663      	mov	r3, ip
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_fsub+0x16e>
 8000ff0:	e0d5      	b.n	800119e <__aeabi_fsub+0x31a>
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2800      	cmp	r0, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x176>
 8000ff8:	e78f      	b.n	8000f1a <__aeabi_fsub+0x96>
 8000ffa:	1a1b      	subs	r3, r3, r0
 8000ffc:	015e      	lsls	r6, r3, #5
 8000ffe:	d400      	bmi.n	8001002 <__aeabi_fsub+0x17e>
 8001000:	e0d6      	b.n	80011b0 <__aeabi_fsub+0x32c>
 8001002:	4663      	mov	r3, ip
 8001004:	000c      	movs	r4, r1
 8001006:	1ac3      	subs	r3, r0, r3
 8001008:	e776      	b.n	8000ef8 <__aeabi_fsub+0x74>
 800100a:	2800      	cmp	r0, #0
 800100c:	d036      	beq.n	800107c <__aeabi_fsub+0x1f8>
 800100e:	1e51      	subs	r1, r2, #1
 8001010:	2a01      	cmp	r2, #1
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0x192>
 8001014:	e09a      	b.n	800114c <__aeabi_fsub+0x2c8>
 8001016:	2aff      	cmp	r2, #255	; 0xff
 8001018:	d026      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 800101a:	000a      	movs	r2, r1
 800101c:	e78f      	b.n	8000f3e <__aeabi_fsub+0xba>
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	2600      	movs	r6, #0
 8001022:	e77a      	b.n	8000f1a <__aeabi_fsub+0x96>
 8001024:	27fe      	movs	r7, #254	; 0xfe
 8001026:	1c6a      	adds	r2, r5, #1
 8001028:	4217      	tst	r7, r2
 800102a:	d062      	beq.n	80010f2 <__aeabi_fsub+0x26e>
 800102c:	2aff      	cmp	r2, #255	; 0xff
 800102e:	d0f6      	beq.n	800101e <__aeabi_fsub+0x19a>
 8001030:	0015      	movs	r5, r2
 8001032:	4460      	add	r0, ip
 8001034:	0843      	lsrs	r3, r0, #1
 8001036:	075a      	lsls	r2, r3, #29
 8001038:	d000      	beq.n	800103c <__aeabi_fsub+0x1b8>
 800103a:	e75f      	b.n	8000efc <__aeabi_fsub+0x78>
 800103c:	08db      	lsrs	r3, r3, #3
 800103e:	2dff      	cmp	r5, #255	; 0xff
 8001040:	d012      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 8001042:	025b      	lsls	r3, r3, #9
 8001044:	0a5e      	lsrs	r6, r3, #9
 8001046:	b2ea      	uxtb	r2, r5
 8001048:	e767      	b.n	8000f1a <__aeabi_fsub+0x96>
 800104a:	4662      	mov	r2, ip
 800104c:	2a00      	cmp	r2, #0
 800104e:	d100      	bne.n	8001052 <__aeabi_fsub+0x1ce>
 8001050:	e093      	b.n	800117a <__aeabi_fsub+0x2f6>
 8001052:	2800      	cmp	r0, #0
 8001054:	d008      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 8001056:	2280      	movs	r2, #128	; 0x80
 8001058:	03d2      	lsls	r2, r2, #15
 800105a:	4213      	tst	r3, r2
 800105c:	d004      	beq.n	8001068 <__aeabi_fsub+0x1e4>
 800105e:	4640      	mov	r0, r8
 8001060:	4210      	tst	r0, r2
 8001062:	d101      	bne.n	8001068 <__aeabi_fsub+0x1e4>
 8001064:	000c      	movs	r4, r1
 8001066:	4643      	mov	r3, r8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0d8      	beq.n	800101e <__aeabi_fsub+0x19a>
 800106c:	2680      	movs	r6, #128	; 0x80
 800106e:	03f6      	lsls	r6, r6, #15
 8001070:	431e      	orrs	r6, r3
 8001072:	0276      	lsls	r6, r6, #9
 8001074:	22ff      	movs	r2, #255	; 0xff
 8001076:	0a76      	lsrs	r6, r6, #9
 8001078:	e74f      	b.n	8000f1a <__aeabi_fsub+0x96>
 800107a:	4643      	mov	r3, r8
 800107c:	0015      	movs	r5, r2
 800107e:	e7de      	b.n	800103e <__aeabi_fsub+0x1ba>
 8001080:	2220      	movs	r2, #32
 8001082:	1b40      	subs	r0, r0, r5
 8001084:	3001      	adds	r0, #1
 8001086:	1a12      	subs	r2, r2, r0
 8001088:	0019      	movs	r1, r3
 800108a:	4093      	lsls	r3, r2
 800108c:	40c1      	lsrs	r1, r0
 800108e:	1e5a      	subs	r2, r3, #1
 8001090:	4193      	sbcs	r3, r2
 8001092:	2500      	movs	r5, #0
 8001094:	430b      	orrs	r3, r1
 8001096:	e72f      	b.n	8000ef8 <__aeabi_fsub+0x74>
 8001098:	2320      	movs	r3, #32
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	0001      	movs	r1, r0
 800109e:	4098      	lsls	r0, r3
 80010a0:	0003      	movs	r3, r0
 80010a2:	40d1      	lsrs	r1, r2
 80010a4:	1e5a      	subs	r2, r3, #1
 80010a6:	4193      	sbcs	r3, r2
 80010a8:	430b      	orrs	r3, r1
 80010aa:	e712      	b.n	8000ed2 <__aeabi_fsub+0x4e>
 80010ac:	2fff      	cmp	r7, #255	; 0xff
 80010ae:	d0d9      	beq.n	8001064 <__aeabi_fsub+0x1e0>
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	4664      	mov	r4, ip
 80010b4:	04db      	lsls	r3, r3, #19
 80010b6:	431c      	orrs	r4, r3
 80010b8:	46a4      	mov	ip, r4
 80010ba:	2a1b      	cmp	r2, #27
 80010bc:	dd52      	ble.n	8001164 <__aeabi_fsub+0x2e0>
 80010be:	2301      	movs	r3, #1
 80010c0:	000c      	movs	r4, r1
 80010c2:	003d      	movs	r5, r7
 80010c4:	1ac3      	subs	r3, r0, r3
 80010c6:	e706      	b.n	8000ed6 <__aeabi_fsub+0x52>
 80010c8:	4663      	mov	r3, ip
 80010ca:	1a1e      	subs	r6, r3, r0
 80010cc:	0173      	lsls	r3, r6, #5
 80010ce:	d439      	bmi.n	8001144 <__aeabi_fsub+0x2c0>
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	d000      	beq.n	80010d6 <__aeabi_fsub+0x252>
 80010d4:	e704      	b.n	8000ee0 <__aeabi_fsub+0x5c>
 80010d6:	2400      	movs	r4, #0
 80010d8:	2200      	movs	r2, #0
 80010da:	2600      	movs	r6, #0
 80010dc:	e71d      	b.n	8000f1a <__aeabi_fsub+0x96>
 80010de:	2320      	movs	r3, #32
 80010e0:	1a9b      	subs	r3, r3, r2
 80010e2:	0001      	movs	r1, r0
 80010e4:	4098      	lsls	r0, r3
 80010e6:	0003      	movs	r3, r0
 80010e8:	40d1      	lsrs	r1, r2
 80010ea:	1e5a      	subs	r2, r3, #1
 80010ec:	4193      	sbcs	r3, r2
 80010ee:	430b      	orrs	r3, r1
 80010f0:	e729      	b.n	8000f46 <__aeabi_fsub+0xc2>
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d1a9      	bne.n	800104a <__aeabi_fsub+0x1c6>
 80010f6:	4663      	mov	r3, ip
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d056      	beq.n	80011aa <__aeabi_fsub+0x326>
 80010fc:	2200      	movs	r2, #0
 80010fe:	2800      	cmp	r0, #0
 8001100:	d100      	bne.n	8001104 <__aeabi_fsub+0x280>
 8001102:	e70a      	b.n	8000f1a <__aeabi_fsub+0x96>
 8001104:	0003      	movs	r3, r0
 8001106:	4463      	add	r3, ip
 8001108:	015a      	lsls	r2, r3, #5
 800110a:	d594      	bpl.n	8001036 <__aeabi_fsub+0x1b2>
 800110c:	4a2b      	ldr	r2, [pc, #172]	; (80011bc <__aeabi_fsub+0x338>)
 800110e:	3501      	adds	r5, #1
 8001110:	4013      	ands	r3, r2
 8001112:	e790      	b.n	8001036 <__aeabi_fsub+0x1b2>
 8001114:	4663      	mov	r3, ip
 8001116:	2b00      	cmp	r3, #0
 8001118:	d0af      	beq.n	800107a <__aeabi_fsub+0x1f6>
 800111a:	1e53      	subs	r3, r2, #1
 800111c:	2a01      	cmp	r2, #1
 800111e:	d015      	beq.n	800114c <__aeabi_fsub+0x2c8>
 8001120:	2aff      	cmp	r2, #255	; 0xff
 8001122:	d02a      	beq.n	800117a <__aeabi_fsub+0x2f6>
 8001124:	001a      	movs	r2, r3
 8001126:	e752      	b.n	8000fce <__aeabi_fsub+0x14a>
 8001128:	4662      	mov	r2, ip
 800112a:	2a00      	cmp	r2, #0
 800112c:	d191      	bne.n	8001052 <__aeabi_fsub+0x1ce>
 800112e:	2800      	cmp	r0, #0
 8001130:	d198      	bne.n	8001064 <__aeabi_fsub+0x1e0>
 8001132:	2680      	movs	r6, #128	; 0x80
 8001134:	2400      	movs	r4, #0
 8001136:	22ff      	movs	r2, #255	; 0xff
 8001138:	03f6      	lsls	r6, r6, #15
 800113a:	e6ee      	b.n	8000f1a <__aeabi_fsub+0x96>
 800113c:	000c      	movs	r4, r1
 800113e:	4643      	mov	r3, r8
 8001140:	0015      	movs	r5, r2
 8001142:	e77c      	b.n	800103e <__aeabi_fsub+0x1ba>
 8001144:	4663      	mov	r3, ip
 8001146:	000c      	movs	r4, r1
 8001148:	1ac6      	subs	r6, r0, r3
 800114a:	e6c9      	b.n	8000ee0 <__aeabi_fsub+0x5c>
 800114c:	0003      	movs	r3, r0
 800114e:	4463      	add	r3, ip
 8001150:	2501      	movs	r5, #1
 8001152:	015a      	lsls	r2, r3, #5
 8001154:	d400      	bmi.n	8001158 <__aeabi_fsub+0x2d4>
 8001156:	e76e      	b.n	8001036 <__aeabi_fsub+0x1b2>
 8001158:	2502      	movs	r5, #2
 800115a:	e6fa      	b.n	8000f52 <__aeabi_fsub+0xce>
 800115c:	4663      	mov	r3, ip
 800115e:	2501      	movs	r5, #1
 8001160:	1a1b      	subs	r3, r3, r0
 8001162:	e6b8      	b.n	8000ed6 <__aeabi_fsub+0x52>
 8001164:	4664      	mov	r4, ip
 8001166:	2320      	movs	r3, #32
 8001168:	40d4      	lsrs	r4, r2
 800116a:	1a9b      	subs	r3, r3, r2
 800116c:	4662      	mov	r2, ip
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	1e5a      	subs	r2, r3, #1
 8001174:	4193      	sbcs	r3, r2
 8001176:	4323      	orrs	r3, r4
 8001178:	e7a2      	b.n	80010c0 <__aeabi_fsub+0x23c>
 800117a:	4643      	mov	r3, r8
 800117c:	e774      	b.n	8001068 <__aeabi_fsub+0x1e4>
 800117e:	4661      	mov	r1, ip
 8001180:	2320      	movs	r3, #32
 8001182:	40d1      	lsrs	r1, r2
 8001184:	1a9b      	subs	r3, r3, r2
 8001186:	4662      	mov	r2, ip
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	1e5a      	subs	r2, r3, #1
 800118e:	4193      	sbcs	r3, r2
 8001190:	430b      	orrs	r3, r1
 8001192:	e720      	b.n	8000fd6 <__aeabi_fsub+0x152>
 8001194:	4663      	mov	r3, ip
 8001196:	000c      	movs	r4, r1
 8001198:	2501      	movs	r5, #1
 800119a:	1ac3      	subs	r3, r0, r3
 800119c:	e69b      	b.n	8000ed6 <__aeabi_fsub+0x52>
 800119e:	2800      	cmp	r0, #0
 80011a0:	d099      	beq.n	80010d6 <__aeabi_fsub+0x252>
 80011a2:	000c      	movs	r4, r1
 80011a4:	4646      	mov	r6, r8
 80011a6:	2200      	movs	r2, #0
 80011a8:	e6b7      	b.n	8000f1a <__aeabi_fsub+0x96>
 80011aa:	4646      	mov	r6, r8
 80011ac:	2200      	movs	r2, #0
 80011ae:	e6b4      	b.n	8000f1a <__aeabi_fsub+0x96>
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d000      	beq.n	80011b6 <__aeabi_fsub+0x332>
 80011b4:	e73f      	b.n	8001036 <__aeabi_fsub+0x1b2>
 80011b6:	2400      	movs	r4, #0
 80011b8:	2600      	movs	r6, #0
 80011ba:	e6ae      	b.n	8000f1a <__aeabi_fsub+0x96>
 80011bc:	fbffffff 	.word	0xfbffffff
 80011c0:	7dffffff 	.word	0x7dffffff

080011c4 <__aeabi_i2f>:
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d013      	beq.n	80011f2 <__aeabi_i2f+0x2e>
 80011ca:	17c3      	asrs	r3, r0, #31
 80011cc:	18c5      	adds	r5, r0, r3
 80011ce:	405d      	eors	r5, r3
 80011d0:	0fc4      	lsrs	r4, r0, #31
 80011d2:	0028      	movs	r0, r5
 80011d4:	f001 ffa6 	bl	8003124 <__clzsi2>
 80011d8:	239e      	movs	r3, #158	; 0x9e
 80011da:	0001      	movs	r1, r0
 80011dc:	1a1b      	subs	r3, r3, r0
 80011de:	2b96      	cmp	r3, #150	; 0x96
 80011e0:	dc0f      	bgt.n	8001202 <__aeabi_i2f+0x3e>
 80011e2:	2808      	cmp	r0, #8
 80011e4:	d031      	beq.n	800124a <__aeabi_i2f+0x86>
 80011e6:	3908      	subs	r1, #8
 80011e8:	408d      	lsls	r5, r1
 80011ea:	026d      	lsls	r5, r5, #9
 80011ec:	0a6d      	lsrs	r5, r5, #9
 80011ee:	b2d8      	uxtb	r0, r3
 80011f0:	e002      	b.n	80011f8 <__aeabi_i2f+0x34>
 80011f2:	2400      	movs	r4, #0
 80011f4:	2000      	movs	r0, #0
 80011f6:	2500      	movs	r5, #0
 80011f8:	05c0      	lsls	r0, r0, #23
 80011fa:	4328      	orrs	r0, r5
 80011fc:	07e4      	lsls	r4, r4, #31
 80011fe:	4320      	orrs	r0, r4
 8001200:	bd70      	pop	{r4, r5, r6, pc}
 8001202:	2b99      	cmp	r3, #153	; 0x99
 8001204:	dd0c      	ble.n	8001220 <__aeabi_i2f+0x5c>
 8001206:	2205      	movs	r2, #5
 8001208:	1a12      	subs	r2, r2, r0
 800120a:	0028      	movs	r0, r5
 800120c:	40d0      	lsrs	r0, r2
 800120e:	0002      	movs	r2, r0
 8001210:	0008      	movs	r0, r1
 8001212:	301b      	adds	r0, #27
 8001214:	4085      	lsls	r5, r0
 8001216:	0028      	movs	r0, r5
 8001218:	1e45      	subs	r5, r0, #1
 800121a:	41a8      	sbcs	r0, r5
 800121c:	4302      	orrs	r2, r0
 800121e:	0015      	movs	r5, r2
 8001220:	2905      	cmp	r1, #5
 8001222:	dc16      	bgt.n	8001252 <__aeabi_i2f+0x8e>
 8001224:	002a      	movs	r2, r5
 8001226:	480f      	ldr	r0, [pc, #60]	; (8001264 <__aeabi_i2f+0xa0>)
 8001228:	4002      	ands	r2, r0
 800122a:	076e      	lsls	r6, r5, #29
 800122c:	d009      	beq.n	8001242 <__aeabi_i2f+0x7e>
 800122e:	260f      	movs	r6, #15
 8001230:	4035      	ands	r5, r6
 8001232:	2d04      	cmp	r5, #4
 8001234:	d005      	beq.n	8001242 <__aeabi_i2f+0x7e>
 8001236:	3204      	adds	r2, #4
 8001238:	0155      	lsls	r5, r2, #5
 800123a:	d502      	bpl.n	8001242 <__aeabi_i2f+0x7e>
 800123c:	239f      	movs	r3, #159	; 0x9f
 800123e:	4002      	ands	r2, r0
 8001240:	1a5b      	subs	r3, r3, r1
 8001242:	0192      	lsls	r2, r2, #6
 8001244:	0a55      	lsrs	r5, r2, #9
 8001246:	b2d8      	uxtb	r0, r3
 8001248:	e7d6      	b.n	80011f8 <__aeabi_i2f+0x34>
 800124a:	026d      	lsls	r5, r5, #9
 800124c:	2096      	movs	r0, #150	; 0x96
 800124e:	0a6d      	lsrs	r5, r5, #9
 8001250:	e7d2      	b.n	80011f8 <__aeabi_i2f+0x34>
 8001252:	1f4a      	subs	r2, r1, #5
 8001254:	4095      	lsls	r5, r2
 8001256:	002a      	movs	r2, r5
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <__aeabi_i2f+0xa0>)
 800125a:	4002      	ands	r2, r0
 800125c:	076e      	lsls	r6, r5, #29
 800125e:	d0f0      	beq.n	8001242 <__aeabi_i2f+0x7e>
 8001260:	e7e5      	b.n	800122e <__aeabi_i2f+0x6a>
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	fbffffff 	.word	0xfbffffff

08001268 <__aeabi_ui2f>:
 8001268:	b570      	push	{r4, r5, r6, lr}
 800126a:	1e04      	subs	r4, r0, #0
 800126c:	d00e      	beq.n	800128c <__aeabi_ui2f+0x24>
 800126e:	f001 ff59 	bl	8003124 <__clzsi2>
 8001272:	239e      	movs	r3, #158	; 0x9e
 8001274:	0001      	movs	r1, r0
 8001276:	1a1b      	subs	r3, r3, r0
 8001278:	2b96      	cmp	r3, #150	; 0x96
 800127a:	dc0c      	bgt.n	8001296 <__aeabi_ui2f+0x2e>
 800127c:	2808      	cmp	r0, #8
 800127e:	d02c      	beq.n	80012da <__aeabi_ui2f+0x72>
 8001280:	3908      	subs	r1, #8
 8001282:	408c      	lsls	r4, r1
 8001284:	0264      	lsls	r4, r4, #9
 8001286:	0a64      	lsrs	r4, r4, #9
 8001288:	b2d8      	uxtb	r0, r3
 800128a:	e001      	b.n	8001290 <__aeabi_ui2f+0x28>
 800128c:	2000      	movs	r0, #0
 800128e:	2400      	movs	r4, #0
 8001290:	05c0      	lsls	r0, r0, #23
 8001292:	4320      	orrs	r0, r4
 8001294:	bd70      	pop	{r4, r5, r6, pc}
 8001296:	2b99      	cmp	r3, #153	; 0x99
 8001298:	dd0a      	ble.n	80012b0 <__aeabi_ui2f+0x48>
 800129a:	0002      	movs	r2, r0
 800129c:	0020      	movs	r0, r4
 800129e:	321b      	adds	r2, #27
 80012a0:	4090      	lsls	r0, r2
 80012a2:	0002      	movs	r2, r0
 80012a4:	1e50      	subs	r0, r2, #1
 80012a6:	4182      	sbcs	r2, r0
 80012a8:	2005      	movs	r0, #5
 80012aa:	1a40      	subs	r0, r0, r1
 80012ac:	40c4      	lsrs	r4, r0
 80012ae:	4314      	orrs	r4, r2
 80012b0:	2905      	cmp	r1, #5
 80012b2:	dc16      	bgt.n	80012e2 <__aeabi_ui2f+0x7a>
 80012b4:	0022      	movs	r2, r4
 80012b6:	480f      	ldr	r0, [pc, #60]	; (80012f4 <__aeabi_ui2f+0x8c>)
 80012b8:	4002      	ands	r2, r0
 80012ba:	0765      	lsls	r5, r4, #29
 80012bc:	d009      	beq.n	80012d2 <__aeabi_ui2f+0x6a>
 80012be:	250f      	movs	r5, #15
 80012c0:	402c      	ands	r4, r5
 80012c2:	2c04      	cmp	r4, #4
 80012c4:	d005      	beq.n	80012d2 <__aeabi_ui2f+0x6a>
 80012c6:	3204      	adds	r2, #4
 80012c8:	0154      	lsls	r4, r2, #5
 80012ca:	d502      	bpl.n	80012d2 <__aeabi_ui2f+0x6a>
 80012cc:	239f      	movs	r3, #159	; 0x9f
 80012ce:	4002      	ands	r2, r0
 80012d0:	1a5b      	subs	r3, r3, r1
 80012d2:	0192      	lsls	r2, r2, #6
 80012d4:	0a54      	lsrs	r4, r2, #9
 80012d6:	b2d8      	uxtb	r0, r3
 80012d8:	e7da      	b.n	8001290 <__aeabi_ui2f+0x28>
 80012da:	0264      	lsls	r4, r4, #9
 80012dc:	2096      	movs	r0, #150	; 0x96
 80012de:	0a64      	lsrs	r4, r4, #9
 80012e0:	e7d6      	b.n	8001290 <__aeabi_ui2f+0x28>
 80012e2:	1f4a      	subs	r2, r1, #5
 80012e4:	4094      	lsls	r4, r2
 80012e6:	0022      	movs	r2, r4
 80012e8:	4802      	ldr	r0, [pc, #8]	; (80012f4 <__aeabi_ui2f+0x8c>)
 80012ea:	4002      	ands	r2, r0
 80012ec:	0765      	lsls	r5, r4, #29
 80012ee:	d0f0      	beq.n	80012d2 <__aeabi_ui2f+0x6a>
 80012f0:	e7e5      	b.n	80012be <__aeabi_ui2f+0x56>
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	fbffffff 	.word	0xfbffffff

080012f8 <__aeabi_dadd>:
 80012f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012fa:	464f      	mov	r7, r9
 80012fc:	4646      	mov	r6, r8
 80012fe:	46d6      	mov	lr, sl
 8001300:	0004      	movs	r4, r0
 8001302:	b5c0      	push	{r6, r7, lr}
 8001304:	001f      	movs	r7, r3
 8001306:	030b      	lsls	r3, r1, #12
 8001308:	0010      	movs	r0, r2
 800130a:	004e      	lsls	r6, r1, #1
 800130c:	0a5b      	lsrs	r3, r3, #9
 800130e:	0fcd      	lsrs	r5, r1, #31
 8001310:	0f61      	lsrs	r1, r4, #29
 8001312:	007a      	lsls	r2, r7, #1
 8001314:	4319      	orrs	r1, r3
 8001316:	00e3      	lsls	r3, r4, #3
 8001318:	033c      	lsls	r4, r7, #12
 800131a:	0fff      	lsrs	r7, r7, #31
 800131c:	46bc      	mov	ip, r7
 800131e:	0a64      	lsrs	r4, r4, #9
 8001320:	0f47      	lsrs	r7, r0, #29
 8001322:	4327      	orrs	r7, r4
 8001324:	0d76      	lsrs	r6, r6, #21
 8001326:	0d52      	lsrs	r2, r2, #21
 8001328:	00c0      	lsls	r0, r0, #3
 800132a:	46b9      	mov	r9, r7
 800132c:	4680      	mov	r8, r0
 800132e:	1ab7      	subs	r7, r6, r2
 8001330:	4565      	cmp	r5, ip
 8001332:	d100      	bne.n	8001336 <__aeabi_dadd+0x3e>
 8001334:	e09b      	b.n	800146e <__aeabi_dadd+0x176>
 8001336:	2f00      	cmp	r7, #0
 8001338:	dc00      	bgt.n	800133c <__aeabi_dadd+0x44>
 800133a:	e084      	b.n	8001446 <__aeabi_dadd+0x14e>
 800133c:	2a00      	cmp	r2, #0
 800133e:	d100      	bne.n	8001342 <__aeabi_dadd+0x4a>
 8001340:	e0be      	b.n	80014c0 <__aeabi_dadd+0x1c8>
 8001342:	4ac8      	ldr	r2, [pc, #800]	; (8001664 <__aeabi_dadd+0x36c>)
 8001344:	4296      	cmp	r6, r2
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x52>
 8001348:	e124      	b.n	8001594 <__aeabi_dadd+0x29c>
 800134a:	2280      	movs	r2, #128	; 0x80
 800134c:	464c      	mov	r4, r9
 800134e:	0412      	lsls	r2, r2, #16
 8001350:	4314      	orrs	r4, r2
 8001352:	46a1      	mov	r9, r4
 8001354:	2f38      	cmp	r7, #56	; 0x38
 8001356:	dd00      	ble.n	800135a <__aeabi_dadd+0x62>
 8001358:	e167      	b.n	800162a <__aeabi_dadd+0x332>
 800135a:	2f1f      	cmp	r7, #31
 800135c:	dd00      	ble.n	8001360 <__aeabi_dadd+0x68>
 800135e:	e1d6      	b.n	800170e <__aeabi_dadd+0x416>
 8001360:	2220      	movs	r2, #32
 8001362:	464c      	mov	r4, r9
 8001364:	1bd2      	subs	r2, r2, r7
 8001366:	4094      	lsls	r4, r2
 8001368:	46a2      	mov	sl, r4
 800136a:	4644      	mov	r4, r8
 800136c:	40fc      	lsrs	r4, r7
 800136e:	0020      	movs	r0, r4
 8001370:	4654      	mov	r4, sl
 8001372:	4304      	orrs	r4, r0
 8001374:	4640      	mov	r0, r8
 8001376:	4090      	lsls	r0, r2
 8001378:	1e42      	subs	r2, r0, #1
 800137a:	4190      	sbcs	r0, r2
 800137c:	464a      	mov	r2, r9
 800137e:	40fa      	lsrs	r2, r7
 8001380:	4304      	orrs	r4, r0
 8001382:	1a89      	subs	r1, r1, r2
 8001384:	1b1c      	subs	r4, r3, r4
 8001386:	42a3      	cmp	r3, r4
 8001388:	4192      	sbcs	r2, r2
 800138a:	4252      	negs	r2, r2
 800138c:	1a8b      	subs	r3, r1, r2
 800138e:	469a      	mov	sl, r3
 8001390:	4653      	mov	r3, sl
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	d400      	bmi.n	8001398 <__aeabi_dadd+0xa0>
 8001396:	e0d4      	b.n	8001542 <__aeabi_dadd+0x24a>
 8001398:	4653      	mov	r3, sl
 800139a:	025a      	lsls	r2, r3, #9
 800139c:	0a53      	lsrs	r3, r2, #9
 800139e:	469a      	mov	sl, r3
 80013a0:	4653      	mov	r3, sl
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d100      	bne.n	80013a8 <__aeabi_dadd+0xb0>
 80013a6:	e104      	b.n	80015b2 <__aeabi_dadd+0x2ba>
 80013a8:	4650      	mov	r0, sl
 80013aa:	f001 febb 	bl	8003124 <__clzsi2>
 80013ae:	0003      	movs	r3, r0
 80013b0:	3b08      	subs	r3, #8
 80013b2:	2220      	movs	r2, #32
 80013b4:	0020      	movs	r0, r4
 80013b6:	1ad2      	subs	r2, r2, r3
 80013b8:	4651      	mov	r1, sl
 80013ba:	40d0      	lsrs	r0, r2
 80013bc:	4099      	lsls	r1, r3
 80013be:	0002      	movs	r2, r0
 80013c0:	409c      	lsls	r4, r3
 80013c2:	430a      	orrs	r2, r1
 80013c4:	42b3      	cmp	r3, r6
 80013c6:	da00      	bge.n	80013ca <__aeabi_dadd+0xd2>
 80013c8:	e102      	b.n	80015d0 <__aeabi_dadd+0x2d8>
 80013ca:	1b9b      	subs	r3, r3, r6
 80013cc:	1c59      	adds	r1, r3, #1
 80013ce:	291f      	cmp	r1, #31
 80013d0:	dd00      	ble.n	80013d4 <__aeabi_dadd+0xdc>
 80013d2:	e0a7      	b.n	8001524 <__aeabi_dadd+0x22c>
 80013d4:	2320      	movs	r3, #32
 80013d6:	0010      	movs	r0, r2
 80013d8:	0026      	movs	r6, r4
 80013da:	1a5b      	subs	r3, r3, r1
 80013dc:	409c      	lsls	r4, r3
 80013de:	4098      	lsls	r0, r3
 80013e0:	40ce      	lsrs	r6, r1
 80013e2:	40ca      	lsrs	r2, r1
 80013e4:	1e63      	subs	r3, r4, #1
 80013e6:	419c      	sbcs	r4, r3
 80013e8:	4330      	orrs	r0, r6
 80013ea:	4692      	mov	sl, r2
 80013ec:	2600      	movs	r6, #0
 80013ee:	4304      	orrs	r4, r0
 80013f0:	0763      	lsls	r3, r4, #29
 80013f2:	d009      	beq.n	8001408 <__aeabi_dadd+0x110>
 80013f4:	230f      	movs	r3, #15
 80013f6:	4023      	ands	r3, r4
 80013f8:	2b04      	cmp	r3, #4
 80013fa:	d005      	beq.n	8001408 <__aeabi_dadd+0x110>
 80013fc:	1d23      	adds	r3, r4, #4
 80013fe:	42a3      	cmp	r3, r4
 8001400:	41a4      	sbcs	r4, r4
 8001402:	4264      	negs	r4, r4
 8001404:	44a2      	add	sl, r4
 8001406:	001c      	movs	r4, r3
 8001408:	4653      	mov	r3, sl
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	d400      	bmi.n	8001410 <__aeabi_dadd+0x118>
 800140e:	e09b      	b.n	8001548 <__aeabi_dadd+0x250>
 8001410:	4b94      	ldr	r3, [pc, #592]	; (8001664 <__aeabi_dadd+0x36c>)
 8001412:	3601      	adds	r6, #1
 8001414:	429e      	cmp	r6, r3
 8001416:	d100      	bne.n	800141a <__aeabi_dadd+0x122>
 8001418:	e0b8      	b.n	800158c <__aeabi_dadd+0x294>
 800141a:	4653      	mov	r3, sl
 800141c:	4992      	ldr	r1, [pc, #584]	; (8001668 <__aeabi_dadd+0x370>)
 800141e:	08e4      	lsrs	r4, r4, #3
 8001420:	400b      	ands	r3, r1
 8001422:	0019      	movs	r1, r3
 8001424:	075b      	lsls	r3, r3, #29
 8001426:	4323      	orrs	r3, r4
 8001428:	0572      	lsls	r2, r6, #21
 800142a:	024c      	lsls	r4, r1, #9
 800142c:	0b24      	lsrs	r4, r4, #12
 800142e:	0d52      	lsrs	r2, r2, #21
 8001430:	0512      	lsls	r2, r2, #20
 8001432:	07ed      	lsls	r5, r5, #31
 8001434:	4322      	orrs	r2, r4
 8001436:	432a      	orrs	r2, r5
 8001438:	0018      	movs	r0, r3
 800143a:	0011      	movs	r1, r2
 800143c:	bce0      	pop	{r5, r6, r7}
 800143e:	46ba      	mov	sl, r7
 8001440:	46b1      	mov	r9, r6
 8001442:	46a8      	mov	r8, r5
 8001444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001446:	2f00      	cmp	r7, #0
 8001448:	d048      	beq.n	80014dc <__aeabi_dadd+0x1e4>
 800144a:	1b97      	subs	r7, r2, r6
 800144c:	2e00      	cmp	r6, #0
 800144e:	d000      	beq.n	8001452 <__aeabi_dadd+0x15a>
 8001450:	e10e      	b.n	8001670 <__aeabi_dadd+0x378>
 8001452:	000c      	movs	r4, r1
 8001454:	431c      	orrs	r4, r3
 8001456:	d100      	bne.n	800145a <__aeabi_dadd+0x162>
 8001458:	e1b7      	b.n	80017ca <__aeabi_dadd+0x4d2>
 800145a:	1e7c      	subs	r4, r7, #1
 800145c:	2f01      	cmp	r7, #1
 800145e:	d100      	bne.n	8001462 <__aeabi_dadd+0x16a>
 8001460:	e226      	b.n	80018b0 <__aeabi_dadd+0x5b8>
 8001462:	4d80      	ldr	r5, [pc, #512]	; (8001664 <__aeabi_dadd+0x36c>)
 8001464:	42af      	cmp	r7, r5
 8001466:	d100      	bne.n	800146a <__aeabi_dadd+0x172>
 8001468:	e1d5      	b.n	8001816 <__aeabi_dadd+0x51e>
 800146a:	0027      	movs	r7, r4
 800146c:	e107      	b.n	800167e <__aeabi_dadd+0x386>
 800146e:	2f00      	cmp	r7, #0
 8001470:	dc00      	bgt.n	8001474 <__aeabi_dadd+0x17c>
 8001472:	e0b2      	b.n	80015da <__aeabi_dadd+0x2e2>
 8001474:	2a00      	cmp	r2, #0
 8001476:	d047      	beq.n	8001508 <__aeabi_dadd+0x210>
 8001478:	4a7a      	ldr	r2, [pc, #488]	; (8001664 <__aeabi_dadd+0x36c>)
 800147a:	4296      	cmp	r6, r2
 800147c:	d100      	bne.n	8001480 <__aeabi_dadd+0x188>
 800147e:	e089      	b.n	8001594 <__aeabi_dadd+0x29c>
 8001480:	2280      	movs	r2, #128	; 0x80
 8001482:	464c      	mov	r4, r9
 8001484:	0412      	lsls	r2, r2, #16
 8001486:	4314      	orrs	r4, r2
 8001488:	46a1      	mov	r9, r4
 800148a:	2f38      	cmp	r7, #56	; 0x38
 800148c:	dc6b      	bgt.n	8001566 <__aeabi_dadd+0x26e>
 800148e:	2f1f      	cmp	r7, #31
 8001490:	dc00      	bgt.n	8001494 <__aeabi_dadd+0x19c>
 8001492:	e16e      	b.n	8001772 <__aeabi_dadd+0x47a>
 8001494:	003a      	movs	r2, r7
 8001496:	4648      	mov	r0, r9
 8001498:	3a20      	subs	r2, #32
 800149a:	40d0      	lsrs	r0, r2
 800149c:	4684      	mov	ip, r0
 800149e:	2f20      	cmp	r7, #32
 80014a0:	d007      	beq.n	80014b2 <__aeabi_dadd+0x1ba>
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	4648      	mov	r0, r9
 80014a6:	1bd2      	subs	r2, r2, r7
 80014a8:	4090      	lsls	r0, r2
 80014aa:	0002      	movs	r2, r0
 80014ac:	4640      	mov	r0, r8
 80014ae:	4310      	orrs	r0, r2
 80014b0:	4680      	mov	r8, r0
 80014b2:	4640      	mov	r0, r8
 80014b4:	1e42      	subs	r2, r0, #1
 80014b6:	4190      	sbcs	r0, r2
 80014b8:	4662      	mov	r2, ip
 80014ba:	0004      	movs	r4, r0
 80014bc:	4314      	orrs	r4, r2
 80014be:	e057      	b.n	8001570 <__aeabi_dadd+0x278>
 80014c0:	464a      	mov	r2, r9
 80014c2:	4302      	orrs	r2, r0
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x1d0>
 80014c6:	e103      	b.n	80016d0 <__aeabi_dadd+0x3d8>
 80014c8:	1e7a      	subs	r2, r7, #1
 80014ca:	2f01      	cmp	r7, #1
 80014cc:	d100      	bne.n	80014d0 <__aeabi_dadd+0x1d8>
 80014ce:	e193      	b.n	80017f8 <__aeabi_dadd+0x500>
 80014d0:	4c64      	ldr	r4, [pc, #400]	; (8001664 <__aeabi_dadd+0x36c>)
 80014d2:	42a7      	cmp	r7, r4
 80014d4:	d100      	bne.n	80014d8 <__aeabi_dadd+0x1e0>
 80014d6:	e18a      	b.n	80017ee <__aeabi_dadd+0x4f6>
 80014d8:	0017      	movs	r7, r2
 80014da:	e73b      	b.n	8001354 <__aeabi_dadd+0x5c>
 80014dc:	4c63      	ldr	r4, [pc, #396]	; (800166c <__aeabi_dadd+0x374>)
 80014de:	1c72      	adds	r2, r6, #1
 80014e0:	4222      	tst	r2, r4
 80014e2:	d000      	beq.n	80014e6 <__aeabi_dadd+0x1ee>
 80014e4:	e0e0      	b.n	80016a8 <__aeabi_dadd+0x3b0>
 80014e6:	000a      	movs	r2, r1
 80014e8:	431a      	orrs	r2, r3
 80014ea:	2e00      	cmp	r6, #0
 80014ec:	d000      	beq.n	80014f0 <__aeabi_dadd+0x1f8>
 80014ee:	e174      	b.n	80017da <__aeabi_dadd+0x4e2>
 80014f0:	2a00      	cmp	r2, #0
 80014f2:	d100      	bne.n	80014f6 <__aeabi_dadd+0x1fe>
 80014f4:	e1d0      	b.n	8001898 <__aeabi_dadd+0x5a0>
 80014f6:	464a      	mov	r2, r9
 80014f8:	4302      	orrs	r2, r0
 80014fa:	d000      	beq.n	80014fe <__aeabi_dadd+0x206>
 80014fc:	e1e3      	b.n	80018c6 <__aeabi_dadd+0x5ce>
 80014fe:	074a      	lsls	r2, r1, #29
 8001500:	08db      	lsrs	r3, r3, #3
 8001502:	4313      	orrs	r3, r2
 8001504:	08c9      	lsrs	r1, r1, #3
 8001506:	e029      	b.n	800155c <__aeabi_dadd+0x264>
 8001508:	464a      	mov	r2, r9
 800150a:	4302      	orrs	r2, r0
 800150c:	d100      	bne.n	8001510 <__aeabi_dadd+0x218>
 800150e:	e17d      	b.n	800180c <__aeabi_dadd+0x514>
 8001510:	1e7a      	subs	r2, r7, #1
 8001512:	2f01      	cmp	r7, #1
 8001514:	d100      	bne.n	8001518 <__aeabi_dadd+0x220>
 8001516:	e0e0      	b.n	80016da <__aeabi_dadd+0x3e2>
 8001518:	4c52      	ldr	r4, [pc, #328]	; (8001664 <__aeabi_dadd+0x36c>)
 800151a:	42a7      	cmp	r7, r4
 800151c:	d100      	bne.n	8001520 <__aeabi_dadd+0x228>
 800151e:	e166      	b.n	80017ee <__aeabi_dadd+0x4f6>
 8001520:	0017      	movs	r7, r2
 8001522:	e7b2      	b.n	800148a <__aeabi_dadd+0x192>
 8001524:	0010      	movs	r0, r2
 8001526:	3b1f      	subs	r3, #31
 8001528:	40d8      	lsrs	r0, r3
 800152a:	2920      	cmp	r1, #32
 800152c:	d003      	beq.n	8001536 <__aeabi_dadd+0x23e>
 800152e:	2340      	movs	r3, #64	; 0x40
 8001530:	1a5b      	subs	r3, r3, r1
 8001532:	409a      	lsls	r2, r3
 8001534:	4314      	orrs	r4, r2
 8001536:	1e63      	subs	r3, r4, #1
 8001538:	419c      	sbcs	r4, r3
 800153a:	2300      	movs	r3, #0
 800153c:	2600      	movs	r6, #0
 800153e:	469a      	mov	sl, r3
 8001540:	4304      	orrs	r4, r0
 8001542:	0763      	lsls	r3, r4, #29
 8001544:	d000      	beq.n	8001548 <__aeabi_dadd+0x250>
 8001546:	e755      	b.n	80013f4 <__aeabi_dadd+0xfc>
 8001548:	4652      	mov	r2, sl
 800154a:	08e3      	lsrs	r3, r4, #3
 800154c:	0752      	lsls	r2, r2, #29
 800154e:	4313      	orrs	r3, r2
 8001550:	4652      	mov	r2, sl
 8001552:	0037      	movs	r7, r6
 8001554:	08d1      	lsrs	r1, r2, #3
 8001556:	4a43      	ldr	r2, [pc, #268]	; (8001664 <__aeabi_dadd+0x36c>)
 8001558:	4297      	cmp	r7, r2
 800155a:	d01f      	beq.n	800159c <__aeabi_dadd+0x2a4>
 800155c:	0309      	lsls	r1, r1, #12
 800155e:	057a      	lsls	r2, r7, #21
 8001560:	0b0c      	lsrs	r4, r1, #12
 8001562:	0d52      	lsrs	r2, r2, #21
 8001564:	e764      	b.n	8001430 <__aeabi_dadd+0x138>
 8001566:	4642      	mov	r2, r8
 8001568:	464c      	mov	r4, r9
 800156a:	4314      	orrs	r4, r2
 800156c:	1e62      	subs	r2, r4, #1
 800156e:	4194      	sbcs	r4, r2
 8001570:	18e4      	adds	r4, r4, r3
 8001572:	429c      	cmp	r4, r3
 8001574:	4192      	sbcs	r2, r2
 8001576:	4252      	negs	r2, r2
 8001578:	4692      	mov	sl, r2
 800157a:	448a      	add	sl, r1
 800157c:	4653      	mov	r3, sl
 800157e:	021b      	lsls	r3, r3, #8
 8001580:	d5df      	bpl.n	8001542 <__aeabi_dadd+0x24a>
 8001582:	4b38      	ldr	r3, [pc, #224]	; (8001664 <__aeabi_dadd+0x36c>)
 8001584:	3601      	adds	r6, #1
 8001586:	429e      	cmp	r6, r3
 8001588:	d000      	beq.n	800158c <__aeabi_dadd+0x294>
 800158a:	e0b3      	b.n	80016f4 <__aeabi_dadd+0x3fc>
 800158c:	0032      	movs	r2, r6
 800158e:	2400      	movs	r4, #0
 8001590:	2300      	movs	r3, #0
 8001592:	e74d      	b.n	8001430 <__aeabi_dadd+0x138>
 8001594:	074a      	lsls	r2, r1, #29
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	4313      	orrs	r3, r2
 800159a:	08c9      	lsrs	r1, r1, #3
 800159c:	001a      	movs	r2, r3
 800159e:	430a      	orrs	r2, r1
 80015a0:	d100      	bne.n	80015a4 <__aeabi_dadd+0x2ac>
 80015a2:	e200      	b.n	80019a6 <__aeabi_dadd+0x6ae>
 80015a4:	2480      	movs	r4, #128	; 0x80
 80015a6:	0324      	lsls	r4, r4, #12
 80015a8:	430c      	orrs	r4, r1
 80015aa:	0324      	lsls	r4, r4, #12
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <__aeabi_dadd+0x36c>)
 80015ae:	0b24      	lsrs	r4, r4, #12
 80015b0:	e73e      	b.n	8001430 <__aeabi_dadd+0x138>
 80015b2:	0020      	movs	r0, r4
 80015b4:	f001 fdb6 	bl	8003124 <__clzsi2>
 80015b8:	0003      	movs	r3, r0
 80015ba:	3318      	adds	r3, #24
 80015bc:	2b1f      	cmp	r3, #31
 80015be:	dc00      	bgt.n	80015c2 <__aeabi_dadd+0x2ca>
 80015c0:	e6f7      	b.n	80013b2 <__aeabi_dadd+0xba>
 80015c2:	0022      	movs	r2, r4
 80015c4:	3808      	subs	r0, #8
 80015c6:	4082      	lsls	r2, r0
 80015c8:	2400      	movs	r4, #0
 80015ca:	42b3      	cmp	r3, r6
 80015cc:	db00      	blt.n	80015d0 <__aeabi_dadd+0x2d8>
 80015ce:	e6fc      	b.n	80013ca <__aeabi_dadd+0xd2>
 80015d0:	1af6      	subs	r6, r6, r3
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <__aeabi_dadd+0x370>)
 80015d4:	401a      	ands	r2, r3
 80015d6:	4692      	mov	sl, r2
 80015d8:	e70a      	b.n	80013f0 <__aeabi_dadd+0xf8>
 80015da:	2f00      	cmp	r7, #0
 80015dc:	d02b      	beq.n	8001636 <__aeabi_dadd+0x33e>
 80015de:	1b97      	subs	r7, r2, r6
 80015e0:	2e00      	cmp	r6, #0
 80015e2:	d100      	bne.n	80015e6 <__aeabi_dadd+0x2ee>
 80015e4:	e0b8      	b.n	8001758 <__aeabi_dadd+0x460>
 80015e6:	4c1f      	ldr	r4, [pc, #124]	; (8001664 <__aeabi_dadd+0x36c>)
 80015e8:	42a2      	cmp	r2, r4
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x2f6>
 80015ec:	e11c      	b.n	8001828 <__aeabi_dadd+0x530>
 80015ee:	2480      	movs	r4, #128	; 0x80
 80015f0:	0424      	lsls	r4, r4, #16
 80015f2:	4321      	orrs	r1, r4
 80015f4:	2f38      	cmp	r7, #56	; 0x38
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dadd+0x302>
 80015f8:	e11e      	b.n	8001838 <__aeabi_dadd+0x540>
 80015fa:	2f1f      	cmp	r7, #31
 80015fc:	dd00      	ble.n	8001600 <__aeabi_dadd+0x308>
 80015fe:	e19e      	b.n	800193e <__aeabi_dadd+0x646>
 8001600:	2620      	movs	r6, #32
 8001602:	000c      	movs	r4, r1
 8001604:	1bf6      	subs	r6, r6, r7
 8001606:	0018      	movs	r0, r3
 8001608:	40b3      	lsls	r3, r6
 800160a:	40b4      	lsls	r4, r6
 800160c:	40f8      	lsrs	r0, r7
 800160e:	1e5e      	subs	r6, r3, #1
 8001610:	41b3      	sbcs	r3, r6
 8001612:	40f9      	lsrs	r1, r7
 8001614:	4304      	orrs	r4, r0
 8001616:	431c      	orrs	r4, r3
 8001618:	4489      	add	r9, r1
 800161a:	4444      	add	r4, r8
 800161c:	4544      	cmp	r4, r8
 800161e:	419b      	sbcs	r3, r3
 8001620:	425b      	negs	r3, r3
 8001622:	444b      	add	r3, r9
 8001624:	469a      	mov	sl, r3
 8001626:	0016      	movs	r6, r2
 8001628:	e7a8      	b.n	800157c <__aeabi_dadd+0x284>
 800162a:	4642      	mov	r2, r8
 800162c:	464c      	mov	r4, r9
 800162e:	4314      	orrs	r4, r2
 8001630:	1e62      	subs	r2, r4, #1
 8001632:	4194      	sbcs	r4, r2
 8001634:	e6a6      	b.n	8001384 <__aeabi_dadd+0x8c>
 8001636:	4c0d      	ldr	r4, [pc, #52]	; (800166c <__aeabi_dadd+0x374>)
 8001638:	1c72      	adds	r2, r6, #1
 800163a:	4222      	tst	r2, r4
 800163c:	d000      	beq.n	8001640 <__aeabi_dadd+0x348>
 800163e:	e0a8      	b.n	8001792 <__aeabi_dadd+0x49a>
 8001640:	000a      	movs	r2, r1
 8001642:	431a      	orrs	r2, r3
 8001644:	2e00      	cmp	r6, #0
 8001646:	d000      	beq.n	800164a <__aeabi_dadd+0x352>
 8001648:	e10a      	b.n	8001860 <__aeabi_dadd+0x568>
 800164a:	2a00      	cmp	r2, #0
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x358>
 800164e:	e15e      	b.n	800190e <__aeabi_dadd+0x616>
 8001650:	464a      	mov	r2, r9
 8001652:	4302      	orrs	r2, r0
 8001654:	d000      	beq.n	8001658 <__aeabi_dadd+0x360>
 8001656:	e161      	b.n	800191c <__aeabi_dadd+0x624>
 8001658:	074a      	lsls	r2, r1, #29
 800165a:	08db      	lsrs	r3, r3, #3
 800165c:	4313      	orrs	r3, r2
 800165e:	08c9      	lsrs	r1, r1, #3
 8001660:	e77c      	b.n	800155c <__aeabi_dadd+0x264>
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	000007ff 	.word	0x000007ff
 8001668:	ff7fffff 	.word	0xff7fffff
 800166c:	000007fe 	.word	0x000007fe
 8001670:	4ccf      	ldr	r4, [pc, #828]	; (80019b0 <__aeabi_dadd+0x6b8>)
 8001672:	42a2      	cmp	r2, r4
 8001674:	d100      	bne.n	8001678 <__aeabi_dadd+0x380>
 8001676:	e0ce      	b.n	8001816 <__aeabi_dadd+0x51e>
 8001678:	2480      	movs	r4, #128	; 0x80
 800167a:	0424      	lsls	r4, r4, #16
 800167c:	4321      	orrs	r1, r4
 800167e:	2f38      	cmp	r7, #56	; 0x38
 8001680:	dc5b      	bgt.n	800173a <__aeabi_dadd+0x442>
 8001682:	2f1f      	cmp	r7, #31
 8001684:	dd00      	ble.n	8001688 <__aeabi_dadd+0x390>
 8001686:	e0dc      	b.n	8001842 <__aeabi_dadd+0x54a>
 8001688:	2520      	movs	r5, #32
 800168a:	000c      	movs	r4, r1
 800168c:	1bed      	subs	r5, r5, r7
 800168e:	001e      	movs	r6, r3
 8001690:	40ab      	lsls	r3, r5
 8001692:	40ac      	lsls	r4, r5
 8001694:	40fe      	lsrs	r6, r7
 8001696:	1e5d      	subs	r5, r3, #1
 8001698:	41ab      	sbcs	r3, r5
 800169a:	4334      	orrs	r4, r6
 800169c:	40f9      	lsrs	r1, r7
 800169e:	431c      	orrs	r4, r3
 80016a0:	464b      	mov	r3, r9
 80016a2:	1a5b      	subs	r3, r3, r1
 80016a4:	4699      	mov	r9, r3
 80016a6:	e04c      	b.n	8001742 <__aeabi_dadd+0x44a>
 80016a8:	464a      	mov	r2, r9
 80016aa:	1a1c      	subs	r4, r3, r0
 80016ac:	1a88      	subs	r0, r1, r2
 80016ae:	42a3      	cmp	r3, r4
 80016b0:	4192      	sbcs	r2, r2
 80016b2:	4252      	negs	r2, r2
 80016b4:	4692      	mov	sl, r2
 80016b6:	0002      	movs	r2, r0
 80016b8:	4650      	mov	r0, sl
 80016ba:	1a12      	subs	r2, r2, r0
 80016bc:	4692      	mov	sl, r2
 80016be:	0212      	lsls	r2, r2, #8
 80016c0:	d478      	bmi.n	80017b4 <__aeabi_dadd+0x4bc>
 80016c2:	4653      	mov	r3, sl
 80016c4:	4323      	orrs	r3, r4
 80016c6:	d000      	beq.n	80016ca <__aeabi_dadd+0x3d2>
 80016c8:	e66a      	b.n	80013a0 <__aeabi_dadd+0xa8>
 80016ca:	2100      	movs	r1, #0
 80016cc:	2500      	movs	r5, #0
 80016ce:	e745      	b.n	800155c <__aeabi_dadd+0x264>
 80016d0:	074a      	lsls	r2, r1, #29
 80016d2:	08db      	lsrs	r3, r3, #3
 80016d4:	4313      	orrs	r3, r2
 80016d6:	08c9      	lsrs	r1, r1, #3
 80016d8:	e73d      	b.n	8001556 <__aeabi_dadd+0x25e>
 80016da:	181c      	adds	r4, r3, r0
 80016dc:	429c      	cmp	r4, r3
 80016de:	419b      	sbcs	r3, r3
 80016e0:	4449      	add	r1, r9
 80016e2:	468a      	mov	sl, r1
 80016e4:	425b      	negs	r3, r3
 80016e6:	449a      	add	sl, r3
 80016e8:	4653      	mov	r3, sl
 80016ea:	2601      	movs	r6, #1
 80016ec:	021b      	lsls	r3, r3, #8
 80016ee:	d400      	bmi.n	80016f2 <__aeabi_dadd+0x3fa>
 80016f0:	e727      	b.n	8001542 <__aeabi_dadd+0x24a>
 80016f2:	2602      	movs	r6, #2
 80016f4:	4652      	mov	r2, sl
 80016f6:	4baf      	ldr	r3, [pc, #700]	; (80019b4 <__aeabi_dadd+0x6bc>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	401a      	ands	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	4021      	ands	r1, r4
 8001700:	0862      	lsrs	r2, r4, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	07dc      	lsls	r4, r3, #31
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	469a      	mov	sl, r3
 800170a:	4314      	orrs	r4, r2
 800170c:	e670      	b.n	80013f0 <__aeabi_dadd+0xf8>
 800170e:	003a      	movs	r2, r7
 8001710:	464c      	mov	r4, r9
 8001712:	3a20      	subs	r2, #32
 8001714:	40d4      	lsrs	r4, r2
 8001716:	46a4      	mov	ip, r4
 8001718:	2f20      	cmp	r7, #32
 800171a:	d007      	beq.n	800172c <__aeabi_dadd+0x434>
 800171c:	2240      	movs	r2, #64	; 0x40
 800171e:	4648      	mov	r0, r9
 8001720:	1bd2      	subs	r2, r2, r7
 8001722:	4090      	lsls	r0, r2
 8001724:	0002      	movs	r2, r0
 8001726:	4640      	mov	r0, r8
 8001728:	4310      	orrs	r0, r2
 800172a:	4680      	mov	r8, r0
 800172c:	4640      	mov	r0, r8
 800172e:	1e42      	subs	r2, r0, #1
 8001730:	4190      	sbcs	r0, r2
 8001732:	4662      	mov	r2, ip
 8001734:	0004      	movs	r4, r0
 8001736:	4314      	orrs	r4, r2
 8001738:	e624      	b.n	8001384 <__aeabi_dadd+0x8c>
 800173a:	4319      	orrs	r1, r3
 800173c:	000c      	movs	r4, r1
 800173e:	1e63      	subs	r3, r4, #1
 8001740:	419c      	sbcs	r4, r3
 8001742:	4643      	mov	r3, r8
 8001744:	1b1c      	subs	r4, r3, r4
 8001746:	45a0      	cmp	r8, r4
 8001748:	419b      	sbcs	r3, r3
 800174a:	4649      	mov	r1, r9
 800174c:	425b      	negs	r3, r3
 800174e:	1acb      	subs	r3, r1, r3
 8001750:	469a      	mov	sl, r3
 8001752:	4665      	mov	r5, ip
 8001754:	0016      	movs	r6, r2
 8001756:	e61b      	b.n	8001390 <__aeabi_dadd+0x98>
 8001758:	000c      	movs	r4, r1
 800175a:	431c      	orrs	r4, r3
 800175c:	d100      	bne.n	8001760 <__aeabi_dadd+0x468>
 800175e:	e0c7      	b.n	80018f0 <__aeabi_dadd+0x5f8>
 8001760:	1e7c      	subs	r4, r7, #1
 8001762:	2f01      	cmp	r7, #1
 8001764:	d100      	bne.n	8001768 <__aeabi_dadd+0x470>
 8001766:	e0f9      	b.n	800195c <__aeabi_dadd+0x664>
 8001768:	4e91      	ldr	r6, [pc, #580]	; (80019b0 <__aeabi_dadd+0x6b8>)
 800176a:	42b7      	cmp	r7, r6
 800176c:	d05c      	beq.n	8001828 <__aeabi_dadd+0x530>
 800176e:	0027      	movs	r7, r4
 8001770:	e740      	b.n	80015f4 <__aeabi_dadd+0x2fc>
 8001772:	2220      	movs	r2, #32
 8001774:	464c      	mov	r4, r9
 8001776:	4640      	mov	r0, r8
 8001778:	1bd2      	subs	r2, r2, r7
 800177a:	4094      	lsls	r4, r2
 800177c:	40f8      	lsrs	r0, r7
 800177e:	4304      	orrs	r4, r0
 8001780:	4640      	mov	r0, r8
 8001782:	4090      	lsls	r0, r2
 8001784:	1e42      	subs	r2, r0, #1
 8001786:	4190      	sbcs	r0, r2
 8001788:	464a      	mov	r2, r9
 800178a:	40fa      	lsrs	r2, r7
 800178c:	4304      	orrs	r4, r0
 800178e:	1889      	adds	r1, r1, r2
 8001790:	e6ee      	b.n	8001570 <__aeabi_dadd+0x278>
 8001792:	4c87      	ldr	r4, [pc, #540]	; (80019b0 <__aeabi_dadd+0x6b8>)
 8001794:	42a2      	cmp	r2, r4
 8001796:	d100      	bne.n	800179a <__aeabi_dadd+0x4a2>
 8001798:	e6f9      	b.n	800158e <__aeabi_dadd+0x296>
 800179a:	1818      	adds	r0, r3, r0
 800179c:	4298      	cmp	r0, r3
 800179e:	419b      	sbcs	r3, r3
 80017a0:	4449      	add	r1, r9
 80017a2:	425b      	negs	r3, r3
 80017a4:	18cb      	adds	r3, r1, r3
 80017a6:	07dc      	lsls	r4, r3, #31
 80017a8:	0840      	lsrs	r0, r0, #1
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	469a      	mov	sl, r3
 80017ae:	0016      	movs	r6, r2
 80017b0:	4304      	orrs	r4, r0
 80017b2:	e6c6      	b.n	8001542 <__aeabi_dadd+0x24a>
 80017b4:	4642      	mov	r2, r8
 80017b6:	1ad4      	subs	r4, r2, r3
 80017b8:	45a0      	cmp	r8, r4
 80017ba:	4180      	sbcs	r0, r0
 80017bc:	464b      	mov	r3, r9
 80017be:	4240      	negs	r0, r0
 80017c0:	1a59      	subs	r1, r3, r1
 80017c2:	1a0b      	subs	r3, r1, r0
 80017c4:	469a      	mov	sl, r3
 80017c6:	4665      	mov	r5, ip
 80017c8:	e5ea      	b.n	80013a0 <__aeabi_dadd+0xa8>
 80017ca:	464b      	mov	r3, r9
 80017cc:	464a      	mov	r2, r9
 80017ce:	08c0      	lsrs	r0, r0, #3
 80017d0:	075b      	lsls	r3, r3, #29
 80017d2:	4665      	mov	r5, ip
 80017d4:	4303      	orrs	r3, r0
 80017d6:	08d1      	lsrs	r1, r2, #3
 80017d8:	e6bd      	b.n	8001556 <__aeabi_dadd+0x25e>
 80017da:	2a00      	cmp	r2, #0
 80017dc:	d000      	beq.n	80017e0 <__aeabi_dadd+0x4e8>
 80017de:	e08e      	b.n	80018fe <__aeabi_dadd+0x606>
 80017e0:	464b      	mov	r3, r9
 80017e2:	4303      	orrs	r3, r0
 80017e4:	d117      	bne.n	8001816 <__aeabi_dadd+0x51e>
 80017e6:	2180      	movs	r1, #128	; 0x80
 80017e8:	2500      	movs	r5, #0
 80017ea:	0309      	lsls	r1, r1, #12
 80017ec:	e6da      	b.n	80015a4 <__aeabi_dadd+0x2ac>
 80017ee:	074a      	lsls	r2, r1, #29
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	4313      	orrs	r3, r2
 80017f4:	08c9      	lsrs	r1, r1, #3
 80017f6:	e6d1      	b.n	800159c <__aeabi_dadd+0x2a4>
 80017f8:	1a1c      	subs	r4, r3, r0
 80017fa:	464a      	mov	r2, r9
 80017fc:	42a3      	cmp	r3, r4
 80017fe:	419b      	sbcs	r3, r3
 8001800:	1a89      	subs	r1, r1, r2
 8001802:	425b      	negs	r3, r3
 8001804:	1acb      	subs	r3, r1, r3
 8001806:	469a      	mov	sl, r3
 8001808:	2601      	movs	r6, #1
 800180a:	e5c1      	b.n	8001390 <__aeabi_dadd+0x98>
 800180c:	074a      	lsls	r2, r1, #29
 800180e:	08db      	lsrs	r3, r3, #3
 8001810:	4313      	orrs	r3, r2
 8001812:	08c9      	lsrs	r1, r1, #3
 8001814:	e69f      	b.n	8001556 <__aeabi_dadd+0x25e>
 8001816:	4643      	mov	r3, r8
 8001818:	08d8      	lsrs	r0, r3, #3
 800181a:	464b      	mov	r3, r9
 800181c:	464a      	mov	r2, r9
 800181e:	075b      	lsls	r3, r3, #29
 8001820:	4665      	mov	r5, ip
 8001822:	4303      	orrs	r3, r0
 8001824:	08d1      	lsrs	r1, r2, #3
 8001826:	e6b9      	b.n	800159c <__aeabi_dadd+0x2a4>
 8001828:	4643      	mov	r3, r8
 800182a:	08d8      	lsrs	r0, r3, #3
 800182c:	464b      	mov	r3, r9
 800182e:	464a      	mov	r2, r9
 8001830:	075b      	lsls	r3, r3, #29
 8001832:	4303      	orrs	r3, r0
 8001834:	08d1      	lsrs	r1, r2, #3
 8001836:	e6b1      	b.n	800159c <__aeabi_dadd+0x2a4>
 8001838:	4319      	orrs	r1, r3
 800183a:	000c      	movs	r4, r1
 800183c:	1e63      	subs	r3, r4, #1
 800183e:	419c      	sbcs	r4, r3
 8001840:	e6eb      	b.n	800161a <__aeabi_dadd+0x322>
 8001842:	003c      	movs	r4, r7
 8001844:	000d      	movs	r5, r1
 8001846:	3c20      	subs	r4, #32
 8001848:	40e5      	lsrs	r5, r4
 800184a:	2f20      	cmp	r7, #32
 800184c:	d003      	beq.n	8001856 <__aeabi_dadd+0x55e>
 800184e:	2440      	movs	r4, #64	; 0x40
 8001850:	1be4      	subs	r4, r4, r7
 8001852:	40a1      	lsls	r1, r4
 8001854:	430b      	orrs	r3, r1
 8001856:	001c      	movs	r4, r3
 8001858:	1e63      	subs	r3, r4, #1
 800185a:	419c      	sbcs	r4, r3
 800185c:	432c      	orrs	r4, r5
 800185e:	e770      	b.n	8001742 <__aeabi_dadd+0x44a>
 8001860:	2a00      	cmp	r2, #0
 8001862:	d0e1      	beq.n	8001828 <__aeabi_dadd+0x530>
 8001864:	464a      	mov	r2, r9
 8001866:	4302      	orrs	r2, r0
 8001868:	d0c1      	beq.n	80017ee <__aeabi_dadd+0x4f6>
 800186a:	074a      	lsls	r2, r1, #29
 800186c:	08db      	lsrs	r3, r3, #3
 800186e:	4313      	orrs	r3, r2
 8001870:	2280      	movs	r2, #128	; 0x80
 8001872:	08c9      	lsrs	r1, r1, #3
 8001874:	0312      	lsls	r2, r2, #12
 8001876:	4211      	tst	r1, r2
 8001878:	d008      	beq.n	800188c <__aeabi_dadd+0x594>
 800187a:	4648      	mov	r0, r9
 800187c:	08c4      	lsrs	r4, r0, #3
 800187e:	4214      	tst	r4, r2
 8001880:	d104      	bne.n	800188c <__aeabi_dadd+0x594>
 8001882:	4643      	mov	r3, r8
 8001884:	0021      	movs	r1, r4
 8001886:	08db      	lsrs	r3, r3, #3
 8001888:	0742      	lsls	r2, r0, #29
 800188a:	4313      	orrs	r3, r2
 800188c:	0f5a      	lsrs	r2, r3, #29
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	0752      	lsls	r2, r2, #29
 8001892:	08db      	lsrs	r3, r3, #3
 8001894:	4313      	orrs	r3, r2
 8001896:	e681      	b.n	800159c <__aeabi_dadd+0x2a4>
 8001898:	464b      	mov	r3, r9
 800189a:	4303      	orrs	r3, r0
 800189c:	d100      	bne.n	80018a0 <__aeabi_dadd+0x5a8>
 800189e:	e714      	b.n	80016ca <__aeabi_dadd+0x3d2>
 80018a0:	464b      	mov	r3, r9
 80018a2:	464a      	mov	r2, r9
 80018a4:	08c0      	lsrs	r0, r0, #3
 80018a6:	075b      	lsls	r3, r3, #29
 80018a8:	4665      	mov	r5, ip
 80018aa:	4303      	orrs	r3, r0
 80018ac:	08d1      	lsrs	r1, r2, #3
 80018ae:	e655      	b.n	800155c <__aeabi_dadd+0x264>
 80018b0:	1ac4      	subs	r4, r0, r3
 80018b2:	45a0      	cmp	r8, r4
 80018b4:	4180      	sbcs	r0, r0
 80018b6:	464b      	mov	r3, r9
 80018b8:	4240      	negs	r0, r0
 80018ba:	1a59      	subs	r1, r3, r1
 80018bc:	1a0b      	subs	r3, r1, r0
 80018be:	469a      	mov	sl, r3
 80018c0:	4665      	mov	r5, ip
 80018c2:	2601      	movs	r6, #1
 80018c4:	e564      	b.n	8001390 <__aeabi_dadd+0x98>
 80018c6:	1a1c      	subs	r4, r3, r0
 80018c8:	464a      	mov	r2, r9
 80018ca:	42a3      	cmp	r3, r4
 80018cc:	4180      	sbcs	r0, r0
 80018ce:	1a8a      	subs	r2, r1, r2
 80018d0:	4240      	negs	r0, r0
 80018d2:	1a12      	subs	r2, r2, r0
 80018d4:	4692      	mov	sl, r2
 80018d6:	0212      	lsls	r2, r2, #8
 80018d8:	d549      	bpl.n	800196e <__aeabi_dadd+0x676>
 80018da:	4642      	mov	r2, r8
 80018dc:	1ad4      	subs	r4, r2, r3
 80018de:	45a0      	cmp	r8, r4
 80018e0:	4180      	sbcs	r0, r0
 80018e2:	464b      	mov	r3, r9
 80018e4:	4240      	negs	r0, r0
 80018e6:	1a59      	subs	r1, r3, r1
 80018e8:	1a0b      	subs	r3, r1, r0
 80018ea:	469a      	mov	sl, r3
 80018ec:	4665      	mov	r5, ip
 80018ee:	e57f      	b.n	80013f0 <__aeabi_dadd+0xf8>
 80018f0:	464b      	mov	r3, r9
 80018f2:	464a      	mov	r2, r9
 80018f4:	08c0      	lsrs	r0, r0, #3
 80018f6:	075b      	lsls	r3, r3, #29
 80018f8:	4303      	orrs	r3, r0
 80018fa:	08d1      	lsrs	r1, r2, #3
 80018fc:	e62b      	b.n	8001556 <__aeabi_dadd+0x25e>
 80018fe:	464a      	mov	r2, r9
 8001900:	08db      	lsrs	r3, r3, #3
 8001902:	4302      	orrs	r2, r0
 8001904:	d138      	bne.n	8001978 <__aeabi_dadd+0x680>
 8001906:	074a      	lsls	r2, r1, #29
 8001908:	4313      	orrs	r3, r2
 800190a:	08c9      	lsrs	r1, r1, #3
 800190c:	e646      	b.n	800159c <__aeabi_dadd+0x2a4>
 800190e:	464b      	mov	r3, r9
 8001910:	464a      	mov	r2, r9
 8001912:	08c0      	lsrs	r0, r0, #3
 8001914:	075b      	lsls	r3, r3, #29
 8001916:	4303      	orrs	r3, r0
 8001918:	08d1      	lsrs	r1, r2, #3
 800191a:	e61f      	b.n	800155c <__aeabi_dadd+0x264>
 800191c:	181c      	adds	r4, r3, r0
 800191e:	429c      	cmp	r4, r3
 8001920:	419b      	sbcs	r3, r3
 8001922:	4449      	add	r1, r9
 8001924:	468a      	mov	sl, r1
 8001926:	425b      	negs	r3, r3
 8001928:	449a      	add	sl, r3
 800192a:	4653      	mov	r3, sl
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	d400      	bmi.n	8001932 <__aeabi_dadd+0x63a>
 8001930:	e607      	b.n	8001542 <__aeabi_dadd+0x24a>
 8001932:	4652      	mov	r2, sl
 8001934:	4b1f      	ldr	r3, [pc, #124]	; (80019b4 <__aeabi_dadd+0x6bc>)
 8001936:	2601      	movs	r6, #1
 8001938:	401a      	ands	r2, r3
 800193a:	4692      	mov	sl, r2
 800193c:	e601      	b.n	8001542 <__aeabi_dadd+0x24a>
 800193e:	003c      	movs	r4, r7
 8001940:	000e      	movs	r6, r1
 8001942:	3c20      	subs	r4, #32
 8001944:	40e6      	lsrs	r6, r4
 8001946:	2f20      	cmp	r7, #32
 8001948:	d003      	beq.n	8001952 <__aeabi_dadd+0x65a>
 800194a:	2440      	movs	r4, #64	; 0x40
 800194c:	1be4      	subs	r4, r4, r7
 800194e:	40a1      	lsls	r1, r4
 8001950:	430b      	orrs	r3, r1
 8001952:	001c      	movs	r4, r3
 8001954:	1e63      	subs	r3, r4, #1
 8001956:	419c      	sbcs	r4, r3
 8001958:	4334      	orrs	r4, r6
 800195a:	e65e      	b.n	800161a <__aeabi_dadd+0x322>
 800195c:	4443      	add	r3, r8
 800195e:	4283      	cmp	r3, r0
 8001960:	4180      	sbcs	r0, r0
 8001962:	4449      	add	r1, r9
 8001964:	468a      	mov	sl, r1
 8001966:	4240      	negs	r0, r0
 8001968:	001c      	movs	r4, r3
 800196a:	4482      	add	sl, r0
 800196c:	e6bc      	b.n	80016e8 <__aeabi_dadd+0x3f0>
 800196e:	4653      	mov	r3, sl
 8001970:	4323      	orrs	r3, r4
 8001972:	d100      	bne.n	8001976 <__aeabi_dadd+0x67e>
 8001974:	e6a9      	b.n	80016ca <__aeabi_dadd+0x3d2>
 8001976:	e5e4      	b.n	8001542 <__aeabi_dadd+0x24a>
 8001978:	074a      	lsls	r2, r1, #29
 800197a:	4313      	orrs	r3, r2
 800197c:	2280      	movs	r2, #128	; 0x80
 800197e:	08c9      	lsrs	r1, r1, #3
 8001980:	0312      	lsls	r2, r2, #12
 8001982:	4211      	tst	r1, r2
 8001984:	d009      	beq.n	800199a <__aeabi_dadd+0x6a2>
 8001986:	4648      	mov	r0, r9
 8001988:	08c4      	lsrs	r4, r0, #3
 800198a:	4214      	tst	r4, r2
 800198c:	d105      	bne.n	800199a <__aeabi_dadd+0x6a2>
 800198e:	4643      	mov	r3, r8
 8001990:	4665      	mov	r5, ip
 8001992:	0021      	movs	r1, r4
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	0742      	lsls	r2, r0, #29
 8001998:	4313      	orrs	r3, r2
 800199a:	0f5a      	lsrs	r2, r3, #29
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	08db      	lsrs	r3, r3, #3
 80019a0:	0752      	lsls	r2, r2, #29
 80019a2:	4313      	orrs	r3, r2
 80019a4:	e5fa      	b.n	800159c <__aeabi_dadd+0x2a4>
 80019a6:	2300      	movs	r3, #0
 80019a8:	4a01      	ldr	r2, [pc, #4]	; (80019b0 <__aeabi_dadd+0x6b8>)
 80019aa:	001c      	movs	r4, r3
 80019ac:	e540      	b.n	8001430 <__aeabi_dadd+0x138>
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	000007ff 	.word	0x000007ff
 80019b4:	ff7fffff 	.word	0xff7fffff

080019b8 <__aeabi_ddiv>:
 80019b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ba:	4657      	mov	r7, sl
 80019bc:	464e      	mov	r6, r9
 80019be:	4645      	mov	r5, r8
 80019c0:	46de      	mov	lr, fp
 80019c2:	b5e0      	push	{r5, r6, r7, lr}
 80019c4:	030c      	lsls	r4, r1, #12
 80019c6:	001f      	movs	r7, r3
 80019c8:	004b      	lsls	r3, r1, #1
 80019ca:	4681      	mov	r9, r0
 80019cc:	4692      	mov	sl, r2
 80019ce:	0005      	movs	r5, r0
 80019d0:	b085      	sub	sp, #20
 80019d2:	0b24      	lsrs	r4, r4, #12
 80019d4:	0d5b      	lsrs	r3, r3, #21
 80019d6:	0fce      	lsrs	r6, r1, #31
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d100      	bne.n	80019de <__aeabi_ddiv+0x26>
 80019dc:	e152      	b.n	8001c84 <__aeabi_ddiv+0x2cc>
 80019de:	4ad2      	ldr	r2, [pc, #840]	; (8001d28 <__aeabi_ddiv+0x370>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d100      	bne.n	80019e6 <__aeabi_ddiv+0x2e>
 80019e4:	e16e      	b.n	8001cc4 <__aeabi_ddiv+0x30c>
 80019e6:	0f42      	lsrs	r2, r0, #29
 80019e8:	00e4      	lsls	r4, r4, #3
 80019ea:	4314      	orrs	r4, r2
 80019ec:	2280      	movs	r2, #128	; 0x80
 80019ee:	0412      	lsls	r2, r2, #16
 80019f0:	4322      	orrs	r2, r4
 80019f2:	4690      	mov	r8, r2
 80019f4:	4acd      	ldr	r2, [pc, #820]	; (8001d2c <__aeabi_ddiv+0x374>)
 80019f6:	00c5      	lsls	r5, r0, #3
 80019f8:	4693      	mov	fp, r2
 80019fa:	449b      	add	fp, r3
 80019fc:	2300      	movs	r3, #0
 80019fe:	4699      	mov	r9, r3
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	033c      	lsls	r4, r7, #12
 8001a04:	007b      	lsls	r3, r7, #1
 8001a06:	4650      	mov	r0, sl
 8001a08:	0b24      	lsrs	r4, r4, #12
 8001a0a:	0d5b      	lsrs	r3, r3, #21
 8001a0c:	0fff      	lsrs	r7, r7, #31
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d100      	bne.n	8001a14 <__aeabi_ddiv+0x5c>
 8001a12:	e11a      	b.n	8001c4a <__aeabi_ddiv+0x292>
 8001a14:	4ac4      	ldr	r2, [pc, #784]	; (8001d28 <__aeabi_ddiv+0x370>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d100      	bne.n	8001a1c <__aeabi_ddiv+0x64>
 8001a1a:	e15e      	b.n	8001cda <__aeabi_ddiv+0x322>
 8001a1c:	0f42      	lsrs	r2, r0, #29
 8001a1e:	00e4      	lsls	r4, r4, #3
 8001a20:	4322      	orrs	r2, r4
 8001a22:	2480      	movs	r4, #128	; 0x80
 8001a24:	0424      	lsls	r4, r4, #16
 8001a26:	4314      	orrs	r4, r2
 8001a28:	4ac0      	ldr	r2, [pc, #768]	; (8001d2c <__aeabi_ddiv+0x374>)
 8001a2a:	00c1      	lsls	r1, r0, #3
 8001a2c:	4694      	mov	ip, r2
 8001a2e:	465a      	mov	r2, fp
 8001a30:	4463      	add	r3, ip
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	469b      	mov	fp, r3
 8001a36:	2000      	movs	r0, #0
 8001a38:	0033      	movs	r3, r6
 8001a3a:	407b      	eors	r3, r7
 8001a3c:	469a      	mov	sl, r3
 8001a3e:	464b      	mov	r3, r9
 8001a40:	2b0f      	cmp	r3, #15
 8001a42:	d827      	bhi.n	8001a94 <__aeabi_ddiv+0xdc>
 8001a44:	4aba      	ldr	r2, [pc, #744]	; (8001d30 <__aeabi_ddiv+0x378>)
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	58d3      	ldr	r3, [r2, r3]
 8001a4a:	469f      	mov	pc, r3
 8001a4c:	46b2      	mov	sl, r6
 8001a4e:	9b00      	ldr	r3, [sp, #0]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d016      	beq.n	8001a82 <__aeabi_ddiv+0xca>
 8001a54:	2b03      	cmp	r3, #3
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0xa2>
 8001a58:	e287      	b.n	8001f6a <__aeabi_ddiv+0x5b2>
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d000      	beq.n	8001a60 <__aeabi_ddiv+0xa8>
 8001a5e:	e0d5      	b.n	8001c0c <__aeabi_ddiv+0x254>
 8001a60:	2300      	movs	r3, #0
 8001a62:	2200      	movs	r2, #0
 8001a64:	2500      	movs	r5, #0
 8001a66:	051b      	lsls	r3, r3, #20
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	4652      	mov	r2, sl
 8001a6c:	07d2      	lsls	r2, r2, #31
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	0028      	movs	r0, r5
 8001a72:	0019      	movs	r1, r3
 8001a74:	b005      	add	sp, #20
 8001a76:	bcf0      	pop	{r4, r5, r6, r7}
 8001a78:	46bb      	mov	fp, r7
 8001a7a:	46b2      	mov	sl, r6
 8001a7c:	46a9      	mov	r9, r5
 8001a7e:	46a0      	mov	r8, r4
 8001a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a82:	2200      	movs	r2, #0
 8001a84:	2500      	movs	r5, #0
 8001a86:	4ba8      	ldr	r3, [pc, #672]	; (8001d28 <__aeabi_ddiv+0x370>)
 8001a88:	e7ed      	b.n	8001a66 <__aeabi_ddiv+0xae>
 8001a8a:	46ba      	mov	sl, r7
 8001a8c:	46a0      	mov	r8, r4
 8001a8e:	000d      	movs	r5, r1
 8001a90:	9000      	str	r0, [sp, #0]
 8001a92:	e7dc      	b.n	8001a4e <__aeabi_ddiv+0x96>
 8001a94:	4544      	cmp	r4, r8
 8001a96:	d200      	bcs.n	8001a9a <__aeabi_ddiv+0xe2>
 8001a98:	e1c4      	b.n	8001e24 <__aeabi_ddiv+0x46c>
 8001a9a:	d100      	bne.n	8001a9e <__aeabi_ddiv+0xe6>
 8001a9c:	e1bf      	b.n	8001e1e <__aeabi_ddiv+0x466>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	469c      	mov	ip, r3
 8001aa4:	002e      	movs	r6, r5
 8001aa6:	4640      	mov	r0, r8
 8001aa8:	2500      	movs	r5, #0
 8001aaa:	44e3      	add	fp, ip
 8001aac:	0223      	lsls	r3, r4, #8
 8001aae:	0e0c      	lsrs	r4, r1, #24
 8001ab0:	431c      	orrs	r4, r3
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	0423      	lsls	r3, r4, #16
 8001ab8:	020a      	lsls	r2, r1, #8
 8001aba:	0c1f      	lsrs	r7, r3, #16
 8001abc:	4649      	mov	r1, r9
 8001abe:	9200      	str	r2, [sp, #0]
 8001ac0:	9701      	str	r7, [sp, #4]
 8001ac2:	f7fe fbbf 	bl	8000244 <__aeabi_uidivmod>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	437a      	muls	r2, r7
 8001aca:	040b      	lsls	r3, r1, #16
 8001acc:	0c31      	lsrs	r1, r6, #16
 8001ace:	4680      	mov	r8, r0
 8001ad0:	4319      	orrs	r1, r3
 8001ad2:	428a      	cmp	r2, r1
 8001ad4:	d907      	bls.n	8001ae6 <__aeabi_ddiv+0x12e>
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	425b      	negs	r3, r3
 8001ada:	469c      	mov	ip, r3
 8001adc:	1909      	adds	r1, r1, r4
 8001ade:	44e0      	add	r8, ip
 8001ae0:	428c      	cmp	r4, r1
 8001ae2:	d800      	bhi.n	8001ae6 <__aeabi_ddiv+0x12e>
 8001ae4:	e201      	b.n	8001eea <__aeabi_ddiv+0x532>
 8001ae6:	1a88      	subs	r0, r1, r2
 8001ae8:	4649      	mov	r1, r9
 8001aea:	f7fe fbab 	bl	8000244 <__aeabi_uidivmod>
 8001aee:	9a01      	ldr	r2, [sp, #4]
 8001af0:	0436      	lsls	r6, r6, #16
 8001af2:	4342      	muls	r2, r0
 8001af4:	0409      	lsls	r1, r1, #16
 8001af6:	0c36      	lsrs	r6, r6, #16
 8001af8:	0003      	movs	r3, r0
 8001afa:	430e      	orrs	r6, r1
 8001afc:	42b2      	cmp	r2, r6
 8001afe:	d904      	bls.n	8001b0a <__aeabi_ddiv+0x152>
 8001b00:	1936      	adds	r6, r6, r4
 8001b02:	3b01      	subs	r3, #1
 8001b04:	42b4      	cmp	r4, r6
 8001b06:	d800      	bhi.n	8001b0a <__aeabi_ddiv+0x152>
 8001b08:	e1e9      	b.n	8001ede <__aeabi_ddiv+0x526>
 8001b0a:	1ab0      	subs	r0, r6, r2
 8001b0c:	4642      	mov	r2, r8
 8001b0e:	9e00      	ldr	r6, [sp, #0]
 8001b10:	0412      	lsls	r2, r2, #16
 8001b12:	431a      	orrs	r2, r3
 8001b14:	0c33      	lsrs	r3, r6, #16
 8001b16:	001f      	movs	r7, r3
 8001b18:	0c11      	lsrs	r1, r2, #16
 8001b1a:	4690      	mov	r8, r2
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	0413      	lsls	r3, r2, #16
 8001b20:	0432      	lsls	r2, r6, #16
 8001b22:	0c16      	lsrs	r6, r2, #16
 8001b24:	0032      	movs	r2, r6
 8001b26:	0c1b      	lsrs	r3, r3, #16
 8001b28:	435a      	muls	r2, r3
 8001b2a:	9603      	str	r6, [sp, #12]
 8001b2c:	437b      	muls	r3, r7
 8001b2e:	434e      	muls	r6, r1
 8001b30:	4379      	muls	r1, r7
 8001b32:	0c17      	lsrs	r7, r2, #16
 8001b34:	46bc      	mov	ip, r7
 8001b36:	199b      	adds	r3, r3, r6
 8001b38:	4463      	add	r3, ip
 8001b3a:	429e      	cmp	r6, r3
 8001b3c:	d903      	bls.n	8001b46 <__aeabi_ddiv+0x18e>
 8001b3e:	2680      	movs	r6, #128	; 0x80
 8001b40:	0276      	lsls	r6, r6, #9
 8001b42:	46b4      	mov	ip, r6
 8001b44:	4461      	add	r1, ip
 8001b46:	0c1e      	lsrs	r6, r3, #16
 8001b48:	1871      	adds	r1, r6, r1
 8001b4a:	0416      	lsls	r6, r2, #16
 8001b4c:	041b      	lsls	r3, r3, #16
 8001b4e:	0c36      	lsrs	r6, r6, #16
 8001b50:	199e      	adds	r6, r3, r6
 8001b52:	4288      	cmp	r0, r1
 8001b54:	d302      	bcc.n	8001b5c <__aeabi_ddiv+0x1a4>
 8001b56:	d112      	bne.n	8001b7e <__aeabi_ddiv+0x1c6>
 8001b58:	42b5      	cmp	r5, r6
 8001b5a:	d210      	bcs.n	8001b7e <__aeabi_ddiv+0x1c6>
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	1e5a      	subs	r2, r3, #1
 8001b60:	9b00      	ldr	r3, [sp, #0]
 8001b62:	469c      	mov	ip, r3
 8001b64:	4465      	add	r5, ip
 8001b66:	001f      	movs	r7, r3
 8001b68:	429d      	cmp	r5, r3
 8001b6a:	419b      	sbcs	r3, r3
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	191b      	adds	r3, r3, r4
 8001b70:	18c0      	adds	r0, r0, r3
 8001b72:	4284      	cmp	r4, r0
 8001b74:	d200      	bcs.n	8001b78 <__aeabi_ddiv+0x1c0>
 8001b76:	e19e      	b.n	8001eb6 <__aeabi_ddiv+0x4fe>
 8001b78:	d100      	bne.n	8001b7c <__aeabi_ddiv+0x1c4>
 8001b7a:	e199      	b.n	8001eb0 <__aeabi_ddiv+0x4f8>
 8001b7c:	4690      	mov	r8, r2
 8001b7e:	1bae      	subs	r6, r5, r6
 8001b80:	42b5      	cmp	r5, r6
 8001b82:	41ad      	sbcs	r5, r5
 8001b84:	1a40      	subs	r0, r0, r1
 8001b86:	426d      	negs	r5, r5
 8001b88:	1b40      	subs	r0, r0, r5
 8001b8a:	4284      	cmp	r4, r0
 8001b8c:	d100      	bne.n	8001b90 <__aeabi_ddiv+0x1d8>
 8001b8e:	e1d2      	b.n	8001f36 <__aeabi_ddiv+0x57e>
 8001b90:	4649      	mov	r1, r9
 8001b92:	f7fe fb57 	bl	8000244 <__aeabi_uidivmod>
 8001b96:	9a01      	ldr	r2, [sp, #4]
 8001b98:	040b      	lsls	r3, r1, #16
 8001b9a:	4342      	muls	r2, r0
 8001b9c:	0c31      	lsrs	r1, r6, #16
 8001b9e:	0005      	movs	r5, r0
 8001ba0:	4319      	orrs	r1, r3
 8001ba2:	428a      	cmp	r2, r1
 8001ba4:	d900      	bls.n	8001ba8 <__aeabi_ddiv+0x1f0>
 8001ba6:	e16c      	b.n	8001e82 <__aeabi_ddiv+0x4ca>
 8001ba8:	1a88      	subs	r0, r1, r2
 8001baa:	4649      	mov	r1, r9
 8001bac:	f7fe fb4a 	bl	8000244 <__aeabi_uidivmod>
 8001bb0:	9a01      	ldr	r2, [sp, #4]
 8001bb2:	0436      	lsls	r6, r6, #16
 8001bb4:	4342      	muls	r2, r0
 8001bb6:	0409      	lsls	r1, r1, #16
 8001bb8:	0c36      	lsrs	r6, r6, #16
 8001bba:	0003      	movs	r3, r0
 8001bbc:	430e      	orrs	r6, r1
 8001bbe:	42b2      	cmp	r2, r6
 8001bc0:	d900      	bls.n	8001bc4 <__aeabi_ddiv+0x20c>
 8001bc2:	e153      	b.n	8001e6c <__aeabi_ddiv+0x4b4>
 8001bc4:	9803      	ldr	r0, [sp, #12]
 8001bc6:	1ab6      	subs	r6, r6, r2
 8001bc8:	0002      	movs	r2, r0
 8001bca:	042d      	lsls	r5, r5, #16
 8001bcc:	431d      	orrs	r5, r3
 8001bce:	9f02      	ldr	r7, [sp, #8]
 8001bd0:	042b      	lsls	r3, r5, #16
 8001bd2:	0c1b      	lsrs	r3, r3, #16
 8001bd4:	435a      	muls	r2, r3
 8001bd6:	437b      	muls	r3, r7
 8001bd8:	469c      	mov	ip, r3
 8001bda:	0c29      	lsrs	r1, r5, #16
 8001bdc:	4348      	muls	r0, r1
 8001bde:	0c13      	lsrs	r3, r2, #16
 8001be0:	4484      	add	ip, r0
 8001be2:	4463      	add	r3, ip
 8001be4:	4379      	muls	r1, r7
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d903      	bls.n	8001bf2 <__aeabi_ddiv+0x23a>
 8001bea:	2080      	movs	r0, #128	; 0x80
 8001bec:	0240      	lsls	r0, r0, #9
 8001bee:	4684      	mov	ip, r0
 8001bf0:	4461      	add	r1, ip
 8001bf2:	0c18      	lsrs	r0, r3, #16
 8001bf4:	0412      	lsls	r2, r2, #16
 8001bf6:	041b      	lsls	r3, r3, #16
 8001bf8:	0c12      	lsrs	r2, r2, #16
 8001bfa:	1840      	adds	r0, r0, r1
 8001bfc:	189b      	adds	r3, r3, r2
 8001bfe:	4286      	cmp	r6, r0
 8001c00:	d200      	bcs.n	8001c04 <__aeabi_ddiv+0x24c>
 8001c02:	e100      	b.n	8001e06 <__aeabi_ddiv+0x44e>
 8001c04:	d100      	bne.n	8001c08 <__aeabi_ddiv+0x250>
 8001c06:	e0fb      	b.n	8001e00 <__aeabi_ddiv+0x448>
 8001c08:	2301      	movs	r3, #1
 8001c0a:	431d      	orrs	r5, r3
 8001c0c:	4b49      	ldr	r3, [pc, #292]	; (8001d34 <__aeabi_ddiv+0x37c>)
 8001c0e:	445b      	add	r3, fp
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	dc00      	bgt.n	8001c16 <__aeabi_ddiv+0x25e>
 8001c14:	e0aa      	b.n	8001d6c <__aeabi_ddiv+0x3b4>
 8001c16:	076a      	lsls	r2, r5, #29
 8001c18:	d000      	beq.n	8001c1c <__aeabi_ddiv+0x264>
 8001c1a:	e13d      	b.n	8001e98 <__aeabi_ddiv+0x4e0>
 8001c1c:	08e9      	lsrs	r1, r5, #3
 8001c1e:	4642      	mov	r2, r8
 8001c20:	01d2      	lsls	r2, r2, #7
 8001c22:	d506      	bpl.n	8001c32 <__aeabi_ddiv+0x27a>
 8001c24:	4642      	mov	r2, r8
 8001c26:	4b44      	ldr	r3, [pc, #272]	; (8001d38 <__aeabi_ddiv+0x380>)
 8001c28:	401a      	ands	r2, r3
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	4690      	mov	r8, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	445b      	add	r3, fp
 8001c32:	4a42      	ldr	r2, [pc, #264]	; (8001d3c <__aeabi_ddiv+0x384>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	dd00      	ble.n	8001c3a <__aeabi_ddiv+0x282>
 8001c38:	e723      	b.n	8001a82 <__aeabi_ddiv+0xca>
 8001c3a:	4642      	mov	r2, r8
 8001c3c:	055b      	lsls	r3, r3, #21
 8001c3e:	0755      	lsls	r5, r2, #29
 8001c40:	0252      	lsls	r2, r2, #9
 8001c42:	430d      	orrs	r5, r1
 8001c44:	0b12      	lsrs	r2, r2, #12
 8001c46:	0d5b      	lsrs	r3, r3, #21
 8001c48:	e70d      	b.n	8001a66 <__aeabi_ddiv+0xae>
 8001c4a:	4651      	mov	r1, sl
 8001c4c:	4321      	orrs	r1, r4
 8001c4e:	d100      	bne.n	8001c52 <__aeabi_ddiv+0x29a>
 8001c50:	e07c      	b.n	8001d4c <__aeabi_ddiv+0x394>
 8001c52:	2c00      	cmp	r4, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_ddiv+0x2a0>
 8001c56:	e0fb      	b.n	8001e50 <__aeabi_ddiv+0x498>
 8001c58:	0020      	movs	r0, r4
 8001c5a:	f001 fa63 	bl	8003124 <__clzsi2>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	3a0b      	subs	r2, #11
 8001c62:	231d      	movs	r3, #29
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	4652      	mov	r2, sl
 8001c68:	0001      	movs	r1, r0
 8001c6a:	40da      	lsrs	r2, r3
 8001c6c:	4653      	mov	r3, sl
 8001c6e:	3908      	subs	r1, #8
 8001c70:	408b      	lsls	r3, r1
 8001c72:	408c      	lsls	r4, r1
 8001c74:	0019      	movs	r1, r3
 8001c76:	4314      	orrs	r4, r2
 8001c78:	4b31      	ldr	r3, [pc, #196]	; (8001d40 <__aeabi_ddiv+0x388>)
 8001c7a:	4458      	add	r0, fp
 8001c7c:	469b      	mov	fp, r3
 8001c7e:	4483      	add	fp, r0
 8001c80:	2000      	movs	r0, #0
 8001c82:	e6d9      	b.n	8001a38 <__aeabi_ddiv+0x80>
 8001c84:	0003      	movs	r3, r0
 8001c86:	4323      	orrs	r3, r4
 8001c88:	4698      	mov	r8, r3
 8001c8a:	d044      	beq.n	8001d16 <__aeabi_ddiv+0x35e>
 8001c8c:	2c00      	cmp	r4, #0
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_ddiv+0x2da>
 8001c90:	e0cf      	b.n	8001e32 <__aeabi_ddiv+0x47a>
 8001c92:	0020      	movs	r0, r4
 8001c94:	f001 fa46 	bl	8003124 <__clzsi2>
 8001c98:	0001      	movs	r1, r0
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	390b      	subs	r1, #11
 8001c9e:	231d      	movs	r3, #29
 8001ca0:	1a5b      	subs	r3, r3, r1
 8001ca2:	4649      	mov	r1, r9
 8001ca4:	0010      	movs	r0, r2
 8001ca6:	40d9      	lsrs	r1, r3
 8001ca8:	3808      	subs	r0, #8
 8001caa:	4084      	lsls	r4, r0
 8001cac:	000b      	movs	r3, r1
 8001cae:	464d      	mov	r5, r9
 8001cb0:	4323      	orrs	r3, r4
 8001cb2:	4698      	mov	r8, r3
 8001cb4:	4085      	lsls	r5, r0
 8001cb6:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <__aeabi_ddiv+0x38c>)
 8001cb8:	1a9b      	subs	r3, r3, r2
 8001cba:	469b      	mov	fp, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	4699      	mov	r9, r3
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	e69e      	b.n	8001a02 <__aeabi_ddiv+0x4a>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	4322      	orrs	r2, r4
 8001cc8:	4690      	mov	r8, r2
 8001cca:	d11d      	bne.n	8001d08 <__aeabi_ddiv+0x350>
 8001ccc:	2208      	movs	r2, #8
 8001cce:	469b      	mov	fp, r3
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	2500      	movs	r5, #0
 8001cd4:	4691      	mov	r9, r2
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	e693      	b.n	8001a02 <__aeabi_ddiv+0x4a>
 8001cda:	4651      	mov	r1, sl
 8001cdc:	4321      	orrs	r1, r4
 8001cde:	d109      	bne.n	8001cf4 <__aeabi_ddiv+0x33c>
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	464a      	mov	r2, r9
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	4b18      	ldr	r3, [pc, #96]	; (8001d48 <__aeabi_ddiv+0x390>)
 8001ce8:	4691      	mov	r9, r2
 8001cea:	469c      	mov	ip, r3
 8001cec:	2400      	movs	r4, #0
 8001cee:	2002      	movs	r0, #2
 8001cf0:	44e3      	add	fp, ip
 8001cf2:	e6a1      	b.n	8001a38 <__aeabi_ddiv+0x80>
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	464a      	mov	r2, r9
 8001cf8:	431a      	orrs	r2, r3
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <__aeabi_ddiv+0x390>)
 8001cfc:	4691      	mov	r9, r2
 8001cfe:	469c      	mov	ip, r3
 8001d00:	4651      	mov	r1, sl
 8001d02:	2003      	movs	r0, #3
 8001d04:	44e3      	add	fp, ip
 8001d06:	e697      	b.n	8001a38 <__aeabi_ddiv+0x80>
 8001d08:	220c      	movs	r2, #12
 8001d0a:	469b      	mov	fp, r3
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	46a0      	mov	r8, r4
 8001d10:	4691      	mov	r9, r2
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	e675      	b.n	8001a02 <__aeabi_ddiv+0x4a>
 8001d16:	2304      	movs	r3, #4
 8001d18:	4699      	mov	r9, r3
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	469b      	mov	fp, r3
 8001d1e:	3301      	adds	r3, #1
 8001d20:	2500      	movs	r5, #0
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	e66d      	b.n	8001a02 <__aeabi_ddiv+0x4a>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	fffffc01 	.word	0xfffffc01
 8001d30:	0800c12c 	.word	0x0800c12c
 8001d34:	000003ff 	.word	0x000003ff
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	000007fe 	.word	0x000007fe
 8001d40:	000003f3 	.word	0x000003f3
 8001d44:	fffffc0d 	.word	0xfffffc0d
 8001d48:	fffff801 	.word	0xfffff801
 8001d4c:	464a      	mov	r2, r9
 8001d4e:	2301      	movs	r3, #1
 8001d50:	431a      	orrs	r2, r3
 8001d52:	4691      	mov	r9, r2
 8001d54:	2400      	movs	r4, #0
 8001d56:	2001      	movs	r0, #1
 8001d58:	e66e      	b.n	8001a38 <__aeabi_ddiv+0x80>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2280      	movs	r2, #128	; 0x80
 8001d5e:	469a      	mov	sl, r3
 8001d60:	2500      	movs	r5, #0
 8001d62:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <__aeabi_ddiv+0x5cc>)
 8001d64:	0312      	lsls	r2, r2, #12
 8001d66:	e67e      	b.n	8001a66 <__aeabi_ddiv+0xae>
 8001d68:	2501      	movs	r5, #1
 8001d6a:	426d      	negs	r5, r5
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	1ad2      	subs	r2, r2, r3
 8001d70:	2a38      	cmp	r2, #56	; 0x38
 8001d72:	dd00      	ble.n	8001d76 <__aeabi_ddiv+0x3be>
 8001d74:	e674      	b.n	8001a60 <__aeabi_ddiv+0xa8>
 8001d76:	2a1f      	cmp	r2, #31
 8001d78:	dc00      	bgt.n	8001d7c <__aeabi_ddiv+0x3c4>
 8001d7a:	e0bd      	b.n	8001ef8 <__aeabi_ddiv+0x540>
 8001d7c:	211f      	movs	r1, #31
 8001d7e:	4249      	negs	r1, r1
 8001d80:	1acb      	subs	r3, r1, r3
 8001d82:	4641      	mov	r1, r8
 8001d84:	40d9      	lsrs	r1, r3
 8001d86:	000b      	movs	r3, r1
 8001d88:	2a20      	cmp	r2, #32
 8001d8a:	d004      	beq.n	8001d96 <__aeabi_ddiv+0x3de>
 8001d8c:	4641      	mov	r1, r8
 8001d8e:	4a7e      	ldr	r2, [pc, #504]	; (8001f88 <__aeabi_ddiv+0x5d0>)
 8001d90:	445a      	add	r2, fp
 8001d92:	4091      	lsls	r1, r2
 8001d94:	430d      	orrs	r5, r1
 8001d96:	0029      	movs	r1, r5
 8001d98:	1e4a      	subs	r2, r1, #1
 8001d9a:	4191      	sbcs	r1, r2
 8001d9c:	4319      	orrs	r1, r3
 8001d9e:	2307      	movs	r3, #7
 8001da0:	001d      	movs	r5, r3
 8001da2:	2200      	movs	r2, #0
 8001da4:	400d      	ands	r5, r1
 8001da6:	420b      	tst	r3, r1
 8001da8:	d100      	bne.n	8001dac <__aeabi_ddiv+0x3f4>
 8001daa:	e0d0      	b.n	8001f4e <__aeabi_ddiv+0x596>
 8001dac:	220f      	movs	r2, #15
 8001dae:	2300      	movs	r3, #0
 8001db0:	400a      	ands	r2, r1
 8001db2:	2a04      	cmp	r2, #4
 8001db4:	d100      	bne.n	8001db8 <__aeabi_ddiv+0x400>
 8001db6:	e0c7      	b.n	8001f48 <__aeabi_ddiv+0x590>
 8001db8:	1d0a      	adds	r2, r1, #4
 8001dba:	428a      	cmp	r2, r1
 8001dbc:	4189      	sbcs	r1, r1
 8001dbe:	4249      	negs	r1, r1
 8001dc0:	185b      	adds	r3, r3, r1
 8001dc2:	0011      	movs	r1, r2
 8001dc4:	021a      	lsls	r2, r3, #8
 8001dc6:	d400      	bmi.n	8001dca <__aeabi_ddiv+0x412>
 8001dc8:	e0be      	b.n	8001f48 <__aeabi_ddiv+0x590>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2500      	movs	r5, #0
 8001dd0:	e649      	b.n	8001a66 <__aeabi_ddiv+0xae>
 8001dd2:	2280      	movs	r2, #128	; 0x80
 8001dd4:	4643      	mov	r3, r8
 8001dd6:	0312      	lsls	r2, r2, #12
 8001dd8:	4213      	tst	r3, r2
 8001dda:	d008      	beq.n	8001dee <__aeabi_ddiv+0x436>
 8001ddc:	4214      	tst	r4, r2
 8001dde:	d106      	bne.n	8001dee <__aeabi_ddiv+0x436>
 8001de0:	4322      	orrs	r2, r4
 8001de2:	0312      	lsls	r2, r2, #12
 8001de4:	46ba      	mov	sl, r7
 8001de6:	000d      	movs	r5, r1
 8001de8:	4b66      	ldr	r3, [pc, #408]	; (8001f84 <__aeabi_ddiv+0x5cc>)
 8001dea:	0b12      	lsrs	r2, r2, #12
 8001dec:	e63b      	b.n	8001a66 <__aeabi_ddiv+0xae>
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	4643      	mov	r3, r8
 8001df2:	0312      	lsls	r2, r2, #12
 8001df4:	431a      	orrs	r2, r3
 8001df6:	0312      	lsls	r2, r2, #12
 8001df8:	46b2      	mov	sl, r6
 8001dfa:	4b62      	ldr	r3, [pc, #392]	; (8001f84 <__aeabi_ddiv+0x5cc>)
 8001dfc:	0b12      	lsrs	r2, r2, #12
 8001dfe:	e632      	b.n	8001a66 <__aeabi_ddiv+0xae>
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d100      	bne.n	8001e06 <__aeabi_ddiv+0x44e>
 8001e04:	e702      	b.n	8001c0c <__aeabi_ddiv+0x254>
 8001e06:	19a6      	adds	r6, r4, r6
 8001e08:	1e6a      	subs	r2, r5, #1
 8001e0a:	42a6      	cmp	r6, r4
 8001e0c:	d200      	bcs.n	8001e10 <__aeabi_ddiv+0x458>
 8001e0e:	e089      	b.n	8001f24 <__aeabi_ddiv+0x56c>
 8001e10:	4286      	cmp	r6, r0
 8001e12:	d200      	bcs.n	8001e16 <__aeabi_ddiv+0x45e>
 8001e14:	e09f      	b.n	8001f56 <__aeabi_ddiv+0x59e>
 8001e16:	d100      	bne.n	8001e1a <__aeabi_ddiv+0x462>
 8001e18:	e0af      	b.n	8001f7a <__aeabi_ddiv+0x5c2>
 8001e1a:	0015      	movs	r5, r2
 8001e1c:	e6f4      	b.n	8001c08 <__aeabi_ddiv+0x250>
 8001e1e:	42a9      	cmp	r1, r5
 8001e20:	d900      	bls.n	8001e24 <__aeabi_ddiv+0x46c>
 8001e22:	e63c      	b.n	8001a9e <__aeabi_ddiv+0xe6>
 8001e24:	4643      	mov	r3, r8
 8001e26:	07de      	lsls	r6, r3, #31
 8001e28:	0858      	lsrs	r0, r3, #1
 8001e2a:	086b      	lsrs	r3, r5, #1
 8001e2c:	431e      	orrs	r6, r3
 8001e2e:	07ed      	lsls	r5, r5, #31
 8001e30:	e63c      	b.n	8001aac <__aeabi_ddiv+0xf4>
 8001e32:	f001 f977 	bl	8003124 <__clzsi2>
 8001e36:	0001      	movs	r1, r0
 8001e38:	0002      	movs	r2, r0
 8001e3a:	3115      	adds	r1, #21
 8001e3c:	3220      	adds	r2, #32
 8001e3e:	291c      	cmp	r1, #28
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_ddiv+0x48c>
 8001e42:	e72c      	b.n	8001c9e <__aeabi_ddiv+0x2e6>
 8001e44:	464b      	mov	r3, r9
 8001e46:	3808      	subs	r0, #8
 8001e48:	4083      	lsls	r3, r0
 8001e4a:	2500      	movs	r5, #0
 8001e4c:	4698      	mov	r8, r3
 8001e4e:	e732      	b.n	8001cb6 <__aeabi_ddiv+0x2fe>
 8001e50:	f001 f968 	bl	8003124 <__clzsi2>
 8001e54:	0003      	movs	r3, r0
 8001e56:	001a      	movs	r2, r3
 8001e58:	3215      	adds	r2, #21
 8001e5a:	3020      	adds	r0, #32
 8001e5c:	2a1c      	cmp	r2, #28
 8001e5e:	dc00      	bgt.n	8001e62 <__aeabi_ddiv+0x4aa>
 8001e60:	e6ff      	b.n	8001c62 <__aeabi_ddiv+0x2aa>
 8001e62:	4654      	mov	r4, sl
 8001e64:	3b08      	subs	r3, #8
 8001e66:	2100      	movs	r1, #0
 8001e68:	409c      	lsls	r4, r3
 8001e6a:	e705      	b.n	8001c78 <__aeabi_ddiv+0x2c0>
 8001e6c:	1936      	adds	r6, r6, r4
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	42b4      	cmp	r4, r6
 8001e72:	d900      	bls.n	8001e76 <__aeabi_ddiv+0x4be>
 8001e74:	e6a6      	b.n	8001bc4 <__aeabi_ddiv+0x20c>
 8001e76:	42b2      	cmp	r2, r6
 8001e78:	d800      	bhi.n	8001e7c <__aeabi_ddiv+0x4c4>
 8001e7a:	e6a3      	b.n	8001bc4 <__aeabi_ddiv+0x20c>
 8001e7c:	1e83      	subs	r3, r0, #2
 8001e7e:	1936      	adds	r6, r6, r4
 8001e80:	e6a0      	b.n	8001bc4 <__aeabi_ddiv+0x20c>
 8001e82:	1909      	adds	r1, r1, r4
 8001e84:	3d01      	subs	r5, #1
 8001e86:	428c      	cmp	r4, r1
 8001e88:	d900      	bls.n	8001e8c <__aeabi_ddiv+0x4d4>
 8001e8a:	e68d      	b.n	8001ba8 <__aeabi_ddiv+0x1f0>
 8001e8c:	428a      	cmp	r2, r1
 8001e8e:	d800      	bhi.n	8001e92 <__aeabi_ddiv+0x4da>
 8001e90:	e68a      	b.n	8001ba8 <__aeabi_ddiv+0x1f0>
 8001e92:	1e85      	subs	r5, r0, #2
 8001e94:	1909      	adds	r1, r1, r4
 8001e96:	e687      	b.n	8001ba8 <__aeabi_ddiv+0x1f0>
 8001e98:	220f      	movs	r2, #15
 8001e9a:	402a      	ands	r2, r5
 8001e9c:	2a04      	cmp	r2, #4
 8001e9e:	d100      	bne.n	8001ea2 <__aeabi_ddiv+0x4ea>
 8001ea0:	e6bc      	b.n	8001c1c <__aeabi_ddiv+0x264>
 8001ea2:	1d29      	adds	r1, r5, #4
 8001ea4:	42a9      	cmp	r1, r5
 8001ea6:	41ad      	sbcs	r5, r5
 8001ea8:	426d      	negs	r5, r5
 8001eaa:	08c9      	lsrs	r1, r1, #3
 8001eac:	44a8      	add	r8, r5
 8001eae:	e6b6      	b.n	8001c1e <__aeabi_ddiv+0x266>
 8001eb0:	42af      	cmp	r7, r5
 8001eb2:	d900      	bls.n	8001eb6 <__aeabi_ddiv+0x4fe>
 8001eb4:	e662      	b.n	8001b7c <__aeabi_ddiv+0x1c4>
 8001eb6:	4281      	cmp	r1, r0
 8001eb8:	d804      	bhi.n	8001ec4 <__aeabi_ddiv+0x50c>
 8001eba:	d000      	beq.n	8001ebe <__aeabi_ddiv+0x506>
 8001ebc:	e65e      	b.n	8001b7c <__aeabi_ddiv+0x1c4>
 8001ebe:	42ae      	cmp	r6, r5
 8001ec0:	d800      	bhi.n	8001ec4 <__aeabi_ddiv+0x50c>
 8001ec2:	e65b      	b.n	8001b7c <__aeabi_ddiv+0x1c4>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	425b      	negs	r3, r3
 8001ec8:	469c      	mov	ip, r3
 8001eca:	9b00      	ldr	r3, [sp, #0]
 8001ecc:	44e0      	add	r8, ip
 8001ece:	469c      	mov	ip, r3
 8001ed0:	4465      	add	r5, ip
 8001ed2:	429d      	cmp	r5, r3
 8001ed4:	419b      	sbcs	r3, r3
 8001ed6:	425b      	negs	r3, r3
 8001ed8:	191b      	adds	r3, r3, r4
 8001eda:	18c0      	adds	r0, r0, r3
 8001edc:	e64f      	b.n	8001b7e <__aeabi_ddiv+0x1c6>
 8001ede:	42b2      	cmp	r2, r6
 8001ee0:	d800      	bhi.n	8001ee4 <__aeabi_ddiv+0x52c>
 8001ee2:	e612      	b.n	8001b0a <__aeabi_ddiv+0x152>
 8001ee4:	1e83      	subs	r3, r0, #2
 8001ee6:	1936      	adds	r6, r6, r4
 8001ee8:	e60f      	b.n	8001b0a <__aeabi_ddiv+0x152>
 8001eea:	428a      	cmp	r2, r1
 8001eec:	d800      	bhi.n	8001ef0 <__aeabi_ddiv+0x538>
 8001eee:	e5fa      	b.n	8001ae6 <__aeabi_ddiv+0x12e>
 8001ef0:	1e83      	subs	r3, r0, #2
 8001ef2:	4698      	mov	r8, r3
 8001ef4:	1909      	adds	r1, r1, r4
 8001ef6:	e5f6      	b.n	8001ae6 <__aeabi_ddiv+0x12e>
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <__aeabi_ddiv+0x5d4>)
 8001efa:	0028      	movs	r0, r5
 8001efc:	445b      	add	r3, fp
 8001efe:	4641      	mov	r1, r8
 8001f00:	409d      	lsls	r5, r3
 8001f02:	4099      	lsls	r1, r3
 8001f04:	40d0      	lsrs	r0, r2
 8001f06:	1e6b      	subs	r3, r5, #1
 8001f08:	419d      	sbcs	r5, r3
 8001f0a:	4643      	mov	r3, r8
 8001f0c:	4301      	orrs	r1, r0
 8001f0e:	4329      	orrs	r1, r5
 8001f10:	40d3      	lsrs	r3, r2
 8001f12:	074a      	lsls	r2, r1, #29
 8001f14:	d100      	bne.n	8001f18 <__aeabi_ddiv+0x560>
 8001f16:	e755      	b.n	8001dc4 <__aeabi_ddiv+0x40c>
 8001f18:	220f      	movs	r2, #15
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	2a04      	cmp	r2, #4
 8001f1e:	d000      	beq.n	8001f22 <__aeabi_ddiv+0x56a>
 8001f20:	e74a      	b.n	8001db8 <__aeabi_ddiv+0x400>
 8001f22:	e74f      	b.n	8001dc4 <__aeabi_ddiv+0x40c>
 8001f24:	0015      	movs	r5, r2
 8001f26:	4286      	cmp	r6, r0
 8001f28:	d000      	beq.n	8001f2c <__aeabi_ddiv+0x574>
 8001f2a:	e66d      	b.n	8001c08 <__aeabi_ddiv+0x250>
 8001f2c:	9a00      	ldr	r2, [sp, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d000      	beq.n	8001f34 <__aeabi_ddiv+0x57c>
 8001f32:	e669      	b.n	8001c08 <__aeabi_ddiv+0x250>
 8001f34:	e66a      	b.n	8001c0c <__aeabi_ddiv+0x254>
 8001f36:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <__aeabi_ddiv+0x5d8>)
 8001f38:	445b      	add	r3, fp
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	dc00      	bgt.n	8001f40 <__aeabi_ddiv+0x588>
 8001f3e:	e713      	b.n	8001d68 <__aeabi_ddiv+0x3b0>
 8001f40:	2501      	movs	r5, #1
 8001f42:	2100      	movs	r1, #0
 8001f44:	44a8      	add	r8, r5
 8001f46:	e66a      	b.n	8001c1e <__aeabi_ddiv+0x266>
 8001f48:	075d      	lsls	r5, r3, #29
 8001f4a:	025b      	lsls	r3, r3, #9
 8001f4c:	0b1a      	lsrs	r2, r3, #12
 8001f4e:	08c9      	lsrs	r1, r1, #3
 8001f50:	2300      	movs	r3, #0
 8001f52:	430d      	orrs	r5, r1
 8001f54:	e587      	b.n	8001a66 <__aeabi_ddiv+0xae>
 8001f56:	9900      	ldr	r1, [sp, #0]
 8001f58:	3d02      	subs	r5, #2
 8001f5a:	004a      	lsls	r2, r1, #1
 8001f5c:	428a      	cmp	r2, r1
 8001f5e:	41bf      	sbcs	r7, r7
 8001f60:	427f      	negs	r7, r7
 8001f62:	193f      	adds	r7, r7, r4
 8001f64:	19f6      	adds	r6, r6, r7
 8001f66:	9200      	str	r2, [sp, #0]
 8001f68:	e7dd      	b.n	8001f26 <__aeabi_ddiv+0x56e>
 8001f6a:	2280      	movs	r2, #128	; 0x80
 8001f6c:	4643      	mov	r3, r8
 8001f6e:	0312      	lsls	r2, r2, #12
 8001f70:	431a      	orrs	r2, r3
 8001f72:	0312      	lsls	r2, r2, #12
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <__aeabi_ddiv+0x5cc>)
 8001f76:	0b12      	lsrs	r2, r2, #12
 8001f78:	e575      	b.n	8001a66 <__aeabi_ddiv+0xae>
 8001f7a:	9900      	ldr	r1, [sp, #0]
 8001f7c:	4299      	cmp	r1, r3
 8001f7e:	d3ea      	bcc.n	8001f56 <__aeabi_ddiv+0x59e>
 8001f80:	0015      	movs	r5, r2
 8001f82:	e7d3      	b.n	8001f2c <__aeabi_ddiv+0x574>
 8001f84:	000007ff 	.word	0x000007ff
 8001f88:	0000043e 	.word	0x0000043e
 8001f8c:	0000041e 	.word	0x0000041e
 8001f90:	000003ff 	.word	0x000003ff

08001f94 <__eqdf2>:
 8001f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f96:	464e      	mov	r6, r9
 8001f98:	4645      	mov	r5, r8
 8001f9a:	46de      	mov	lr, fp
 8001f9c:	4657      	mov	r7, sl
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	b5e0      	push	{r5, r6, r7, lr}
 8001fa2:	0017      	movs	r7, r2
 8001fa4:	031a      	lsls	r2, r3, #12
 8001fa6:	0b12      	lsrs	r2, r2, #12
 8001fa8:	0005      	movs	r5, r0
 8001faa:	4684      	mov	ip, r0
 8001fac:	4819      	ldr	r0, [pc, #100]	; (8002014 <__eqdf2+0x80>)
 8001fae:	030e      	lsls	r6, r1, #12
 8001fb0:	004c      	lsls	r4, r1, #1
 8001fb2:	4691      	mov	r9, r2
 8001fb4:	005a      	lsls	r2, r3, #1
 8001fb6:	0fdb      	lsrs	r3, r3, #31
 8001fb8:	469b      	mov	fp, r3
 8001fba:	0b36      	lsrs	r6, r6, #12
 8001fbc:	0d64      	lsrs	r4, r4, #21
 8001fbe:	0fc9      	lsrs	r1, r1, #31
 8001fc0:	0d52      	lsrs	r2, r2, #21
 8001fc2:	4284      	cmp	r4, r0
 8001fc4:	d019      	beq.n	8001ffa <__eqdf2+0x66>
 8001fc6:	4282      	cmp	r2, r0
 8001fc8:	d010      	beq.n	8001fec <__eqdf2+0x58>
 8001fca:	2001      	movs	r0, #1
 8001fcc:	4294      	cmp	r4, r2
 8001fce:	d10e      	bne.n	8001fee <__eqdf2+0x5a>
 8001fd0:	454e      	cmp	r6, r9
 8001fd2:	d10c      	bne.n	8001fee <__eqdf2+0x5a>
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	45c4      	cmp	ip, r8
 8001fd8:	d109      	bne.n	8001fee <__eqdf2+0x5a>
 8001fda:	4559      	cmp	r1, fp
 8001fdc:	d017      	beq.n	800200e <__eqdf2+0x7a>
 8001fde:	2c00      	cmp	r4, #0
 8001fe0:	d105      	bne.n	8001fee <__eqdf2+0x5a>
 8001fe2:	0030      	movs	r0, r6
 8001fe4:	4328      	orrs	r0, r5
 8001fe6:	1e43      	subs	r3, r0, #1
 8001fe8:	4198      	sbcs	r0, r3
 8001fea:	e000      	b.n	8001fee <__eqdf2+0x5a>
 8001fec:	2001      	movs	r0, #1
 8001fee:	bcf0      	pop	{r4, r5, r6, r7}
 8001ff0:	46bb      	mov	fp, r7
 8001ff2:	46b2      	mov	sl, r6
 8001ff4:	46a9      	mov	r9, r5
 8001ff6:	46a0      	mov	r8, r4
 8001ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ffa:	0033      	movs	r3, r6
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	432b      	orrs	r3, r5
 8002000:	d1f5      	bne.n	8001fee <__eqdf2+0x5a>
 8002002:	42a2      	cmp	r2, r4
 8002004:	d1f3      	bne.n	8001fee <__eqdf2+0x5a>
 8002006:	464b      	mov	r3, r9
 8002008:	433b      	orrs	r3, r7
 800200a:	d1f0      	bne.n	8001fee <__eqdf2+0x5a>
 800200c:	e7e2      	b.n	8001fd4 <__eqdf2+0x40>
 800200e:	2000      	movs	r0, #0
 8002010:	e7ed      	b.n	8001fee <__eqdf2+0x5a>
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	000007ff 	.word	0x000007ff

08002018 <__gedf2>:
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	4647      	mov	r7, r8
 800201c:	46ce      	mov	lr, r9
 800201e:	0004      	movs	r4, r0
 8002020:	0018      	movs	r0, r3
 8002022:	0016      	movs	r6, r2
 8002024:	031b      	lsls	r3, r3, #12
 8002026:	0b1b      	lsrs	r3, r3, #12
 8002028:	4d2d      	ldr	r5, [pc, #180]	; (80020e0 <__gedf2+0xc8>)
 800202a:	004a      	lsls	r2, r1, #1
 800202c:	4699      	mov	r9, r3
 800202e:	b580      	push	{r7, lr}
 8002030:	0043      	lsls	r3, r0, #1
 8002032:	030f      	lsls	r7, r1, #12
 8002034:	46a4      	mov	ip, r4
 8002036:	46b0      	mov	r8, r6
 8002038:	0b3f      	lsrs	r7, r7, #12
 800203a:	0d52      	lsrs	r2, r2, #21
 800203c:	0fc9      	lsrs	r1, r1, #31
 800203e:	0d5b      	lsrs	r3, r3, #21
 8002040:	0fc0      	lsrs	r0, r0, #31
 8002042:	42aa      	cmp	r2, r5
 8002044:	d021      	beq.n	800208a <__gedf2+0x72>
 8002046:	42ab      	cmp	r3, r5
 8002048:	d013      	beq.n	8002072 <__gedf2+0x5a>
 800204a:	2a00      	cmp	r2, #0
 800204c:	d122      	bne.n	8002094 <__gedf2+0x7c>
 800204e:	433c      	orrs	r4, r7
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <__gedf2+0x42>
 8002054:	464d      	mov	r5, r9
 8002056:	432e      	orrs	r6, r5
 8002058:	d022      	beq.n	80020a0 <__gedf2+0x88>
 800205a:	2c00      	cmp	r4, #0
 800205c:	d010      	beq.n	8002080 <__gedf2+0x68>
 800205e:	4281      	cmp	r1, r0
 8002060:	d022      	beq.n	80020a8 <__gedf2+0x90>
 8002062:	2002      	movs	r0, #2
 8002064:	3901      	subs	r1, #1
 8002066:	4008      	ands	r0, r1
 8002068:	3801      	subs	r0, #1
 800206a:	bcc0      	pop	{r6, r7}
 800206c:	46b9      	mov	r9, r7
 800206e:	46b0      	mov	r8, r6
 8002070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002072:	464d      	mov	r5, r9
 8002074:	432e      	orrs	r6, r5
 8002076:	d129      	bne.n	80020cc <__gedf2+0xb4>
 8002078:	2a00      	cmp	r2, #0
 800207a:	d1f0      	bne.n	800205e <__gedf2+0x46>
 800207c:	433c      	orrs	r4, r7
 800207e:	d1ee      	bne.n	800205e <__gedf2+0x46>
 8002080:	2800      	cmp	r0, #0
 8002082:	d1f2      	bne.n	800206a <__gedf2+0x52>
 8002084:	2001      	movs	r0, #1
 8002086:	4240      	negs	r0, r0
 8002088:	e7ef      	b.n	800206a <__gedf2+0x52>
 800208a:	003d      	movs	r5, r7
 800208c:	4325      	orrs	r5, r4
 800208e:	d11d      	bne.n	80020cc <__gedf2+0xb4>
 8002090:	4293      	cmp	r3, r2
 8002092:	d0ee      	beq.n	8002072 <__gedf2+0x5a>
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1e2      	bne.n	800205e <__gedf2+0x46>
 8002098:	464c      	mov	r4, r9
 800209a:	4326      	orrs	r6, r4
 800209c:	d1df      	bne.n	800205e <__gedf2+0x46>
 800209e:	e7e0      	b.n	8002062 <__gedf2+0x4a>
 80020a0:	2000      	movs	r0, #0
 80020a2:	2c00      	cmp	r4, #0
 80020a4:	d0e1      	beq.n	800206a <__gedf2+0x52>
 80020a6:	e7dc      	b.n	8002062 <__gedf2+0x4a>
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dc0a      	bgt.n	80020c2 <__gedf2+0xaa>
 80020ac:	dbe8      	blt.n	8002080 <__gedf2+0x68>
 80020ae:	454f      	cmp	r7, r9
 80020b0:	d8d7      	bhi.n	8002062 <__gedf2+0x4a>
 80020b2:	d00e      	beq.n	80020d2 <__gedf2+0xba>
 80020b4:	2000      	movs	r0, #0
 80020b6:	454f      	cmp	r7, r9
 80020b8:	d2d7      	bcs.n	800206a <__gedf2+0x52>
 80020ba:	2900      	cmp	r1, #0
 80020bc:	d0e2      	beq.n	8002084 <__gedf2+0x6c>
 80020be:	0008      	movs	r0, r1
 80020c0:	e7d3      	b.n	800206a <__gedf2+0x52>
 80020c2:	4243      	negs	r3, r0
 80020c4:	4158      	adcs	r0, r3
 80020c6:	0040      	lsls	r0, r0, #1
 80020c8:	3801      	subs	r0, #1
 80020ca:	e7ce      	b.n	800206a <__gedf2+0x52>
 80020cc:	2002      	movs	r0, #2
 80020ce:	4240      	negs	r0, r0
 80020d0:	e7cb      	b.n	800206a <__gedf2+0x52>
 80020d2:	45c4      	cmp	ip, r8
 80020d4:	d8c5      	bhi.n	8002062 <__gedf2+0x4a>
 80020d6:	2000      	movs	r0, #0
 80020d8:	45c4      	cmp	ip, r8
 80020da:	d2c6      	bcs.n	800206a <__gedf2+0x52>
 80020dc:	e7ed      	b.n	80020ba <__gedf2+0xa2>
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	000007ff 	.word	0x000007ff

080020e4 <__ledf2>:
 80020e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e6:	4647      	mov	r7, r8
 80020e8:	46ce      	mov	lr, r9
 80020ea:	0004      	movs	r4, r0
 80020ec:	0018      	movs	r0, r3
 80020ee:	0016      	movs	r6, r2
 80020f0:	031b      	lsls	r3, r3, #12
 80020f2:	0b1b      	lsrs	r3, r3, #12
 80020f4:	4d2c      	ldr	r5, [pc, #176]	; (80021a8 <__ledf2+0xc4>)
 80020f6:	004a      	lsls	r2, r1, #1
 80020f8:	4699      	mov	r9, r3
 80020fa:	b580      	push	{r7, lr}
 80020fc:	0043      	lsls	r3, r0, #1
 80020fe:	030f      	lsls	r7, r1, #12
 8002100:	46a4      	mov	ip, r4
 8002102:	46b0      	mov	r8, r6
 8002104:	0b3f      	lsrs	r7, r7, #12
 8002106:	0d52      	lsrs	r2, r2, #21
 8002108:	0fc9      	lsrs	r1, r1, #31
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	0fc0      	lsrs	r0, r0, #31
 800210e:	42aa      	cmp	r2, r5
 8002110:	d00d      	beq.n	800212e <__ledf2+0x4a>
 8002112:	42ab      	cmp	r3, r5
 8002114:	d010      	beq.n	8002138 <__ledf2+0x54>
 8002116:	2a00      	cmp	r2, #0
 8002118:	d127      	bne.n	800216a <__ledf2+0x86>
 800211a:	433c      	orrs	r4, r7
 800211c:	2b00      	cmp	r3, #0
 800211e:	d111      	bne.n	8002144 <__ledf2+0x60>
 8002120:	464d      	mov	r5, r9
 8002122:	432e      	orrs	r6, r5
 8002124:	d10e      	bne.n	8002144 <__ledf2+0x60>
 8002126:	2000      	movs	r0, #0
 8002128:	2c00      	cmp	r4, #0
 800212a:	d015      	beq.n	8002158 <__ledf2+0x74>
 800212c:	e00e      	b.n	800214c <__ledf2+0x68>
 800212e:	003d      	movs	r5, r7
 8002130:	4325      	orrs	r5, r4
 8002132:	d110      	bne.n	8002156 <__ledf2+0x72>
 8002134:	4293      	cmp	r3, r2
 8002136:	d118      	bne.n	800216a <__ledf2+0x86>
 8002138:	464d      	mov	r5, r9
 800213a:	432e      	orrs	r6, r5
 800213c:	d10b      	bne.n	8002156 <__ledf2+0x72>
 800213e:	2a00      	cmp	r2, #0
 8002140:	d102      	bne.n	8002148 <__ledf2+0x64>
 8002142:	433c      	orrs	r4, r7
 8002144:	2c00      	cmp	r4, #0
 8002146:	d00b      	beq.n	8002160 <__ledf2+0x7c>
 8002148:	4281      	cmp	r1, r0
 800214a:	d014      	beq.n	8002176 <__ledf2+0x92>
 800214c:	2002      	movs	r0, #2
 800214e:	3901      	subs	r1, #1
 8002150:	4008      	ands	r0, r1
 8002152:	3801      	subs	r0, #1
 8002154:	e000      	b.n	8002158 <__ledf2+0x74>
 8002156:	2002      	movs	r0, #2
 8002158:	bcc0      	pop	{r6, r7}
 800215a:	46b9      	mov	r9, r7
 800215c:	46b0      	mov	r8, r6
 800215e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002160:	2800      	cmp	r0, #0
 8002162:	d1f9      	bne.n	8002158 <__ledf2+0x74>
 8002164:	2001      	movs	r0, #1
 8002166:	4240      	negs	r0, r0
 8002168:	e7f6      	b.n	8002158 <__ledf2+0x74>
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1ec      	bne.n	8002148 <__ledf2+0x64>
 800216e:	464c      	mov	r4, r9
 8002170:	4326      	orrs	r6, r4
 8002172:	d1e9      	bne.n	8002148 <__ledf2+0x64>
 8002174:	e7ea      	b.n	800214c <__ledf2+0x68>
 8002176:	429a      	cmp	r2, r3
 8002178:	dd04      	ble.n	8002184 <__ledf2+0xa0>
 800217a:	4243      	negs	r3, r0
 800217c:	4158      	adcs	r0, r3
 800217e:	0040      	lsls	r0, r0, #1
 8002180:	3801      	subs	r0, #1
 8002182:	e7e9      	b.n	8002158 <__ledf2+0x74>
 8002184:	429a      	cmp	r2, r3
 8002186:	dbeb      	blt.n	8002160 <__ledf2+0x7c>
 8002188:	454f      	cmp	r7, r9
 800218a:	d8df      	bhi.n	800214c <__ledf2+0x68>
 800218c:	d006      	beq.n	800219c <__ledf2+0xb8>
 800218e:	2000      	movs	r0, #0
 8002190:	454f      	cmp	r7, r9
 8002192:	d2e1      	bcs.n	8002158 <__ledf2+0x74>
 8002194:	2900      	cmp	r1, #0
 8002196:	d0e5      	beq.n	8002164 <__ledf2+0x80>
 8002198:	0008      	movs	r0, r1
 800219a:	e7dd      	b.n	8002158 <__ledf2+0x74>
 800219c:	45c4      	cmp	ip, r8
 800219e:	d8d5      	bhi.n	800214c <__ledf2+0x68>
 80021a0:	2000      	movs	r0, #0
 80021a2:	45c4      	cmp	ip, r8
 80021a4:	d2d8      	bcs.n	8002158 <__ledf2+0x74>
 80021a6:	e7f5      	b.n	8002194 <__ledf2+0xb0>
 80021a8:	000007ff 	.word	0x000007ff

080021ac <__aeabi_dmul>:
 80021ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ae:	4645      	mov	r5, r8
 80021b0:	46de      	mov	lr, fp
 80021b2:	4657      	mov	r7, sl
 80021b4:	464e      	mov	r6, r9
 80021b6:	b5e0      	push	{r5, r6, r7, lr}
 80021b8:	001f      	movs	r7, r3
 80021ba:	030b      	lsls	r3, r1, #12
 80021bc:	0b1b      	lsrs	r3, r3, #12
 80021be:	469b      	mov	fp, r3
 80021c0:	004d      	lsls	r5, r1, #1
 80021c2:	0fcb      	lsrs	r3, r1, #31
 80021c4:	0004      	movs	r4, r0
 80021c6:	4691      	mov	r9, r2
 80021c8:	4698      	mov	r8, r3
 80021ca:	b087      	sub	sp, #28
 80021cc:	0d6d      	lsrs	r5, r5, #21
 80021ce:	d100      	bne.n	80021d2 <__aeabi_dmul+0x26>
 80021d0:	e1cd      	b.n	800256e <__aeabi_dmul+0x3c2>
 80021d2:	4bce      	ldr	r3, [pc, #824]	; (800250c <__aeabi_dmul+0x360>)
 80021d4:	429d      	cmp	r5, r3
 80021d6:	d100      	bne.n	80021da <__aeabi_dmul+0x2e>
 80021d8:	e1e9      	b.n	80025ae <__aeabi_dmul+0x402>
 80021da:	465a      	mov	r2, fp
 80021dc:	0f43      	lsrs	r3, r0, #29
 80021de:	00d2      	lsls	r2, r2, #3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	2280      	movs	r2, #128	; 0x80
 80021e4:	0412      	lsls	r2, r2, #16
 80021e6:	431a      	orrs	r2, r3
 80021e8:	00c3      	lsls	r3, r0, #3
 80021ea:	469a      	mov	sl, r3
 80021ec:	4bc8      	ldr	r3, [pc, #800]	; (8002510 <__aeabi_dmul+0x364>)
 80021ee:	4693      	mov	fp, r2
 80021f0:	469c      	mov	ip, r3
 80021f2:	2300      	movs	r3, #0
 80021f4:	2600      	movs	r6, #0
 80021f6:	4465      	add	r5, ip
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	033c      	lsls	r4, r7, #12
 80021fc:	007b      	lsls	r3, r7, #1
 80021fe:	4648      	mov	r0, r9
 8002200:	0b24      	lsrs	r4, r4, #12
 8002202:	0d5b      	lsrs	r3, r3, #21
 8002204:	0fff      	lsrs	r7, r7, #31
 8002206:	2b00      	cmp	r3, #0
 8002208:	d100      	bne.n	800220c <__aeabi_dmul+0x60>
 800220a:	e189      	b.n	8002520 <__aeabi_dmul+0x374>
 800220c:	4abf      	ldr	r2, [pc, #764]	; (800250c <__aeabi_dmul+0x360>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <__aeabi_dmul+0x9a>
 8002212:	0f42      	lsrs	r2, r0, #29
 8002214:	00e4      	lsls	r4, r4, #3
 8002216:	4322      	orrs	r2, r4
 8002218:	2480      	movs	r4, #128	; 0x80
 800221a:	0424      	lsls	r4, r4, #16
 800221c:	4314      	orrs	r4, r2
 800221e:	4abc      	ldr	r2, [pc, #752]	; (8002510 <__aeabi_dmul+0x364>)
 8002220:	2100      	movs	r1, #0
 8002222:	4694      	mov	ip, r2
 8002224:	4642      	mov	r2, r8
 8002226:	4463      	add	r3, ip
 8002228:	195b      	adds	r3, r3, r5
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	9b01      	ldr	r3, [sp, #4]
 800222e:	407a      	eors	r2, r7
 8002230:	3301      	adds	r3, #1
 8002232:	00c0      	lsls	r0, r0, #3
 8002234:	b2d2      	uxtb	r2, r2
 8002236:	9302      	str	r3, [sp, #8]
 8002238:	2e0a      	cmp	r6, #10
 800223a:	dd1c      	ble.n	8002276 <__aeabi_dmul+0xca>
 800223c:	003a      	movs	r2, r7
 800223e:	2e0b      	cmp	r6, #11
 8002240:	d05e      	beq.n	8002300 <__aeabi_dmul+0x154>
 8002242:	4647      	mov	r7, r8
 8002244:	e056      	b.n	80022f4 <__aeabi_dmul+0x148>
 8002246:	4649      	mov	r1, r9
 8002248:	4bb0      	ldr	r3, [pc, #704]	; (800250c <__aeabi_dmul+0x360>)
 800224a:	4321      	orrs	r1, r4
 800224c:	18eb      	adds	r3, r5, r3
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2900      	cmp	r1, #0
 8002252:	d12a      	bne.n	80022aa <__aeabi_dmul+0xfe>
 8002254:	2080      	movs	r0, #128	; 0x80
 8002256:	2202      	movs	r2, #2
 8002258:	0100      	lsls	r0, r0, #4
 800225a:	002b      	movs	r3, r5
 800225c:	4684      	mov	ip, r0
 800225e:	4316      	orrs	r6, r2
 8002260:	4642      	mov	r2, r8
 8002262:	4463      	add	r3, ip
 8002264:	407a      	eors	r2, r7
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	9302      	str	r3, [sp, #8]
 800226a:	2e0a      	cmp	r6, #10
 800226c:	dd00      	ble.n	8002270 <__aeabi_dmul+0xc4>
 800226e:	e231      	b.n	80026d4 <__aeabi_dmul+0x528>
 8002270:	2000      	movs	r0, #0
 8002272:	2400      	movs	r4, #0
 8002274:	2102      	movs	r1, #2
 8002276:	2e02      	cmp	r6, #2
 8002278:	dc26      	bgt.n	80022c8 <__aeabi_dmul+0x11c>
 800227a:	3e01      	subs	r6, #1
 800227c:	2e01      	cmp	r6, #1
 800227e:	d852      	bhi.n	8002326 <__aeabi_dmul+0x17a>
 8002280:	2902      	cmp	r1, #2
 8002282:	d04c      	beq.n	800231e <__aeabi_dmul+0x172>
 8002284:	2901      	cmp	r1, #1
 8002286:	d000      	beq.n	800228a <__aeabi_dmul+0xde>
 8002288:	e118      	b.n	80024bc <__aeabi_dmul+0x310>
 800228a:	2300      	movs	r3, #0
 800228c:	2400      	movs	r4, #0
 800228e:	2500      	movs	r5, #0
 8002290:	051b      	lsls	r3, r3, #20
 8002292:	4323      	orrs	r3, r4
 8002294:	07d2      	lsls	r2, r2, #31
 8002296:	4313      	orrs	r3, r2
 8002298:	0028      	movs	r0, r5
 800229a:	0019      	movs	r1, r3
 800229c:	b007      	add	sp, #28
 800229e:	bcf0      	pop	{r4, r5, r6, r7}
 80022a0:	46bb      	mov	fp, r7
 80022a2:	46b2      	mov	sl, r6
 80022a4:	46a9      	mov	r9, r5
 80022a6:	46a0      	mov	r8, r4
 80022a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	2203      	movs	r2, #3
 80022ae:	0109      	lsls	r1, r1, #4
 80022b0:	002b      	movs	r3, r5
 80022b2:	468c      	mov	ip, r1
 80022b4:	4316      	orrs	r6, r2
 80022b6:	4642      	mov	r2, r8
 80022b8:	4463      	add	r3, ip
 80022ba:	407a      	eors	r2, r7
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	9302      	str	r3, [sp, #8]
 80022c0:	2e0a      	cmp	r6, #10
 80022c2:	dd00      	ble.n	80022c6 <__aeabi_dmul+0x11a>
 80022c4:	e228      	b.n	8002718 <__aeabi_dmul+0x56c>
 80022c6:	2103      	movs	r1, #3
 80022c8:	2501      	movs	r5, #1
 80022ca:	40b5      	lsls	r5, r6
 80022cc:	46ac      	mov	ip, r5
 80022ce:	26a6      	movs	r6, #166	; 0xa6
 80022d0:	4663      	mov	r3, ip
 80022d2:	00f6      	lsls	r6, r6, #3
 80022d4:	4035      	ands	r5, r6
 80022d6:	4233      	tst	r3, r6
 80022d8:	d10b      	bne.n	80022f2 <__aeabi_dmul+0x146>
 80022da:	2690      	movs	r6, #144	; 0x90
 80022dc:	00b6      	lsls	r6, r6, #2
 80022de:	4233      	tst	r3, r6
 80022e0:	d118      	bne.n	8002314 <__aeabi_dmul+0x168>
 80022e2:	3eb9      	subs	r6, #185	; 0xb9
 80022e4:	3eff      	subs	r6, #255	; 0xff
 80022e6:	421e      	tst	r6, r3
 80022e8:	d01d      	beq.n	8002326 <__aeabi_dmul+0x17a>
 80022ea:	46a3      	mov	fp, r4
 80022ec:	4682      	mov	sl, r0
 80022ee:	9100      	str	r1, [sp, #0]
 80022f0:	e000      	b.n	80022f4 <__aeabi_dmul+0x148>
 80022f2:	0017      	movs	r7, r2
 80022f4:	9900      	ldr	r1, [sp, #0]
 80022f6:	003a      	movs	r2, r7
 80022f8:	2902      	cmp	r1, #2
 80022fa:	d010      	beq.n	800231e <__aeabi_dmul+0x172>
 80022fc:	465c      	mov	r4, fp
 80022fe:	4650      	mov	r0, sl
 8002300:	2903      	cmp	r1, #3
 8002302:	d1bf      	bne.n	8002284 <__aeabi_dmul+0xd8>
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	031b      	lsls	r3, r3, #12
 8002308:	431c      	orrs	r4, r3
 800230a:	0324      	lsls	r4, r4, #12
 800230c:	0005      	movs	r5, r0
 800230e:	4b7f      	ldr	r3, [pc, #508]	; (800250c <__aeabi_dmul+0x360>)
 8002310:	0b24      	lsrs	r4, r4, #12
 8002312:	e7bd      	b.n	8002290 <__aeabi_dmul+0xe4>
 8002314:	2480      	movs	r4, #128	; 0x80
 8002316:	2200      	movs	r2, #0
 8002318:	4b7c      	ldr	r3, [pc, #496]	; (800250c <__aeabi_dmul+0x360>)
 800231a:	0324      	lsls	r4, r4, #12
 800231c:	e7b8      	b.n	8002290 <__aeabi_dmul+0xe4>
 800231e:	2400      	movs	r4, #0
 8002320:	2500      	movs	r5, #0
 8002322:	4b7a      	ldr	r3, [pc, #488]	; (800250c <__aeabi_dmul+0x360>)
 8002324:	e7b4      	b.n	8002290 <__aeabi_dmul+0xe4>
 8002326:	4653      	mov	r3, sl
 8002328:	041e      	lsls	r6, r3, #16
 800232a:	0c36      	lsrs	r6, r6, #16
 800232c:	0c1f      	lsrs	r7, r3, #16
 800232e:	0033      	movs	r3, r6
 8002330:	0c01      	lsrs	r1, r0, #16
 8002332:	0400      	lsls	r0, r0, #16
 8002334:	0c00      	lsrs	r0, r0, #16
 8002336:	4343      	muls	r3, r0
 8002338:	4698      	mov	r8, r3
 800233a:	0003      	movs	r3, r0
 800233c:	437b      	muls	r3, r7
 800233e:	4699      	mov	r9, r3
 8002340:	0033      	movs	r3, r6
 8002342:	434b      	muls	r3, r1
 8002344:	469c      	mov	ip, r3
 8002346:	4643      	mov	r3, r8
 8002348:	000d      	movs	r5, r1
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	469a      	mov	sl, r3
 800234e:	437d      	muls	r5, r7
 8002350:	44cc      	add	ip, r9
 8002352:	44d4      	add	ip, sl
 8002354:	9500      	str	r5, [sp, #0]
 8002356:	45e1      	cmp	r9, ip
 8002358:	d904      	bls.n	8002364 <__aeabi_dmul+0x1b8>
 800235a:	2380      	movs	r3, #128	; 0x80
 800235c:	025b      	lsls	r3, r3, #9
 800235e:	4699      	mov	r9, r3
 8002360:	444d      	add	r5, r9
 8002362:	9500      	str	r5, [sp, #0]
 8002364:	4663      	mov	r3, ip
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	001d      	movs	r5, r3
 800236a:	4663      	mov	r3, ip
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	469c      	mov	ip, r3
 8002370:	4643      	mov	r3, r8
 8002372:	041b      	lsls	r3, r3, #16
 8002374:	0c1b      	lsrs	r3, r3, #16
 8002376:	4698      	mov	r8, r3
 8002378:	4663      	mov	r3, ip
 800237a:	4443      	add	r3, r8
 800237c:	9303      	str	r3, [sp, #12]
 800237e:	0c23      	lsrs	r3, r4, #16
 8002380:	4698      	mov	r8, r3
 8002382:	0033      	movs	r3, r6
 8002384:	0424      	lsls	r4, r4, #16
 8002386:	0c24      	lsrs	r4, r4, #16
 8002388:	4363      	muls	r3, r4
 800238a:	469c      	mov	ip, r3
 800238c:	0023      	movs	r3, r4
 800238e:	437b      	muls	r3, r7
 8002390:	4699      	mov	r9, r3
 8002392:	4643      	mov	r3, r8
 8002394:	435e      	muls	r6, r3
 8002396:	435f      	muls	r7, r3
 8002398:	444e      	add	r6, r9
 800239a:	4663      	mov	r3, ip
 800239c:	46b2      	mov	sl, r6
 800239e:	0c1e      	lsrs	r6, r3, #16
 80023a0:	4456      	add	r6, sl
 80023a2:	45b1      	cmp	r9, r6
 80023a4:	d903      	bls.n	80023ae <__aeabi_dmul+0x202>
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	025b      	lsls	r3, r3, #9
 80023aa:	4699      	mov	r9, r3
 80023ac:	444f      	add	r7, r9
 80023ae:	0c33      	lsrs	r3, r6, #16
 80023b0:	4699      	mov	r9, r3
 80023b2:	003b      	movs	r3, r7
 80023b4:	444b      	add	r3, r9
 80023b6:	9305      	str	r3, [sp, #20]
 80023b8:	4663      	mov	r3, ip
 80023ba:	46ac      	mov	ip, r5
 80023bc:	041f      	lsls	r7, r3, #16
 80023be:	0c3f      	lsrs	r7, r7, #16
 80023c0:	0436      	lsls	r6, r6, #16
 80023c2:	19f6      	adds	r6, r6, r7
 80023c4:	44b4      	add	ip, r6
 80023c6:	4663      	mov	r3, ip
 80023c8:	9304      	str	r3, [sp, #16]
 80023ca:	465b      	mov	r3, fp
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	469c      	mov	ip, r3
 80023d0:	465b      	mov	r3, fp
 80023d2:	041f      	lsls	r7, r3, #16
 80023d4:	0c3f      	lsrs	r7, r7, #16
 80023d6:	003b      	movs	r3, r7
 80023d8:	4343      	muls	r3, r0
 80023da:	4699      	mov	r9, r3
 80023dc:	4663      	mov	r3, ip
 80023de:	4343      	muls	r3, r0
 80023e0:	469a      	mov	sl, r3
 80023e2:	464b      	mov	r3, r9
 80023e4:	4660      	mov	r0, ip
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	469b      	mov	fp, r3
 80023ea:	4348      	muls	r0, r1
 80023ec:	4379      	muls	r1, r7
 80023ee:	4451      	add	r1, sl
 80023f0:	4459      	add	r1, fp
 80023f2:	458a      	cmp	sl, r1
 80023f4:	d903      	bls.n	80023fe <__aeabi_dmul+0x252>
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	025b      	lsls	r3, r3, #9
 80023fa:	469a      	mov	sl, r3
 80023fc:	4450      	add	r0, sl
 80023fe:	0c0b      	lsrs	r3, r1, #16
 8002400:	469a      	mov	sl, r3
 8002402:	464b      	mov	r3, r9
 8002404:	041b      	lsls	r3, r3, #16
 8002406:	0c1b      	lsrs	r3, r3, #16
 8002408:	4699      	mov	r9, r3
 800240a:	003b      	movs	r3, r7
 800240c:	4363      	muls	r3, r4
 800240e:	0409      	lsls	r1, r1, #16
 8002410:	4645      	mov	r5, r8
 8002412:	4449      	add	r1, r9
 8002414:	4699      	mov	r9, r3
 8002416:	4663      	mov	r3, ip
 8002418:	435c      	muls	r4, r3
 800241a:	436b      	muls	r3, r5
 800241c:	469c      	mov	ip, r3
 800241e:	464b      	mov	r3, r9
 8002420:	0c1b      	lsrs	r3, r3, #16
 8002422:	4698      	mov	r8, r3
 8002424:	436f      	muls	r7, r5
 8002426:	193f      	adds	r7, r7, r4
 8002428:	4447      	add	r7, r8
 800242a:	4450      	add	r0, sl
 800242c:	42bc      	cmp	r4, r7
 800242e:	d903      	bls.n	8002438 <__aeabi_dmul+0x28c>
 8002430:	2380      	movs	r3, #128	; 0x80
 8002432:	025b      	lsls	r3, r3, #9
 8002434:	4698      	mov	r8, r3
 8002436:	44c4      	add	ip, r8
 8002438:	9b04      	ldr	r3, [sp, #16]
 800243a:	9d00      	ldr	r5, [sp, #0]
 800243c:	4698      	mov	r8, r3
 800243e:	4445      	add	r5, r8
 8002440:	42b5      	cmp	r5, r6
 8002442:	41b6      	sbcs	r6, r6
 8002444:	4273      	negs	r3, r6
 8002446:	4698      	mov	r8, r3
 8002448:	464b      	mov	r3, r9
 800244a:	041e      	lsls	r6, r3, #16
 800244c:	9b05      	ldr	r3, [sp, #20]
 800244e:	043c      	lsls	r4, r7, #16
 8002450:	4699      	mov	r9, r3
 8002452:	0c36      	lsrs	r6, r6, #16
 8002454:	19a4      	adds	r4, r4, r6
 8002456:	444c      	add	r4, r9
 8002458:	46a1      	mov	r9, r4
 800245a:	4683      	mov	fp, r0
 800245c:	186e      	adds	r6, r5, r1
 800245e:	44c1      	add	r9, r8
 8002460:	428e      	cmp	r6, r1
 8002462:	4189      	sbcs	r1, r1
 8002464:	44cb      	add	fp, r9
 8002466:	465d      	mov	r5, fp
 8002468:	4249      	negs	r1, r1
 800246a:	186d      	adds	r5, r5, r1
 800246c:	429c      	cmp	r4, r3
 800246e:	41a4      	sbcs	r4, r4
 8002470:	45c1      	cmp	r9, r8
 8002472:	419b      	sbcs	r3, r3
 8002474:	4583      	cmp	fp, r0
 8002476:	4180      	sbcs	r0, r0
 8002478:	428d      	cmp	r5, r1
 800247a:	4189      	sbcs	r1, r1
 800247c:	425b      	negs	r3, r3
 800247e:	4264      	negs	r4, r4
 8002480:	431c      	orrs	r4, r3
 8002482:	4240      	negs	r0, r0
 8002484:	9b03      	ldr	r3, [sp, #12]
 8002486:	4249      	negs	r1, r1
 8002488:	4301      	orrs	r1, r0
 800248a:	0270      	lsls	r0, r6, #9
 800248c:	0c3f      	lsrs	r7, r7, #16
 800248e:	4318      	orrs	r0, r3
 8002490:	19e4      	adds	r4, r4, r7
 8002492:	1e47      	subs	r7, r0, #1
 8002494:	41b8      	sbcs	r0, r7
 8002496:	1864      	adds	r4, r4, r1
 8002498:	4464      	add	r4, ip
 800249a:	0df6      	lsrs	r6, r6, #23
 800249c:	0261      	lsls	r1, r4, #9
 800249e:	4330      	orrs	r0, r6
 80024a0:	0dec      	lsrs	r4, r5, #23
 80024a2:	026e      	lsls	r6, r5, #9
 80024a4:	430c      	orrs	r4, r1
 80024a6:	4330      	orrs	r0, r6
 80024a8:	01c9      	lsls	r1, r1, #7
 80024aa:	d400      	bmi.n	80024ae <__aeabi_dmul+0x302>
 80024ac:	e0f1      	b.n	8002692 <__aeabi_dmul+0x4e6>
 80024ae:	2101      	movs	r1, #1
 80024b0:	0843      	lsrs	r3, r0, #1
 80024b2:	4001      	ands	r1, r0
 80024b4:	430b      	orrs	r3, r1
 80024b6:	07e0      	lsls	r0, r4, #31
 80024b8:	4318      	orrs	r0, r3
 80024ba:	0864      	lsrs	r4, r4, #1
 80024bc:	4915      	ldr	r1, [pc, #84]	; (8002514 <__aeabi_dmul+0x368>)
 80024be:	9b02      	ldr	r3, [sp, #8]
 80024c0:	468c      	mov	ip, r1
 80024c2:	4463      	add	r3, ip
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	dc00      	bgt.n	80024ca <__aeabi_dmul+0x31e>
 80024c8:	e097      	b.n	80025fa <__aeabi_dmul+0x44e>
 80024ca:	0741      	lsls	r1, r0, #29
 80024cc:	d009      	beq.n	80024e2 <__aeabi_dmul+0x336>
 80024ce:	210f      	movs	r1, #15
 80024d0:	4001      	ands	r1, r0
 80024d2:	2904      	cmp	r1, #4
 80024d4:	d005      	beq.n	80024e2 <__aeabi_dmul+0x336>
 80024d6:	1d01      	adds	r1, r0, #4
 80024d8:	4281      	cmp	r1, r0
 80024da:	4180      	sbcs	r0, r0
 80024dc:	4240      	negs	r0, r0
 80024de:	1824      	adds	r4, r4, r0
 80024e0:	0008      	movs	r0, r1
 80024e2:	01e1      	lsls	r1, r4, #7
 80024e4:	d506      	bpl.n	80024f4 <__aeabi_dmul+0x348>
 80024e6:	2180      	movs	r1, #128	; 0x80
 80024e8:	00c9      	lsls	r1, r1, #3
 80024ea:	468c      	mov	ip, r1
 80024ec:	4b0a      	ldr	r3, [pc, #40]	; (8002518 <__aeabi_dmul+0x36c>)
 80024ee:	401c      	ands	r4, r3
 80024f0:	9b02      	ldr	r3, [sp, #8]
 80024f2:	4463      	add	r3, ip
 80024f4:	4909      	ldr	r1, [pc, #36]	; (800251c <__aeabi_dmul+0x370>)
 80024f6:	428b      	cmp	r3, r1
 80024f8:	dd00      	ble.n	80024fc <__aeabi_dmul+0x350>
 80024fa:	e710      	b.n	800231e <__aeabi_dmul+0x172>
 80024fc:	0761      	lsls	r1, r4, #29
 80024fe:	08c5      	lsrs	r5, r0, #3
 8002500:	0264      	lsls	r4, r4, #9
 8002502:	055b      	lsls	r3, r3, #21
 8002504:	430d      	orrs	r5, r1
 8002506:	0b24      	lsrs	r4, r4, #12
 8002508:	0d5b      	lsrs	r3, r3, #21
 800250a:	e6c1      	b.n	8002290 <__aeabi_dmul+0xe4>
 800250c:	000007ff 	.word	0x000007ff
 8002510:	fffffc01 	.word	0xfffffc01
 8002514:	000003ff 	.word	0x000003ff
 8002518:	feffffff 	.word	0xfeffffff
 800251c:	000007fe 	.word	0x000007fe
 8002520:	464b      	mov	r3, r9
 8002522:	4323      	orrs	r3, r4
 8002524:	d059      	beq.n	80025da <__aeabi_dmul+0x42e>
 8002526:	2c00      	cmp	r4, #0
 8002528:	d100      	bne.n	800252c <__aeabi_dmul+0x380>
 800252a:	e0a3      	b.n	8002674 <__aeabi_dmul+0x4c8>
 800252c:	0020      	movs	r0, r4
 800252e:	f000 fdf9 	bl	8003124 <__clzsi2>
 8002532:	0001      	movs	r1, r0
 8002534:	0003      	movs	r3, r0
 8002536:	390b      	subs	r1, #11
 8002538:	221d      	movs	r2, #29
 800253a:	1a52      	subs	r2, r2, r1
 800253c:	4649      	mov	r1, r9
 800253e:	0018      	movs	r0, r3
 8002540:	40d1      	lsrs	r1, r2
 8002542:	464a      	mov	r2, r9
 8002544:	3808      	subs	r0, #8
 8002546:	4082      	lsls	r2, r0
 8002548:	4084      	lsls	r4, r0
 800254a:	0010      	movs	r0, r2
 800254c:	430c      	orrs	r4, r1
 800254e:	4a74      	ldr	r2, [pc, #464]	; (8002720 <__aeabi_dmul+0x574>)
 8002550:	1aeb      	subs	r3, r5, r3
 8002552:	4694      	mov	ip, r2
 8002554:	4642      	mov	r2, r8
 8002556:	4463      	add	r3, ip
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	9b01      	ldr	r3, [sp, #4]
 800255c:	407a      	eors	r2, r7
 800255e:	3301      	adds	r3, #1
 8002560:	2100      	movs	r1, #0
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	9302      	str	r3, [sp, #8]
 8002566:	2e0a      	cmp	r6, #10
 8002568:	dd00      	ble.n	800256c <__aeabi_dmul+0x3c0>
 800256a:	e667      	b.n	800223c <__aeabi_dmul+0x90>
 800256c:	e683      	b.n	8002276 <__aeabi_dmul+0xca>
 800256e:	465b      	mov	r3, fp
 8002570:	4303      	orrs	r3, r0
 8002572:	469a      	mov	sl, r3
 8002574:	d02a      	beq.n	80025cc <__aeabi_dmul+0x420>
 8002576:	465b      	mov	r3, fp
 8002578:	2b00      	cmp	r3, #0
 800257a:	d06d      	beq.n	8002658 <__aeabi_dmul+0x4ac>
 800257c:	4658      	mov	r0, fp
 800257e:	f000 fdd1 	bl	8003124 <__clzsi2>
 8002582:	0001      	movs	r1, r0
 8002584:	0003      	movs	r3, r0
 8002586:	390b      	subs	r1, #11
 8002588:	221d      	movs	r2, #29
 800258a:	1a52      	subs	r2, r2, r1
 800258c:	0021      	movs	r1, r4
 800258e:	0018      	movs	r0, r3
 8002590:	465d      	mov	r5, fp
 8002592:	40d1      	lsrs	r1, r2
 8002594:	3808      	subs	r0, #8
 8002596:	4085      	lsls	r5, r0
 8002598:	000a      	movs	r2, r1
 800259a:	4084      	lsls	r4, r0
 800259c:	432a      	orrs	r2, r5
 800259e:	4693      	mov	fp, r2
 80025a0:	46a2      	mov	sl, r4
 80025a2:	4d5f      	ldr	r5, [pc, #380]	; (8002720 <__aeabi_dmul+0x574>)
 80025a4:	2600      	movs	r6, #0
 80025a6:	1aed      	subs	r5, r5, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	e625      	b.n	80021fa <__aeabi_dmul+0x4e>
 80025ae:	465b      	mov	r3, fp
 80025b0:	4303      	orrs	r3, r0
 80025b2:	469a      	mov	sl, r3
 80025b4:	d105      	bne.n	80025c2 <__aeabi_dmul+0x416>
 80025b6:	2300      	movs	r3, #0
 80025b8:	469b      	mov	fp, r3
 80025ba:	3302      	adds	r3, #2
 80025bc:	2608      	movs	r6, #8
 80025be:	9300      	str	r3, [sp, #0]
 80025c0:	e61b      	b.n	80021fa <__aeabi_dmul+0x4e>
 80025c2:	2303      	movs	r3, #3
 80025c4:	4682      	mov	sl, r0
 80025c6:	260c      	movs	r6, #12
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	e616      	b.n	80021fa <__aeabi_dmul+0x4e>
 80025cc:	2300      	movs	r3, #0
 80025ce:	469b      	mov	fp, r3
 80025d0:	3301      	adds	r3, #1
 80025d2:	2604      	movs	r6, #4
 80025d4:	2500      	movs	r5, #0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	e60f      	b.n	80021fa <__aeabi_dmul+0x4e>
 80025da:	4642      	mov	r2, r8
 80025dc:	3301      	adds	r3, #1
 80025de:	9501      	str	r5, [sp, #4]
 80025e0:	431e      	orrs	r6, r3
 80025e2:	9b01      	ldr	r3, [sp, #4]
 80025e4:	407a      	eors	r2, r7
 80025e6:	3301      	adds	r3, #1
 80025e8:	2400      	movs	r4, #0
 80025ea:	2000      	movs	r0, #0
 80025ec:	2101      	movs	r1, #1
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	9302      	str	r3, [sp, #8]
 80025f2:	2e0a      	cmp	r6, #10
 80025f4:	dd00      	ble.n	80025f8 <__aeabi_dmul+0x44c>
 80025f6:	e621      	b.n	800223c <__aeabi_dmul+0x90>
 80025f8:	e63d      	b.n	8002276 <__aeabi_dmul+0xca>
 80025fa:	2101      	movs	r1, #1
 80025fc:	1ac9      	subs	r1, r1, r3
 80025fe:	2938      	cmp	r1, #56	; 0x38
 8002600:	dd00      	ble.n	8002604 <__aeabi_dmul+0x458>
 8002602:	e642      	b.n	800228a <__aeabi_dmul+0xde>
 8002604:	291f      	cmp	r1, #31
 8002606:	dd47      	ble.n	8002698 <__aeabi_dmul+0x4ec>
 8002608:	261f      	movs	r6, #31
 800260a:	0025      	movs	r5, r4
 800260c:	4276      	negs	r6, r6
 800260e:	1af3      	subs	r3, r6, r3
 8002610:	40dd      	lsrs	r5, r3
 8002612:	002b      	movs	r3, r5
 8002614:	2920      	cmp	r1, #32
 8002616:	d005      	beq.n	8002624 <__aeabi_dmul+0x478>
 8002618:	4942      	ldr	r1, [pc, #264]	; (8002724 <__aeabi_dmul+0x578>)
 800261a:	9d02      	ldr	r5, [sp, #8]
 800261c:	468c      	mov	ip, r1
 800261e:	4465      	add	r5, ip
 8002620:	40ac      	lsls	r4, r5
 8002622:	4320      	orrs	r0, r4
 8002624:	1e41      	subs	r1, r0, #1
 8002626:	4188      	sbcs	r0, r1
 8002628:	4318      	orrs	r0, r3
 800262a:	2307      	movs	r3, #7
 800262c:	001d      	movs	r5, r3
 800262e:	2400      	movs	r4, #0
 8002630:	4005      	ands	r5, r0
 8002632:	4203      	tst	r3, r0
 8002634:	d04a      	beq.n	80026cc <__aeabi_dmul+0x520>
 8002636:	230f      	movs	r3, #15
 8002638:	2400      	movs	r4, #0
 800263a:	4003      	ands	r3, r0
 800263c:	2b04      	cmp	r3, #4
 800263e:	d042      	beq.n	80026c6 <__aeabi_dmul+0x51a>
 8002640:	1d03      	adds	r3, r0, #4
 8002642:	4283      	cmp	r3, r0
 8002644:	4180      	sbcs	r0, r0
 8002646:	4240      	negs	r0, r0
 8002648:	1824      	adds	r4, r4, r0
 800264a:	0018      	movs	r0, r3
 800264c:	0223      	lsls	r3, r4, #8
 800264e:	d53a      	bpl.n	80026c6 <__aeabi_dmul+0x51a>
 8002650:	2301      	movs	r3, #1
 8002652:	2400      	movs	r4, #0
 8002654:	2500      	movs	r5, #0
 8002656:	e61b      	b.n	8002290 <__aeabi_dmul+0xe4>
 8002658:	f000 fd64 	bl	8003124 <__clzsi2>
 800265c:	0001      	movs	r1, r0
 800265e:	0003      	movs	r3, r0
 8002660:	3115      	adds	r1, #21
 8002662:	3320      	adds	r3, #32
 8002664:	291c      	cmp	r1, #28
 8002666:	dd8f      	ble.n	8002588 <__aeabi_dmul+0x3dc>
 8002668:	3808      	subs	r0, #8
 800266a:	2200      	movs	r2, #0
 800266c:	4084      	lsls	r4, r0
 800266e:	4692      	mov	sl, r2
 8002670:	46a3      	mov	fp, r4
 8002672:	e796      	b.n	80025a2 <__aeabi_dmul+0x3f6>
 8002674:	f000 fd56 	bl	8003124 <__clzsi2>
 8002678:	0001      	movs	r1, r0
 800267a:	0003      	movs	r3, r0
 800267c:	3115      	adds	r1, #21
 800267e:	3320      	adds	r3, #32
 8002680:	291c      	cmp	r1, #28
 8002682:	dc00      	bgt.n	8002686 <__aeabi_dmul+0x4da>
 8002684:	e758      	b.n	8002538 <__aeabi_dmul+0x38c>
 8002686:	0002      	movs	r2, r0
 8002688:	464c      	mov	r4, r9
 800268a:	3a08      	subs	r2, #8
 800268c:	2000      	movs	r0, #0
 800268e:	4094      	lsls	r4, r2
 8002690:	e75d      	b.n	800254e <__aeabi_dmul+0x3a2>
 8002692:	9b01      	ldr	r3, [sp, #4]
 8002694:	9302      	str	r3, [sp, #8]
 8002696:	e711      	b.n	80024bc <__aeabi_dmul+0x310>
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <__aeabi_dmul+0x57c>)
 800269a:	0026      	movs	r6, r4
 800269c:	469c      	mov	ip, r3
 800269e:	0003      	movs	r3, r0
 80026a0:	9d02      	ldr	r5, [sp, #8]
 80026a2:	40cb      	lsrs	r3, r1
 80026a4:	4465      	add	r5, ip
 80026a6:	40ae      	lsls	r6, r5
 80026a8:	431e      	orrs	r6, r3
 80026aa:	0003      	movs	r3, r0
 80026ac:	40ab      	lsls	r3, r5
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	4183      	sbcs	r3, r0
 80026b2:	0030      	movs	r0, r6
 80026b4:	4318      	orrs	r0, r3
 80026b6:	40cc      	lsrs	r4, r1
 80026b8:	0743      	lsls	r3, r0, #29
 80026ba:	d0c7      	beq.n	800264c <__aeabi_dmul+0x4a0>
 80026bc:	230f      	movs	r3, #15
 80026be:	4003      	ands	r3, r0
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d1bd      	bne.n	8002640 <__aeabi_dmul+0x494>
 80026c4:	e7c2      	b.n	800264c <__aeabi_dmul+0x4a0>
 80026c6:	0765      	lsls	r5, r4, #29
 80026c8:	0264      	lsls	r4, r4, #9
 80026ca:	0b24      	lsrs	r4, r4, #12
 80026cc:	08c0      	lsrs	r0, r0, #3
 80026ce:	2300      	movs	r3, #0
 80026d0:	4305      	orrs	r5, r0
 80026d2:	e5dd      	b.n	8002290 <__aeabi_dmul+0xe4>
 80026d4:	2500      	movs	r5, #0
 80026d6:	2302      	movs	r3, #2
 80026d8:	2e0f      	cmp	r6, #15
 80026da:	d10c      	bne.n	80026f6 <__aeabi_dmul+0x54a>
 80026dc:	2480      	movs	r4, #128	; 0x80
 80026de:	465b      	mov	r3, fp
 80026e0:	0324      	lsls	r4, r4, #12
 80026e2:	4223      	tst	r3, r4
 80026e4:	d00e      	beq.n	8002704 <__aeabi_dmul+0x558>
 80026e6:	4221      	tst	r1, r4
 80026e8:	d10c      	bne.n	8002704 <__aeabi_dmul+0x558>
 80026ea:	430c      	orrs	r4, r1
 80026ec:	0324      	lsls	r4, r4, #12
 80026ee:	003a      	movs	r2, r7
 80026f0:	4b0e      	ldr	r3, [pc, #56]	; (800272c <__aeabi_dmul+0x580>)
 80026f2:	0b24      	lsrs	r4, r4, #12
 80026f4:	e5cc      	b.n	8002290 <__aeabi_dmul+0xe4>
 80026f6:	2e0b      	cmp	r6, #11
 80026f8:	d000      	beq.n	80026fc <__aeabi_dmul+0x550>
 80026fa:	e5a2      	b.n	8002242 <__aeabi_dmul+0x96>
 80026fc:	468b      	mov	fp, r1
 80026fe:	46aa      	mov	sl, r5
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	e5f7      	b.n	80022f4 <__aeabi_dmul+0x148>
 8002704:	2480      	movs	r4, #128	; 0x80
 8002706:	465b      	mov	r3, fp
 8002708:	0324      	lsls	r4, r4, #12
 800270a:	431c      	orrs	r4, r3
 800270c:	0324      	lsls	r4, r4, #12
 800270e:	4642      	mov	r2, r8
 8002710:	4655      	mov	r5, sl
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <__aeabi_dmul+0x580>)
 8002714:	0b24      	lsrs	r4, r4, #12
 8002716:	e5bb      	b.n	8002290 <__aeabi_dmul+0xe4>
 8002718:	464d      	mov	r5, r9
 800271a:	0021      	movs	r1, r4
 800271c:	2303      	movs	r3, #3
 800271e:	e7db      	b.n	80026d8 <__aeabi_dmul+0x52c>
 8002720:	fffffc0d 	.word	0xfffffc0d
 8002724:	0000043e 	.word	0x0000043e
 8002728:	0000041e 	.word	0x0000041e
 800272c:	000007ff 	.word	0x000007ff

08002730 <__aeabi_dsub>:
 8002730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002732:	4657      	mov	r7, sl
 8002734:	464e      	mov	r6, r9
 8002736:	4645      	mov	r5, r8
 8002738:	46de      	mov	lr, fp
 800273a:	b5e0      	push	{r5, r6, r7, lr}
 800273c:	000d      	movs	r5, r1
 800273e:	0004      	movs	r4, r0
 8002740:	0019      	movs	r1, r3
 8002742:	0010      	movs	r0, r2
 8002744:	032b      	lsls	r3, r5, #12
 8002746:	0a5b      	lsrs	r3, r3, #9
 8002748:	0f62      	lsrs	r2, r4, #29
 800274a:	431a      	orrs	r2, r3
 800274c:	00e3      	lsls	r3, r4, #3
 800274e:	030c      	lsls	r4, r1, #12
 8002750:	0a64      	lsrs	r4, r4, #9
 8002752:	0f47      	lsrs	r7, r0, #29
 8002754:	4327      	orrs	r7, r4
 8002756:	4cd0      	ldr	r4, [pc, #832]	; (8002a98 <__aeabi_dsub+0x368>)
 8002758:	006e      	lsls	r6, r5, #1
 800275a:	4691      	mov	r9, r2
 800275c:	b083      	sub	sp, #12
 800275e:	004a      	lsls	r2, r1, #1
 8002760:	00c0      	lsls	r0, r0, #3
 8002762:	4698      	mov	r8, r3
 8002764:	46a2      	mov	sl, r4
 8002766:	0d76      	lsrs	r6, r6, #21
 8002768:	0fed      	lsrs	r5, r5, #31
 800276a:	0d52      	lsrs	r2, r2, #21
 800276c:	0fc9      	lsrs	r1, r1, #31
 800276e:	9001      	str	r0, [sp, #4]
 8002770:	42a2      	cmp	r2, r4
 8002772:	d100      	bne.n	8002776 <__aeabi_dsub+0x46>
 8002774:	e0b9      	b.n	80028ea <__aeabi_dsub+0x1ba>
 8002776:	2401      	movs	r4, #1
 8002778:	4061      	eors	r1, r4
 800277a:	468b      	mov	fp, r1
 800277c:	428d      	cmp	r5, r1
 800277e:	d100      	bne.n	8002782 <__aeabi_dsub+0x52>
 8002780:	e08d      	b.n	800289e <__aeabi_dsub+0x16e>
 8002782:	1ab4      	subs	r4, r6, r2
 8002784:	46a4      	mov	ip, r4
 8002786:	2c00      	cmp	r4, #0
 8002788:	dc00      	bgt.n	800278c <__aeabi_dsub+0x5c>
 800278a:	e0b7      	b.n	80028fc <__aeabi_dsub+0x1cc>
 800278c:	2a00      	cmp	r2, #0
 800278e:	d100      	bne.n	8002792 <__aeabi_dsub+0x62>
 8002790:	e0cb      	b.n	800292a <__aeabi_dsub+0x1fa>
 8002792:	4ac1      	ldr	r2, [pc, #772]	; (8002a98 <__aeabi_dsub+0x368>)
 8002794:	4296      	cmp	r6, r2
 8002796:	d100      	bne.n	800279a <__aeabi_dsub+0x6a>
 8002798:	e186      	b.n	8002aa8 <__aeabi_dsub+0x378>
 800279a:	2280      	movs	r2, #128	; 0x80
 800279c:	0412      	lsls	r2, r2, #16
 800279e:	4317      	orrs	r7, r2
 80027a0:	4662      	mov	r2, ip
 80027a2:	2a38      	cmp	r2, #56	; 0x38
 80027a4:	dd00      	ble.n	80027a8 <__aeabi_dsub+0x78>
 80027a6:	e1a4      	b.n	8002af2 <__aeabi_dsub+0x3c2>
 80027a8:	2a1f      	cmp	r2, #31
 80027aa:	dd00      	ble.n	80027ae <__aeabi_dsub+0x7e>
 80027ac:	e21d      	b.n	8002bea <__aeabi_dsub+0x4ba>
 80027ae:	4661      	mov	r1, ip
 80027b0:	2220      	movs	r2, #32
 80027b2:	003c      	movs	r4, r7
 80027b4:	1a52      	subs	r2, r2, r1
 80027b6:	0001      	movs	r1, r0
 80027b8:	4090      	lsls	r0, r2
 80027ba:	4094      	lsls	r4, r2
 80027bc:	1e42      	subs	r2, r0, #1
 80027be:	4190      	sbcs	r0, r2
 80027c0:	4662      	mov	r2, ip
 80027c2:	46a0      	mov	r8, r4
 80027c4:	4664      	mov	r4, ip
 80027c6:	40d7      	lsrs	r7, r2
 80027c8:	464a      	mov	r2, r9
 80027ca:	40e1      	lsrs	r1, r4
 80027cc:	4644      	mov	r4, r8
 80027ce:	1bd2      	subs	r2, r2, r7
 80027d0:	4691      	mov	r9, r2
 80027d2:	430c      	orrs	r4, r1
 80027d4:	4304      	orrs	r4, r0
 80027d6:	1b1c      	subs	r4, r3, r4
 80027d8:	42a3      	cmp	r3, r4
 80027da:	4192      	sbcs	r2, r2
 80027dc:	464b      	mov	r3, r9
 80027de:	4252      	negs	r2, r2
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	469a      	mov	sl, r3
 80027e4:	4653      	mov	r3, sl
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	d400      	bmi.n	80027ec <__aeabi_dsub+0xbc>
 80027ea:	e12b      	b.n	8002a44 <__aeabi_dsub+0x314>
 80027ec:	4653      	mov	r3, sl
 80027ee:	025a      	lsls	r2, r3, #9
 80027f0:	0a53      	lsrs	r3, r2, #9
 80027f2:	469a      	mov	sl, r3
 80027f4:	4653      	mov	r3, sl
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d100      	bne.n	80027fc <__aeabi_dsub+0xcc>
 80027fa:	e166      	b.n	8002aca <__aeabi_dsub+0x39a>
 80027fc:	4650      	mov	r0, sl
 80027fe:	f000 fc91 	bl	8003124 <__clzsi2>
 8002802:	0003      	movs	r3, r0
 8002804:	3b08      	subs	r3, #8
 8002806:	2220      	movs	r2, #32
 8002808:	0020      	movs	r0, r4
 800280a:	1ad2      	subs	r2, r2, r3
 800280c:	4651      	mov	r1, sl
 800280e:	40d0      	lsrs	r0, r2
 8002810:	4099      	lsls	r1, r3
 8002812:	0002      	movs	r2, r0
 8002814:	409c      	lsls	r4, r3
 8002816:	430a      	orrs	r2, r1
 8002818:	429e      	cmp	r6, r3
 800281a:	dd00      	ble.n	800281e <__aeabi_dsub+0xee>
 800281c:	e164      	b.n	8002ae8 <__aeabi_dsub+0x3b8>
 800281e:	1b9b      	subs	r3, r3, r6
 8002820:	1c59      	adds	r1, r3, #1
 8002822:	291f      	cmp	r1, #31
 8002824:	dd00      	ble.n	8002828 <__aeabi_dsub+0xf8>
 8002826:	e0fe      	b.n	8002a26 <__aeabi_dsub+0x2f6>
 8002828:	2320      	movs	r3, #32
 800282a:	0010      	movs	r0, r2
 800282c:	0026      	movs	r6, r4
 800282e:	1a5b      	subs	r3, r3, r1
 8002830:	409c      	lsls	r4, r3
 8002832:	4098      	lsls	r0, r3
 8002834:	40ce      	lsrs	r6, r1
 8002836:	40ca      	lsrs	r2, r1
 8002838:	1e63      	subs	r3, r4, #1
 800283a:	419c      	sbcs	r4, r3
 800283c:	4330      	orrs	r0, r6
 800283e:	4692      	mov	sl, r2
 8002840:	2600      	movs	r6, #0
 8002842:	4304      	orrs	r4, r0
 8002844:	0763      	lsls	r3, r4, #29
 8002846:	d009      	beq.n	800285c <__aeabi_dsub+0x12c>
 8002848:	230f      	movs	r3, #15
 800284a:	4023      	ands	r3, r4
 800284c:	2b04      	cmp	r3, #4
 800284e:	d005      	beq.n	800285c <__aeabi_dsub+0x12c>
 8002850:	1d23      	adds	r3, r4, #4
 8002852:	42a3      	cmp	r3, r4
 8002854:	41a4      	sbcs	r4, r4
 8002856:	4264      	negs	r4, r4
 8002858:	44a2      	add	sl, r4
 800285a:	001c      	movs	r4, r3
 800285c:	4653      	mov	r3, sl
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	d400      	bmi.n	8002864 <__aeabi_dsub+0x134>
 8002862:	e0f2      	b.n	8002a4a <__aeabi_dsub+0x31a>
 8002864:	4b8c      	ldr	r3, [pc, #560]	; (8002a98 <__aeabi_dsub+0x368>)
 8002866:	3601      	adds	r6, #1
 8002868:	429e      	cmp	r6, r3
 800286a:	d100      	bne.n	800286e <__aeabi_dsub+0x13e>
 800286c:	e10f      	b.n	8002a8e <__aeabi_dsub+0x35e>
 800286e:	4653      	mov	r3, sl
 8002870:	498a      	ldr	r1, [pc, #552]	; (8002a9c <__aeabi_dsub+0x36c>)
 8002872:	08e4      	lsrs	r4, r4, #3
 8002874:	400b      	ands	r3, r1
 8002876:	0019      	movs	r1, r3
 8002878:	075b      	lsls	r3, r3, #29
 800287a:	4323      	orrs	r3, r4
 800287c:	0572      	lsls	r2, r6, #21
 800287e:	024c      	lsls	r4, r1, #9
 8002880:	0b24      	lsrs	r4, r4, #12
 8002882:	0d52      	lsrs	r2, r2, #21
 8002884:	0512      	lsls	r2, r2, #20
 8002886:	4322      	orrs	r2, r4
 8002888:	07ed      	lsls	r5, r5, #31
 800288a:	432a      	orrs	r2, r5
 800288c:	0018      	movs	r0, r3
 800288e:	0011      	movs	r1, r2
 8002890:	b003      	add	sp, #12
 8002892:	bcf0      	pop	{r4, r5, r6, r7}
 8002894:	46bb      	mov	fp, r7
 8002896:	46b2      	mov	sl, r6
 8002898:	46a9      	mov	r9, r5
 800289a:	46a0      	mov	r8, r4
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800289e:	1ab4      	subs	r4, r6, r2
 80028a0:	46a4      	mov	ip, r4
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	dd59      	ble.n	800295a <__aeabi_dsub+0x22a>
 80028a6:	2a00      	cmp	r2, #0
 80028a8:	d100      	bne.n	80028ac <__aeabi_dsub+0x17c>
 80028aa:	e0b0      	b.n	8002a0e <__aeabi_dsub+0x2de>
 80028ac:	4556      	cmp	r6, sl
 80028ae:	d100      	bne.n	80028b2 <__aeabi_dsub+0x182>
 80028b0:	e0fa      	b.n	8002aa8 <__aeabi_dsub+0x378>
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	0412      	lsls	r2, r2, #16
 80028b6:	4317      	orrs	r7, r2
 80028b8:	4662      	mov	r2, ip
 80028ba:	2a38      	cmp	r2, #56	; 0x38
 80028bc:	dd00      	ble.n	80028c0 <__aeabi_dsub+0x190>
 80028be:	e0d4      	b.n	8002a6a <__aeabi_dsub+0x33a>
 80028c0:	2a1f      	cmp	r2, #31
 80028c2:	dc00      	bgt.n	80028c6 <__aeabi_dsub+0x196>
 80028c4:	e1c0      	b.n	8002c48 <__aeabi_dsub+0x518>
 80028c6:	0039      	movs	r1, r7
 80028c8:	3a20      	subs	r2, #32
 80028ca:	40d1      	lsrs	r1, r2
 80028cc:	4662      	mov	r2, ip
 80028ce:	2a20      	cmp	r2, #32
 80028d0:	d006      	beq.n	80028e0 <__aeabi_dsub+0x1b0>
 80028d2:	4664      	mov	r4, ip
 80028d4:	2240      	movs	r2, #64	; 0x40
 80028d6:	1b12      	subs	r2, r2, r4
 80028d8:	003c      	movs	r4, r7
 80028da:	4094      	lsls	r4, r2
 80028dc:	4304      	orrs	r4, r0
 80028de:	9401      	str	r4, [sp, #4]
 80028e0:	9c01      	ldr	r4, [sp, #4]
 80028e2:	1e62      	subs	r2, r4, #1
 80028e4:	4194      	sbcs	r4, r2
 80028e6:	430c      	orrs	r4, r1
 80028e8:	e0c3      	b.n	8002a72 <__aeabi_dsub+0x342>
 80028ea:	003c      	movs	r4, r7
 80028ec:	4304      	orrs	r4, r0
 80028ee:	d02b      	beq.n	8002948 <__aeabi_dsub+0x218>
 80028f0:	468b      	mov	fp, r1
 80028f2:	428d      	cmp	r5, r1
 80028f4:	d02e      	beq.n	8002954 <__aeabi_dsub+0x224>
 80028f6:	4c6a      	ldr	r4, [pc, #424]	; (8002aa0 <__aeabi_dsub+0x370>)
 80028f8:	46a4      	mov	ip, r4
 80028fa:	44b4      	add	ip, r6
 80028fc:	4664      	mov	r4, ip
 80028fe:	2c00      	cmp	r4, #0
 8002900:	d05f      	beq.n	80029c2 <__aeabi_dsub+0x292>
 8002902:	1b94      	subs	r4, r2, r6
 8002904:	46a4      	mov	ip, r4
 8002906:	2e00      	cmp	r6, #0
 8002908:	d000      	beq.n	800290c <__aeabi_dsub+0x1dc>
 800290a:	e120      	b.n	8002b4e <__aeabi_dsub+0x41e>
 800290c:	464c      	mov	r4, r9
 800290e:	431c      	orrs	r4, r3
 8002910:	d100      	bne.n	8002914 <__aeabi_dsub+0x1e4>
 8002912:	e1c7      	b.n	8002ca4 <__aeabi_dsub+0x574>
 8002914:	4661      	mov	r1, ip
 8002916:	1e4c      	subs	r4, r1, #1
 8002918:	2901      	cmp	r1, #1
 800291a:	d100      	bne.n	800291e <__aeabi_dsub+0x1ee>
 800291c:	e223      	b.n	8002d66 <__aeabi_dsub+0x636>
 800291e:	4d5e      	ldr	r5, [pc, #376]	; (8002a98 <__aeabi_dsub+0x368>)
 8002920:	45ac      	cmp	ip, r5
 8002922:	d100      	bne.n	8002926 <__aeabi_dsub+0x1f6>
 8002924:	e1d8      	b.n	8002cd8 <__aeabi_dsub+0x5a8>
 8002926:	46a4      	mov	ip, r4
 8002928:	e11a      	b.n	8002b60 <__aeabi_dsub+0x430>
 800292a:	003a      	movs	r2, r7
 800292c:	4302      	orrs	r2, r0
 800292e:	d100      	bne.n	8002932 <__aeabi_dsub+0x202>
 8002930:	e0e4      	b.n	8002afc <__aeabi_dsub+0x3cc>
 8002932:	0022      	movs	r2, r4
 8002934:	3a01      	subs	r2, #1
 8002936:	2c01      	cmp	r4, #1
 8002938:	d100      	bne.n	800293c <__aeabi_dsub+0x20c>
 800293a:	e1c3      	b.n	8002cc4 <__aeabi_dsub+0x594>
 800293c:	4956      	ldr	r1, [pc, #344]	; (8002a98 <__aeabi_dsub+0x368>)
 800293e:	428c      	cmp	r4, r1
 8002940:	d100      	bne.n	8002944 <__aeabi_dsub+0x214>
 8002942:	e0b1      	b.n	8002aa8 <__aeabi_dsub+0x378>
 8002944:	4694      	mov	ip, r2
 8002946:	e72b      	b.n	80027a0 <__aeabi_dsub+0x70>
 8002948:	2401      	movs	r4, #1
 800294a:	4061      	eors	r1, r4
 800294c:	468b      	mov	fp, r1
 800294e:	428d      	cmp	r5, r1
 8002950:	d000      	beq.n	8002954 <__aeabi_dsub+0x224>
 8002952:	e716      	b.n	8002782 <__aeabi_dsub+0x52>
 8002954:	4952      	ldr	r1, [pc, #328]	; (8002aa0 <__aeabi_dsub+0x370>)
 8002956:	468c      	mov	ip, r1
 8002958:	44b4      	add	ip, r6
 800295a:	4664      	mov	r4, ip
 800295c:	2c00      	cmp	r4, #0
 800295e:	d100      	bne.n	8002962 <__aeabi_dsub+0x232>
 8002960:	e0d3      	b.n	8002b0a <__aeabi_dsub+0x3da>
 8002962:	1b91      	subs	r1, r2, r6
 8002964:	468c      	mov	ip, r1
 8002966:	2e00      	cmp	r6, #0
 8002968:	d100      	bne.n	800296c <__aeabi_dsub+0x23c>
 800296a:	e15e      	b.n	8002c2a <__aeabi_dsub+0x4fa>
 800296c:	494a      	ldr	r1, [pc, #296]	; (8002a98 <__aeabi_dsub+0x368>)
 800296e:	428a      	cmp	r2, r1
 8002970:	d100      	bne.n	8002974 <__aeabi_dsub+0x244>
 8002972:	e1be      	b.n	8002cf2 <__aeabi_dsub+0x5c2>
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	464c      	mov	r4, r9
 8002978:	0409      	lsls	r1, r1, #16
 800297a:	430c      	orrs	r4, r1
 800297c:	46a1      	mov	r9, r4
 800297e:	4661      	mov	r1, ip
 8002980:	2938      	cmp	r1, #56	; 0x38
 8002982:	dd00      	ble.n	8002986 <__aeabi_dsub+0x256>
 8002984:	e1ba      	b.n	8002cfc <__aeabi_dsub+0x5cc>
 8002986:	291f      	cmp	r1, #31
 8002988:	dd00      	ble.n	800298c <__aeabi_dsub+0x25c>
 800298a:	e227      	b.n	8002ddc <__aeabi_dsub+0x6ac>
 800298c:	2420      	movs	r4, #32
 800298e:	1a64      	subs	r4, r4, r1
 8002990:	4649      	mov	r1, r9
 8002992:	40a1      	lsls	r1, r4
 8002994:	001e      	movs	r6, r3
 8002996:	4688      	mov	r8, r1
 8002998:	4661      	mov	r1, ip
 800299a:	40a3      	lsls	r3, r4
 800299c:	40ce      	lsrs	r6, r1
 800299e:	4641      	mov	r1, r8
 80029a0:	1e5c      	subs	r4, r3, #1
 80029a2:	41a3      	sbcs	r3, r4
 80029a4:	4331      	orrs	r1, r6
 80029a6:	4319      	orrs	r1, r3
 80029a8:	000c      	movs	r4, r1
 80029aa:	4663      	mov	r3, ip
 80029ac:	4649      	mov	r1, r9
 80029ae:	40d9      	lsrs	r1, r3
 80029b0:	187f      	adds	r7, r7, r1
 80029b2:	1824      	adds	r4, r4, r0
 80029b4:	4284      	cmp	r4, r0
 80029b6:	419b      	sbcs	r3, r3
 80029b8:	425b      	negs	r3, r3
 80029ba:	469a      	mov	sl, r3
 80029bc:	0016      	movs	r6, r2
 80029be:	44ba      	add	sl, r7
 80029c0:	e05d      	b.n	8002a7e <__aeabi_dsub+0x34e>
 80029c2:	4c38      	ldr	r4, [pc, #224]	; (8002aa4 <__aeabi_dsub+0x374>)
 80029c4:	1c72      	adds	r2, r6, #1
 80029c6:	4222      	tst	r2, r4
 80029c8:	d000      	beq.n	80029cc <__aeabi_dsub+0x29c>
 80029ca:	e0df      	b.n	8002b8c <__aeabi_dsub+0x45c>
 80029cc:	464a      	mov	r2, r9
 80029ce:	431a      	orrs	r2, r3
 80029d0:	2e00      	cmp	r6, #0
 80029d2:	d000      	beq.n	80029d6 <__aeabi_dsub+0x2a6>
 80029d4:	e15c      	b.n	8002c90 <__aeabi_dsub+0x560>
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x2ac>
 80029da:	e1cf      	b.n	8002d7c <__aeabi_dsub+0x64c>
 80029dc:	003a      	movs	r2, r7
 80029de:	4302      	orrs	r2, r0
 80029e0:	d100      	bne.n	80029e4 <__aeabi_dsub+0x2b4>
 80029e2:	e17f      	b.n	8002ce4 <__aeabi_dsub+0x5b4>
 80029e4:	1a1c      	subs	r4, r3, r0
 80029e6:	464a      	mov	r2, r9
 80029e8:	42a3      	cmp	r3, r4
 80029ea:	4189      	sbcs	r1, r1
 80029ec:	1bd2      	subs	r2, r2, r7
 80029ee:	4249      	negs	r1, r1
 80029f0:	1a52      	subs	r2, r2, r1
 80029f2:	4692      	mov	sl, r2
 80029f4:	0212      	lsls	r2, r2, #8
 80029f6:	d400      	bmi.n	80029fa <__aeabi_dsub+0x2ca>
 80029f8:	e20a      	b.n	8002e10 <__aeabi_dsub+0x6e0>
 80029fa:	1ac4      	subs	r4, r0, r3
 80029fc:	42a0      	cmp	r0, r4
 80029fe:	4180      	sbcs	r0, r0
 8002a00:	464b      	mov	r3, r9
 8002a02:	4240      	negs	r0, r0
 8002a04:	1aff      	subs	r7, r7, r3
 8002a06:	1a3b      	subs	r3, r7, r0
 8002a08:	469a      	mov	sl, r3
 8002a0a:	465d      	mov	r5, fp
 8002a0c:	e71a      	b.n	8002844 <__aeabi_dsub+0x114>
 8002a0e:	003a      	movs	r2, r7
 8002a10:	4302      	orrs	r2, r0
 8002a12:	d073      	beq.n	8002afc <__aeabi_dsub+0x3cc>
 8002a14:	0022      	movs	r2, r4
 8002a16:	3a01      	subs	r2, #1
 8002a18:	2c01      	cmp	r4, #1
 8002a1a:	d100      	bne.n	8002a1e <__aeabi_dsub+0x2ee>
 8002a1c:	e0cb      	b.n	8002bb6 <__aeabi_dsub+0x486>
 8002a1e:	4554      	cmp	r4, sl
 8002a20:	d042      	beq.n	8002aa8 <__aeabi_dsub+0x378>
 8002a22:	4694      	mov	ip, r2
 8002a24:	e748      	b.n	80028b8 <__aeabi_dsub+0x188>
 8002a26:	0010      	movs	r0, r2
 8002a28:	3b1f      	subs	r3, #31
 8002a2a:	40d8      	lsrs	r0, r3
 8002a2c:	2920      	cmp	r1, #32
 8002a2e:	d003      	beq.n	8002a38 <__aeabi_dsub+0x308>
 8002a30:	2340      	movs	r3, #64	; 0x40
 8002a32:	1a5b      	subs	r3, r3, r1
 8002a34:	409a      	lsls	r2, r3
 8002a36:	4314      	orrs	r4, r2
 8002a38:	1e63      	subs	r3, r4, #1
 8002a3a:	419c      	sbcs	r4, r3
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2600      	movs	r6, #0
 8002a40:	469a      	mov	sl, r3
 8002a42:	4304      	orrs	r4, r0
 8002a44:	0763      	lsls	r3, r4, #29
 8002a46:	d000      	beq.n	8002a4a <__aeabi_dsub+0x31a>
 8002a48:	e6fe      	b.n	8002848 <__aeabi_dsub+0x118>
 8002a4a:	4652      	mov	r2, sl
 8002a4c:	08e3      	lsrs	r3, r4, #3
 8002a4e:	0752      	lsls	r2, r2, #29
 8002a50:	4313      	orrs	r3, r2
 8002a52:	4652      	mov	r2, sl
 8002a54:	46b4      	mov	ip, r6
 8002a56:	08d2      	lsrs	r2, r2, #3
 8002a58:	490f      	ldr	r1, [pc, #60]	; (8002a98 <__aeabi_dsub+0x368>)
 8002a5a:	458c      	cmp	ip, r1
 8002a5c:	d02a      	beq.n	8002ab4 <__aeabi_dsub+0x384>
 8002a5e:	0312      	lsls	r2, r2, #12
 8002a60:	0b14      	lsrs	r4, r2, #12
 8002a62:	4662      	mov	r2, ip
 8002a64:	0552      	lsls	r2, r2, #21
 8002a66:	0d52      	lsrs	r2, r2, #21
 8002a68:	e70c      	b.n	8002884 <__aeabi_dsub+0x154>
 8002a6a:	003c      	movs	r4, r7
 8002a6c:	4304      	orrs	r4, r0
 8002a6e:	1e62      	subs	r2, r4, #1
 8002a70:	4194      	sbcs	r4, r2
 8002a72:	18e4      	adds	r4, r4, r3
 8002a74:	429c      	cmp	r4, r3
 8002a76:	4192      	sbcs	r2, r2
 8002a78:	4252      	negs	r2, r2
 8002a7a:	444a      	add	r2, r9
 8002a7c:	4692      	mov	sl, r2
 8002a7e:	4653      	mov	r3, sl
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	d5df      	bpl.n	8002a44 <__aeabi_dsub+0x314>
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <__aeabi_dsub+0x368>)
 8002a86:	3601      	adds	r6, #1
 8002a88:	429e      	cmp	r6, r3
 8002a8a:	d000      	beq.n	8002a8e <__aeabi_dsub+0x35e>
 8002a8c:	e0a0      	b.n	8002bd0 <__aeabi_dsub+0x4a0>
 8002a8e:	0032      	movs	r2, r6
 8002a90:	2400      	movs	r4, #0
 8002a92:	2300      	movs	r3, #0
 8002a94:	e6f6      	b.n	8002884 <__aeabi_dsub+0x154>
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	000007ff 	.word	0x000007ff
 8002a9c:	ff7fffff 	.word	0xff7fffff
 8002aa0:	fffff801 	.word	0xfffff801
 8002aa4:	000007fe 	.word	0x000007fe
 8002aa8:	08db      	lsrs	r3, r3, #3
 8002aaa:	464a      	mov	r2, r9
 8002aac:	0752      	lsls	r2, r2, #29
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	464a      	mov	r2, r9
 8002ab2:	08d2      	lsrs	r2, r2, #3
 8002ab4:	0019      	movs	r1, r3
 8002ab6:	4311      	orrs	r1, r2
 8002ab8:	d100      	bne.n	8002abc <__aeabi_dsub+0x38c>
 8002aba:	e1b5      	b.n	8002e28 <__aeabi_dsub+0x6f8>
 8002abc:	2480      	movs	r4, #128	; 0x80
 8002abe:	0324      	lsls	r4, r4, #12
 8002ac0:	4314      	orrs	r4, r2
 8002ac2:	0324      	lsls	r4, r4, #12
 8002ac4:	4ad5      	ldr	r2, [pc, #852]	; (8002e1c <__aeabi_dsub+0x6ec>)
 8002ac6:	0b24      	lsrs	r4, r4, #12
 8002ac8:	e6dc      	b.n	8002884 <__aeabi_dsub+0x154>
 8002aca:	0020      	movs	r0, r4
 8002acc:	f000 fb2a 	bl	8003124 <__clzsi2>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	3318      	adds	r3, #24
 8002ad4:	2b1f      	cmp	r3, #31
 8002ad6:	dc00      	bgt.n	8002ada <__aeabi_dsub+0x3aa>
 8002ad8:	e695      	b.n	8002806 <__aeabi_dsub+0xd6>
 8002ada:	0022      	movs	r2, r4
 8002adc:	3808      	subs	r0, #8
 8002ade:	4082      	lsls	r2, r0
 8002ae0:	2400      	movs	r4, #0
 8002ae2:	429e      	cmp	r6, r3
 8002ae4:	dc00      	bgt.n	8002ae8 <__aeabi_dsub+0x3b8>
 8002ae6:	e69a      	b.n	800281e <__aeabi_dsub+0xee>
 8002ae8:	1af6      	subs	r6, r6, r3
 8002aea:	4bcd      	ldr	r3, [pc, #820]	; (8002e20 <__aeabi_dsub+0x6f0>)
 8002aec:	401a      	ands	r2, r3
 8002aee:	4692      	mov	sl, r2
 8002af0:	e6a8      	b.n	8002844 <__aeabi_dsub+0x114>
 8002af2:	003c      	movs	r4, r7
 8002af4:	4304      	orrs	r4, r0
 8002af6:	1e62      	subs	r2, r4, #1
 8002af8:	4194      	sbcs	r4, r2
 8002afa:	e66c      	b.n	80027d6 <__aeabi_dsub+0xa6>
 8002afc:	464a      	mov	r2, r9
 8002afe:	08db      	lsrs	r3, r3, #3
 8002b00:	0752      	lsls	r2, r2, #29
 8002b02:	4313      	orrs	r3, r2
 8002b04:	464a      	mov	r2, r9
 8002b06:	08d2      	lsrs	r2, r2, #3
 8002b08:	e7a6      	b.n	8002a58 <__aeabi_dsub+0x328>
 8002b0a:	4cc6      	ldr	r4, [pc, #792]	; (8002e24 <__aeabi_dsub+0x6f4>)
 8002b0c:	1c72      	adds	r2, r6, #1
 8002b0e:	4222      	tst	r2, r4
 8002b10:	d000      	beq.n	8002b14 <__aeabi_dsub+0x3e4>
 8002b12:	e0ac      	b.n	8002c6e <__aeabi_dsub+0x53e>
 8002b14:	464a      	mov	r2, r9
 8002b16:	431a      	orrs	r2, r3
 8002b18:	2e00      	cmp	r6, #0
 8002b1a:	d000      	beq.n	8002b1e <__aeabi_dsub+0x3ee>
 8002b1c:	e105      	b.n	8002d2a <__aeabi_dsub+0x5fa>
 8002b1e:	2a00      	cmp	r2, #0
 8002b20:	d100      	bne.n	8002b24 <__aeabi_dsub+0x3f4>
 8002b22:	e156      	b.n	8002dd2 <__aeabi_dsub+0x6a2>
 8002b24:	003a      	movs	r2, r7
 8002b26:	4302      	orrs	r2, r0
 8002b28:	d100      	bne.n	8002b2c <__aeabi_dsub+0x3fc>
 8002b2a:	e0db      	b.n	8002ce4 <__aeabi_dsub+0x5b4>
 8002b2c:	181c      	adds	r4, r3, r0
 8002b2e:	429c      	cmp	r4, r3
 8002b30:	419b      	sbcs	r3, r3
 8002b32:	444f      	add	r7, r9
 8002b34:	46ba      	mov	sl, r7
 8002b36:	425b      	negs	r3, r3
 8002b38:	449a      	add	sl, r3
 8002b3a:	4653      	mov	r3, sl
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	d400      	bmi.n	8002b42 <__aeabi_dsub+0x412>
 8002b40:	e780      	b.n	8002a44 <__aeabi_dsub+0x314>
 8002b42:	4652      	mov	r2, sl
 8002b44:	4bb6      	ldr	r3, [pc, #728]	; (8002e20 <__aeabi_dsub+0x6f0>)
 8002b46:	2601      	movs	r6, #1
 8002b48:	401a      	ands	r2, r3
 8002b4a:	4692      	mov	sl, r2
 8002b4c:	e77a      	b.n	8002a44 <__aeabi_dsub+0x314>
 8002b4e:	4cb3      	ldr	r4, [pc, #716]	; (8002e1c <__aeabi_dsub+0x6ec>)
 8002b50:	42a2      	cmp	r2, r4
 8002b52:	d100      	bne.n	8002b56 <__aeabi_dsub+0x426>
 8002b54:	e0c0      	b.n	8002cd8 <__aeabi_dsub+0x5a8>
 8002b56:	2480      	movs	r4, #128	; 0x80
 8002b58:	464d      	mov	r5, r9
 8002b5a:	0424      	lsls	r4, r4, #16
 8002b5c:	4325      	orrs	r5, r4
 8002b5e:	46a9      	mov	r9, r5
 8002b60:	4664      	mov	r4, ip
 8002b62:	2c38      	cmp	r4, #56	; 0x38
 8002b64:	dc53      	bgt.n	8002c0e <__aeabi_dsub+0x4de>
 8002b66:	4661      	mov	r1, ip
 8002b68:	2c1f      	cmp	r4, #31
 8002b6a:	dd00      	ble.n	8002b6e <__aeabi_dsub+0x43e>
 8002b6c:	e0cd      	b.n	8002d0a <__aeabi_dsub+0x5da>
 8002b6e:	2520      	movs	r5, #32
 8002b70:	001e      	movs	r6, r3
 8002b72:	1b2d      	subs	r5, r5, r4
 8002b74:	464c      	mov	r4, r9
 8002b76:	40ab      	lsls	r3, r5
 8002b78:	40ac      	lsls	r4, r5
 8002b7a:	40ce      	lsrs	r6, r1
 8002b7c:	1e5d      	subs	r5, r3, #1
 8002b7e:	41ab      	sbcs	r3, r5
 8002b80:	4334      	orrs	r4, r6
 8002b82:	4323      	orrs	r3, r4
 8002b84:	464c      	mov	r4, r9
 8002b86:	40cc      	lsrs	r4, r1
 8002b88:	1b3f      	subs	r7, r7, r4
 8002b8a:	e045      	b.n	8002c18 <__aeabi_dsub+0x4e8>
 8002b8c:	464a      	mov	r2, r9
 8002b8e:	1a1c      	subs	r4, r3, r0
 8002b90:	1bd1      	subs	r1, r2, r7
 8002b92:	42a3      	cmp	r3, r4
 8002b94:	4192      	sbcs	r2, r2
 8002b96:	4252      	negs	r2, r2
 8002b98:	4692      	mov	sl, r2
 8002b9a:	000a      	movs	r2, r1
 8002b9c:	4651      	mov	r1, sl
 8002b9e:	1a52      	subs	r2, r2, r1
 8002ba0:	4692      	mov	sl, r2
 8002ba2:	0212      	lsls	r2, r2, #8
 8002ba4:	d500      	bpl.n	8002ba8 <__aeabi_dsub+0x478>
 8002ba6:	e083      	b.n	8002cb0 <__aeabi_dsub+0x580>
 8002ba8:	4653      	mov	r3, sl
 8002baa:	4323      	orrs	r3, r4
 8002bac:	d000      	beq.n	8002bb0 <__aeabi_dsub+0x480>
 8002bae:	e621      	b.n	80027f4 <__aeabi_dsub+0xc4>
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	e753      	b.n	8002a5e <__aeabi_dsub+0x32e>
 8002bb6:	181c      	adds	r4, r3, r0
 8002bb8:	429c      	cmp	r4, r3
 8002bba:	419b      	sbcs	r3, r3
 8002bbc:	444f      	add	r7, r9
 8002bbe:	46ba      	mov	sl, r7
 8002bc0:	425b      	negs	r3, r3
 8002bc2:	449a      	add	sl, r3
 8002bc4:	4653      	mov	r3, sl
 8002bc6:	2601      	movs	r6, #1
 8002bc8:	021b      	lsls	r3, r3, #8
 8002bca:	d400      	bmi.n	8002bce <__aeabi_dsub+0x49e>
 8002bcc:	e73a      	b.n	8002a44 <__aeabi_dsub+0x314>
 8002bce:	2602      	movs	r6, #2
 8002bd0:	4652      	mov	r2, sl
 8002bd2:	4b93      	ldr	r3, [pc, #588]	; (8002e20 <__aeabi_dsub+0x6f0>)
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	401a      	ands	r2, r3
 8002bd8:	0013      	movs	r3, r2
 8002bda:	4021      	ands	r1, r4
 8002bdc:	0862      	lsrs	r2, r4, #1
 8002bde:	430a      	orrs	r2, r1
 8002be0:	07dc      	lsls	r4, r3, #31
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	469a      	mov	sl, r3
 8002be6:	4314      	orrs	r4, r2
 8002be8:	e62c      	b.n	8002844 <__aeabi_dsub+0x114>
 8002bea:	0039      	movs	r1, r7
 8002bec:	3a20      	subs	r2, #32
 8002bee:	40d1      	lsrs	r1, r2
 8002bf0:	4662      	mov	r2, ip
 8002bf2:	2a20      	cmp	r2, #32
 8002bf4:	d006      	beq.n	8002c04 <__aeabi_dsub+0x4d4>
 8002bf6:	4664      	mov	r4, ip
 8002bf8:	2240      	movs	r2, #64	; 0x40
 8002bfa:	1b12      	subs	r2, r2, r4
 8002bfc:	003c      	movs	r4, r7
 8002bfe:	4094      	lsls	r4, r2
 8002c00:	4304      	orrs	r4, r0
 8002c02:	9401      	str	r4, [sp, #4]
 8002c04:	9c01      	ldr	r4, [sp, #4]
 8002c06:	1e62      	subs	r2, r4, #1
 8002c08:	4194      	sbcs	r4, r2
 8002c0a:	430c      	orrs	r4, r1
 8002c0c:	e5e3      	b.n	80027d6 <__aeabi_dsub+0xa6>
 8002c0e:	4649      	mov	r1, r9
 8002c10:	4319      	orrs	r1, r3
 8002c12:	000b      	movs	r3, r1
 8002c14:	1e5c      	subs	r4, r3, #1
 8002c16:	41a3      	sbcs	r3, r4
 8002c18:	1ac4      	subs	r4, r0, r3
 8002c1a:	42a0      	cmp	r0, r4
 8002c1c:	419b      	sbcs	r3, r3
 8002c1e:	425b      	negs	r3, r3
 8002c20:	1afb      	subs	r3, r7, r3
 8002c22:	469a      	mov	sl, r3
 8002c24:	465d      	mov	r5, fp
 8002c26:	0016      	movs	r6, r2
 8002c28:	e5dc      	b.n	80027e4 <__aeabi_dsub+0xb4>
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	4319      	orrs	r1, r3
 8002c2e:	d100      	bne.n	8002c32 <__aeabi_dsub+0x502>
 8002c30:	e0ae      	b.n	8002d90 <__aeabi_dsub+0x660>
 8002c32:	4661      	mov	r1, ip
 8002c34:	4664      	mov	r4, ip
 8002c36:	3901      	subs	r1, #1
 8002c38:	2c01      	cmp	r4, #1
 8002c3a:	d100      	bne.n	8002c3e <__aeabi_dsub+0x50e>
 8002c3c:	e0e0      	b.n	8002e00 <__aeabi_dsub+0x6d0>
 8002c3e:	4c77      	ldr	r4, [pc, #476]	; (8002e1c <__aeabi_dsub+0x6ec>)
 8002c40:	45a4      	cmp	ip, r4
 8002c42:	d056      	beq.n	8002cf2 <__aeabi_dsub+0x5c2>
 8002c44:	468c      	mov	ip, r1
 8002c46:	e69a      	b.n	800297e <__aeabi_dsub+0x24e>
 8002c48:	4661      	mov	r1, ip
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	003c      	movs	r4, r7
 8002c4e:	1a52      	subs	r2, r2, r1
 8002c50:	4094      	lsls	r4, r2
 8002c52:	0001      	movs	r1, r0
 8002c54:	4090      	lsls	r0, r2
 8002c56:	46a0      	mov	r8, r4
 8002c58:	4664      	mov	r4, ip
 8002c5a:	1e42      	subs	r2, r0, #1
 8002c5c:	4190      	sbcs	r0, r2
 8002c5e:	4662      	mov	r2, ip
 8002c60:	40e1      	lsrs	r1, r4
 8002c62:	4644      	mov	r4, r8
 8002c64:	40d7      	lsrs	r7, r2
 8002c66:	430c      	orrs	r4, r1
 8002c68:	4304      	orrs	r4, r0
 8002c6a:	44b9      	add	r9, r7
 8002c6c:	e701      	b.n	8002a72 <__aeabi_dsub+0x342>
 8002c6e:	496b      	ldr	r1, [pc, #428]	; (8002e1c <__aeabi_dsub+0x6ec>)
 8002c70:	428a      	cmp	r2, r1
 8002c72:	d100      	bne.n	8002c76 <__aeabi_dsub+0x546>
 8002c74:	e70c      	b.n	8002a90 <__aeabi_dsub+0x360>
 8002c76:	1818      	adds	r0, r3, r0
 8002c78:	4298      	cmp	r0, r3
 8002c7a:	419b      	sbcs	r3, r3
 8002c7c:	444f      	add	r7, r9
 8002c7e:	425b      	negs	r3, r3
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	07dc      	lsls	r4, r3, #31
 8002c84:	0840      	lsrs	r0, r0, #1
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	469a      	mov	sl, r3
 8002c8a:	0016      	movs	r6, r2
 8002c8c:	4304      	orrs	r4, r0
 8002c8e:	e6d9      	b.n	8002a44 <__aeabi_dsub+0x314>
 8002c90:	2a00      	cmp	r2, #0
 8002c92:	d000      	beq.n	8002c96 <__aeabi_dsub+0x566>
 8002c94:	e081      	b.n	8002d9a <__aeabi_dsub+0x66a>
 8002c96:	003b      	movs	r3, r7
 8002c98:	4303      	orrs	r3, r0
 8002c9a:	d11d      	bne.n	8002cd8 <__aeabi_dsub+0x5a8>
 8002c9c:	2280      	movs	r2, #128	; 0x80
 8002c9e:	2500      	movs	r5, #0
 8002ca0:	0312      	lsls	r2, r2, #12
 8002ca2:	e70b      	b.n	8002abc <__aeabi_dsub+0x38c>
 8002ca4:	08c0      	lsrs	r0, r0, #3
 8002ca6:	077b      	lsls	r3, r7, #29
 8002ca8:	465d      	mov	r5, fp
 8002caa:	4303      	orrs	r3, r0
 8002cac:	08fa      	lsrs	r2, r7, #3
 8002cae:	e6d3      	b.n	8002a58 <__aeabi_dsub+0x328>
 8002cb0:	1ac4      	subs	r4, r0, r3
 8002cb2:	42a0      	cmp	r0, r4
 8002cb4:	4180      	sbcs	r0, r0
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	4240      	negs	r0, r0
 8002cba:	1aff      	subs	r7, r7, r3
 8002cbc:	1a3b      	subs	r3, r7, r0
 8002cbe:	469a      	mov	sl, r3
 8002cc0:	465d      	mov	r5, fp
 8002cc2:	e597      	b.n	80027f4 <__aeabi_dsub+0xc4>
 8002cc4:	1a1c      	subs	r4, r3, r0
 8002cc6:	464a      	mov	r2, r9
 8002cc8:	42a3      	cmp	r3, r4
 8002cca:	419b      	sbcs	r3, r3
 8002ccc:	1bd7      	subs	r7, r2, r7
 8002cce:	425b      	negs	r3, r3
 8002cd0:	1afb      	subs	r3, r7, r3
 8002cd2:	469a      	mov	sl, r3
 8002cd4:	2601      	movs	r6, #1
 8002cd6:	e585      	b.n	80027e4 <__aeabi_dsub+0xb4>
 8002cd8:	08c0      	lsrs	r0, r0, #3
 8002cda:	077b      	lsls	r3, r7, #29
 8002cdc:	465d      	mov	r5, fp
 8002cde:	4303      	orrs	r3, r0
 8002ce0:	08fa      	lsrs	r2, r7, #3
 8002ce2:	e6e7      	b.n	8002ab4 <__aeabi_dsub+0x384>
 8002ce4:	464a      	mov	r2, r9
 8002ce6:	08db      	lsrs	r3, r3, #3
 8002ce8:	0752      	lsls	r2, r2, #29
 8002cea:	4313      	orrs	r3, r2
 8002cec:	464a      	mov	r2, r9
 8002cee:	08d2      	lsrs	r2, r2, #3
 8002cf0:	e6b5      	b.n	8002a5e <__aeabi_dsub+0x32e>
 8002cf2:	08c0      	lsrs	r0, r0, #3
 8002cf4:	077b      	lsls	r3, r7, #29
 8002cf6:	4303      	orrs	r3, r0
 8002cf8:	08fa      	lsrs	r2, r7, #3
 8002cfa:	e6db      	b.n	8002ab4 <__aeabi_dsub+0x384>
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	4319      	orrs	r1, r3
 8002d00:	000b      	movs	r3, r1
 8002d02:	1e59      	subs	r1, r3, #1
 8002d04:	418b      	sbcs	r3, r1
 8002d06:	001c      	movs	r4, r3
 8002d08:	e653      	b.n	80029b2 <__aeabi_dsub+0x282>
 8002d0a:	464d      	mov	r5, r9
 8002d0c:	3c20      	subs	r4, #32
 8002d0e:	40e5      	lsrs	r5, r4
 8002d10:	2920      	cmp	r1, #32
 8002d12:	d005      	beq.n	8002d20 <__aeabi_dsub+0x5f0>
 8002d14:	2440      	movs	r4, #64	; 0x40
 8002d16:	1a64      	subs	r4, r4, r1
 8002d18:	4649      	mov	r1, r9
 8002d1a:	40a1      	lsls	r1, r4
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	4698      	mov	r8, r3
 8002d20:	4643      	mov	r3, r8
 8002d22:	1e5c      	subs	r4, r3, #1
 8002d24:	41a3      	sbcs	r3, r4
 8002d26:	432b      	orrs	r3, r5
 8002d28:	e776      	b.n	8002c18 <__aeabi_dsub+0x4e8>
 8002d2a:	2a00      	cmp	r2, #0
 8002d2c:	d0e1      	beq.n	8002cf2 <__aeabi_dsub+0x5c2>
 8002d2e:	003a      	movs	r2, r7
 8002d30:	08db      	lsrs	r3, r3, #3
 8002d32:	4302      	orrs	r2, r0
 8002d34:	d100      	bne.n	8002d38 <__aeabi_dsub+0x608>
 8002d36:	e6b8      	b.n	8002aaa <__aeabi_dsub+0x37a>
 8002d38:	464a      	mov	r2, r9
 8002d3a:	0752      	lsls	r2, r2, #29
 8002d3c:	2480      	movs	r4, #128	; 0x80
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	464a      	mov	r2, r9
 8002d42:	0324      	lsls	r4, r4, #12
 8002d44:	08d2      	lsrs	r2, r2, #3
 8002d46:	4222      	tst	r2, r4
 8002d48:	d007      	beq.n	8002d5a <__aeabi_dsub+0x62a>
 8002d4a:	08fe      	lsrs	r6, r7, #3
 8002d4c:	4226      	tst	r6, r4
 8002d4e:	d104      	bne.n	8002d5a <__aeabi_dsub+0x62a>
 8002d50:	465d      	mov	r5, fp
 8002d52:	0032      	movs	r2, r6
 8002d54:	08c3      	lsrs	r3, r0, #3
 8002d56:	077f      	lsls	r7, r7, #29
 8002d58:	433b      	orrs	r3, r7
 8002d5a:	0f59      	lsrs	r1, r3, #29
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	0749      	lsls	r1, r1, #29
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	430b      	orrs	r3, r1
 8002d64:	e6a6      	b.n	8002ab4 <__aeabi_dsub+0x384>
 8002d66:	1ac4      	subs	r4, r0, r3
 8002d68:	42a0      	cmp	r0, r4
 8002d6a:	4180      	sbcs	r0, r0
 8002d6c:	464b      	mov	r3, r9
 8002d6e:	4240      	negs	r0, r0
 8002d70:	1aff      	subs	r7, r7, r3
 8002d72:	1a3b      	subs	r3, r7, r0
 8002d74:	469a      	mov	sl, r3
 8002d76:	465d      	mov	r5, fp
 8002d78:	2601      	movs	r6, #1
 8002d7a:	e533      	b.n	80027e4 <__aeabi_dsub+0xb4>
 8002d7c:	003b      	movs	r3, r7
 8002d7e:	4303      	orrs	r3, r0
 8002d80:	d100      	bne.n	8002d84 <__aeabi_dsub+0x654>
 8002d82:	e715      	b.n	8002bb0 <__aeabi_dsub+0x480>
 8002d84:	08c0      	lsrs	r0, r0, #3
 8002d86:	077b      	lsls	r3, r7, #29
 8002d88:	465d      	mov	r5, fp
 8002d8a:	4303      	orrs	r3, r0
 8002d8c:	08fa      	lsrs	r2, r7, #3
 8002d8e:	e666      	b.n	8002a5e <__aeabi_dsub+0x32e>
 8002d90:	08c0      	lsrs	r0, r0, #3
 8002d92:	077b      	lsls	r3, r7, #29
 8002d94:	4303      	orrs	r3, r0
 8002d96:	08fa      	lsrs	r2, r7, #3
 8002d98:	e65e      	b.n	8002a58 <__aeabi_dsub+0x328>
 8002d9a:	003a      	movs	r2, r7
 8002d9c:	08db      	lsrs	r3, r3, #3
 8002d9e:	4302      	orrs	r2, r0
 8002da0:	d100      	bne.n	8002da4 <__aeabi_dsub+0x674>
 8002da2:	e682      	b.n	8002aaa <__aeabi_dsub+0x37a>
 8002da4:	464a      	mov	r2, r9
 8002da6:	0752      	lsls	r2, r2, #29
 8002da8:	2480      	movs	r4, #128	; 0x80
 8002daa:	4313      	orrs	r3, r2
 8002dac:	464a      	mov	r2, r9
 8002dae:	0324      	lsls	r4, r4, #12
 8002db0:	08d2      	lsrs	r2, r2, #3
 8002db2:	4222      	tst	r2, r4
 8002db4:	d007      	beq.n	8002dc6 <__aeabi_dsub+0x696>
 8002db6:	08fe      	lsrs	r6, r7, #3
 8002db8:	4226      	tst	r6, r4
 8002dba:	d104      	bne.n	8002dc6 <__aeabi_dsub+0x696>
 8002dbc:	465d      	mov	r5, fp
 8002dbe:	0032      	movs	r2, r6
 8002dc0:	08c3      	lsrs	r3, r0, #3
 8002dc2:	077f      	lsls	r7, r7, #29
 8002dc4:	433b      	orrs	r3, r7
 8002dc6:	0f59      	lsrs	r1, r3, #29
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	08db      	lsrs	r3, r3, #3
 8002dcc:	0749      	lsls	r1, r1, #29
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	e670      	b.n	8002ab4 <__aeabi_dsub+0x384>
 8002dd2:	08c0      	lsrs	r0, r0, #3
 8002dd4:	077b      	lsls	r3, r7, #29
 8002dd6:	4303      	orrs	r3, r0
 8002dd8:	08fa      	lsrs	r2, r7, #3
 8002dda:	e640      	b.n	8002a5e <__aeabi_dsub+0x32e>
 8002ddc:	464c      	mov	r4, r9
 8002dde:	3920      	subs	r1, #32
 8002de0:	40cc      	lsrs	r4, r1
 8002de2:	4661      	mov	r1, ip
 8002de4:	2920      	cmp	r1, #32
 8002de6:	d006      	beq.n	8002df6 <__aeabi_dsub+0x6c6>
 8002de8:	4666      	mov	r6, ip
 8002dea:	2140      	movs	r1, #64	; 0x40
 8002dec:	1b89      	subs	r1, r1, r6
 8002dee:	464e      	mov	r6, r9
 8002df0:	408e      	lsls	r6, r1
 8002df2:	4333      	orrs	r3, r6
 8002df4:	4698      	mov	r8, r3
 8002df6:	4643      	mov	r3, r8
 8002df8:	1e59      	subs	r1, r3, #1
 8002dfa:	418b      	sbcs	r3, r1
 8002dfc:	431c      	orrs	r4, r3
 8002dfe:	e5d8      	b.n	80029b2 <__aeabi_dsub+0x282>
 8002e00:	181c      	adds	r4, r3, r0
 8002e02:	4284      	cmp	r4, r0
 8002e04:	4180      	sbcs	r0, r0
 8002e06:	444f      	add	r7, r9
 8002e08:	46ba      	mov	sl, r7
 8002e0a:	4240      	negs	r0, r0
 8002e0c:	4482      	add	sl, r0
 8002e0e:	e6d9      	b.n	8002bc4 <__aeabi_dsub+0x494>
 8002e10:	4653      	mov	r3, sl
 8002e12:	4323      	orrs	r3, r4
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x6e8>
 8002e16:	e6cb      	b.n	8002bb0 <__aeabi_dsub+0x480>
 8002e18:	e614      	b.n	8002a44 <__aeabi_dsub+0x314>
 8002e1a:	46c0      	nop			; (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	000007fe 	.word	0x000007fe
 8002e28:	2300      	movs	r3, #0
 8002e2a:	4a01      	ldr	r2, [pc, #4]	; (8002e30 <__aeabi_dsub+0x700>)
 8002e2c:	001c      	movs	r4, r3
 8002e2e:	e529      	b.n	8002884 <__aeabi_dsub+0x154>
 8002e30:	000007ff 	.word	0x000007ff

08002e34 <__aeabi_dcmpun>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	0005      	movs	r5, r0
 8002e38:	480c      	ldr	r0, [pc, #48]	; (8002e6c <__aeabi_dcmpun+0x38>)
 8002e3a:	031c      	lsls	r4, r3, #12
 8002e3c:	0016      	movs	r6, r2
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	030a      	lsls	r2, r1, #12
 8002e42:	0049      	lsls	r1, r1, #1
 8002e44:	0b12      	lsrs	r2, r2, #12
 8002e46:	0d49      	lsrs	r1, r1, #21
 8002e48:	0b24      	lsrs	r4, r4, #12
 8002e4a:	0d5b      	lsrs	r3, r3, #21
 8002e4c:	4281      	cmp	r1, r0
 8002e4e:	d008      	beq.n	8002e62 <__aeabi_dcmpun+0x2e>
 8002e50:	4a06      	ldr	r2, [pc, #24]	; (8002e6c <__aeabi_dcmpun+0x38>)
 8002e52:	2000      	movs	r0, #0
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d103      	bne.n	8002e60 <__aeabi_dcmpun+0x2c>
 8002e58:	0020      	movs	r0, r4
 8002e5a:	4330      	orrs	r0, r6
 8002e5c:	1e43      	subs	r3, r0, #1
 8002e5e:	4198      	sbcs	r0, r3
 8002e60:	bd70      	pop	{r4, r5, r6, pc}
 8002e62:	2001      	movs	r0, #1
 8002e64:	432a      	orrs	r2, r5
 8002e66:	d1fb      	bne.n	8002e60 <__aeabi_dcmpun+0x2c>
 8002e68:	e7f2      	b.n	8002e50 <__aeabi_dcmpun+0x1c>
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	000007ff 	.word	0x000007ff

08002e70 <__aeabi_d2iz>:
 8002e70:	000a      	movs	r2, r1
 8002e72:	b530      	push	{r4, r5, lr}
 8002e74:	4c13      	ldr	r4, [pc, #76]	; (8002ec4 <__aeabi_d2iz+0x54>)
 8002e76:	0053      	lsls	r3, r2, #1
 8002e78:	0309      	lsls	r1, r1, #12
 8002e7a:	0005      	movs	r5, r0
 8002e7c:	0b09      	lsrs	r1, r1, #12
 8002e7e:	2000      	movs	r0, #0
 8002e80:	0d5b      	lsrs	r3, r3, #21
 8002e82:	0fd2      	lsrs	r2, r2, #31
 8002e84:	42a3      	cmp	r3, r4
 8002e86:	dd04      	ble.n	8002e92 <__aeabi_d2iz+0x22>
 8002e88:	480f      	ldr	r0, [pc, #60]	; (8002ec8 <__aeabi_d2iz+0x58>)
 8002e8a:	4283      	cmp	r3, r0
 8002e8c:	dd02      	ble.n	8002e94 <__aeabi_d2iz+0x24>
 8002e8e:	4b0f      	ldr	r3, [pc, #60]	; (8002ecc <__aeabi_d2iz+0x5c>)
 8002e90:	18d0      	adds	r0, r2, r3
 8002e92:	bd30      	pop	{r4, r5, pc}
 8002e94:	2080      	movs	r0, #128	; 0x80
 8002e96:	0340      	lsls	r0, r0, #13
 8002e98:	4301      	orrs	r1, r0
 8002e9a:	480d      	ldr	r0, [pc, #52]	; (8002ed0 <__aeabi_d2iz+0x60>)
 8002e9c:	1ac0      	subs	r0, r0, r3
 8002e9e:	281f      	cmp	r0, #31
 8002ea0:	dd08      	ble.n	8002eb4 <__aeabi_d2iz+0x44>
 8002ea2:	480c      	ldr	r0, [pc, #48]	; (8002ed4 <__aeabi_d2iz+0x64>)
 8002ea4:	1ac3      	subs	r3, r0, r3
 8002ea6:	40d9      	lsrs	r1, r3
 8002ea8:	000b      	movs	r3, r1
 8002eaa:	4258      	negs	r0, r3
 8002eac:	2a00      	cmp	r2, #0
 8002eae:	d1f0      	bne.n	8002e92 <__aeabi_d2iz+0x22>
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	e7ee      	b.n	8002e92 <__aeabi_d2iz+0x22>
 8002eb4:	4c08      	ldr	r4, [pc, #32]	; (8002ed8 <__aeabi_d2iz+0x68>)
 8002eb6:	40c5      	lsrs	r5, r0
 8002eb8:	46a4      	mov	ip, r4
 8002eba:	4463      	add	r3, ip
 8002ebc:	4099      	lsls	r1, r3
 8002ebe:	000b      	movs	r3, r1
 8002ec0:	432b      	orrs	r3, r5
 8002ec2:	e7f2      	b.n	8002eaa <__aeabi_d2iz+0x3a>
 8002ec4:	000003fe 	.word	0x000003fe
 8002ec8:	0000041d 	.word	0x0000041d
 8002ecc:	7fffffff 	.word	0x7fffffff
 8002ed0:	00000433 	.word	0x00000433
 8002ed4:	00000413 	.word	0x00000413
 8002ed8:	fffffbed 	.word	0xfffffbed

08002edc <__aeabi_i2d>:
 8002edc:	b570      	push	{r4, r5, r6, lr}
 8002ede:	2800      	cmp	r0, #0
 8002ee0:	d016      	beq.n	8002f10 <__aeabi_i2d+0x34>
 8002ee2:	17c3      	asrs	r3, r0, #31
 8002ee4:	18c5      	adds	r5, r0, r3
 8002ee6:	405d      	eors	r5, r3
 8002ee8:	0fc4      	lsrs	r4, r0, #31
 8002eea:	0028      	movs	r0, r5
 8002eec:	f000 f91a 	bl	8003124 <__clzsi2>
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <__aeabi_i2d+0x5c>)
 8002ef2:	1a1b      	subs	r3, r3, r0
 8002ef4:	280a      	cmp	r0, #10
 8002ef6:	dc16      	bgt.n	8002f26 <__aeabi_i2d+0x4a>
 8002ef8:	0002      	movs	r2, r0
 8002efa:	002e      	movs	r6, r5
 8002efc:	3215      	adds	r2, #21
 8002efe:	4096      	lsls	r6, r2
 8002f00:	220b      	movs	r2, #11
 8002f02:	1a12      	subs	r2, r2, r0
 8002f04:	40d5      	lsrs	r5, r2
 8002f06:	055b      	lsls	r3, r3, #21
 8002f08:	032d      	lsls	r5, r5, #12
 8002f0a:	0b2d      	lsrs	r5, r5, #12
 8002f0c:	0d5b      	lsrs	r3, r3, #21
 8002f0e:	e003      	b.n	8002f18 <__aeabi_i2d+0x3c>
 8002f10:	2400      	movs	r4, #0
 8002f12:	2300      	movs	r3, #0
 8002f14:	2500      	movs	r5, #0
 8002f16:	2600      	movs	r6, #0
 8002f18:	051b      	lsls	r3, r3, #20
 8002f1a:	432b      	orrs	r3, r5
 8002f1c:	07e4      	lsls	r4, r4, #31
 8002f1e:	4323      	orrs	r3, r4
 8002f20:	0030      	movs	r0, r6
 8002f22:	0019      	movs	r1, r3
 8002f24:	bd70      	pop	{r4, r5, r6, pc}
 8002f26:	380b      	subs	r0, #11
 8002f28:	4085      	lsls	r5, r0
 8002f2a:	055b      	lsls	r3, r3, #21
 8002f2c:	032d      	lsls	r5, r5, #12
 8002f2e:	2600      	movs	r6, #0
 8002f30:	0b2d      	lsrs	r5, r5, #12
 8002f32:	0d5b      	lsrs	r3, r3, #21
 8002f34:	e7f0      	b.n	8002f18 <__aeabi_i2d+0x3c>
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	0000041e 	.word	0x0000041e

08002f3c <__aeabi_ui2d>:
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	1e04      	subs	r4, r0, #0
 8002f40:	d010      	beq.n	8002f64 <__aeabi_ui2d+0x28>
 8002f42:	f000 f8ef 	bl	8003124 <__clzsi2>
 8002f46:	4b0f      	ldr	r3, [pc, #60]	; (8002f84 <__aeabi_ui2d+0x48>)
 8002f48:	1a1b      	subs	r3, r3, r0
 8002f4a:	280a      	cmp	r0, #10
 8002f4c:	dc11      	bgt.n	8002f72 <__aeabi_ui2d+0x36>
 8002f4e:	220b      	movs	r2, #11
 8002f50:	0021      	movs	r1, r4
 8002f52:	1a12      	subs	r2, r2, r0
 8002f54:	40d1      	lsrs	r1, r2
 8002f56:	3015      	adds	r0, #21
 8002f58:	030a      	lsls	r2, r1, #12
 8002f5a:	055b      	lsls	r3, r3, #21
 8002f5c:	4084      	lsls	r4, r0
 8002f5e:	0b12      	lsrs	r2, r2, #12
 8002f60:	0d5b      	lsrs	r3, r3, #21
 8002f62:	e001      	b.n	8002f68 <__aeabi_ui2d+0x2c>
 8002f64:	2300      	movs	r3, #0
 8002f66:	2200      	movs	r2, #0
 8002f68:	051b      	lsls	r3, r3, #20
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	0020      	movs	r0, r4
 8002f6e:	0019      	movs	r1, r3
 8002f70:	bd10      	pop	{r4, pc}
 8002f72:	0022      	movs	r2, r4
 8002f74:	380b      	subs	r0, #11
 8002f76:	4082      	lsls	r2, r0
 8002f78:	055b      	lsls	r3, r3, #21
 8002f7a:	0312      	lsls	r2, r2, #12
 8002f7c:	2400      	movs	r4, #0
 8002f7e:	0b12      	lsrs	r2, r2, #12
 8002f80:	0d5b      	lsrs	r3, r3, #21
 8002f82:	e7f1      	b.n	8002f68 <__aeabi_ui2d+0x2c>
 8002f84:	0000041e 	.word	0x0000041e

08002f88 <__aeabi_f2d>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	0242      	lsls	r2, r0, #9
 8002f8c:	0043      	lsls	r3, r0, #1
 8002f8e:	0fc4      	lsrs	r4, r0, #31
 8002f90:	20fe      	movs	r0, #254	; 0xfe
 8002f92:	0e1b      	lsrs	r3, r3, #24
 8002f94:	1c59      	adds	r1, r3, #1
 8002f96:	0a55      	lsrs	r5, r2, #9
 8002f98:	4208      	tst	r0, r1
 8002f9a:	d00c      	beq.n	8002fb6 <__aeabi_f2d+0x2e>
 8002f9c:	21e0      	movs	r1, #224	; 0xe0
 8002f9e:	0089      	lsls	r1, r1, #2
 8002fa0:	468c      	mov	ip, r1
 8002fa2:	076d      	lsls	r5, r5, #29
 8002fa4:	0b12      	lsrs	r2, r2, #12
 8002fa6:	4463      	add	r3, ip
 8002fa8:	051b      	lsls	r3, r3, #20
 8002faa:	4313      	orrs	r3, r2
 8002fac:	07e4      	lsls	r4, r4, #31
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	0028      	movs	r0, r5
 8002fb2:	0019      	movs	r1, r3
 8002fb4:	bd70      	pop	{r4, r5, r6, pc}
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d114      	bne.n	8002fe4 <__aeabi_f2d+0x5c>
 8002fba:	2d00      	cmp	r5, #0
 8002fbc:	d01b      	beq.n	8002ff6 <__aeabi_f2d+0x6e>
 8002fbe:	0028      	movs	r0, r5
 8002fc0:	f000 f8b0 	bl	8003124 <__clzsi2>
 8002fc4:	280a      	cmp	r0, #10
 8002fc6:	dc1c      	bgt.n	8003002 <__aeabi_f2d+0x7a>
 8002fc8:	230b      	movs	r3, #11
 8002fca:	002a      	movs	r2, r5
 8002fcc:	1a1b      	subs	r3, r3, r0
 8002fce:	40da      	lsrs	r2, r3
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	3315      	adds	r3, #21
 8002fd4:	409d      	lsls	r5, r3
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <__aeabi_f2d+0x88>)
 8002fd8:	0312      	lsls	r2, r2, #12
 8002fda:	1a1b      	subs	r3, r3, r0
 8002fdc:	055b      	lsls	r3, r3, #21
 8002fde:	0b12      	lsrs	r2, r2, #12
 8002fe0:	0d5b      	lsrs	r3, r3, #21
 8002fe2:	e7e1      	b.n	8002fa8 <__aeabi_f2d+0x20>
 8002fe4:	2d00      	cmp	r5, #0
 8002fe6:	d009      	beq.n	8002ffc <__aeabi_f2d+0x74>
 8002fe8:	0b13      	lsrs	r3, r2, #12
 8002fea:	2280      	movs	r2, #128	; 0x80
 8002fec:	0312      	lsls	r2, r2, #12
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	076d      	lsls	r5, r5, #29
 8002ff2:	4b08      	ldr	r3, [pc, #32]	; (8003014 <__aeabi_f2d+0x8c>)
 8002ff4:	e7d8      	b.n	8002fa8 <__aeabi_f2d+0x20>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_f2d+0x20>
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <__aeabi_f2d+0x8c>)
 8003000:	e7d2      	b.n	8002fa8 <__aeabi_f2d+0x20>
 8003002:	0003      	movs	r3, r0
 8003004:	002a      	movs	r2, r5
 8003006:	3b0b      	subs	r3, #11
 8003008:	409a      	lsls	r2, r3
 800300a:	2500      	movs	r5, #0
 800300c:	e7e3      	b.n	8002fd6 <__aeabi_f2d+0x4e>
 800300e:	46c0      	nop			; (mov r8, r8)
 8003010:	00000389 	.word	0x00000389
 8003014:	000007ff 	.word	0x000007ff

08003018 <__aeabi_d2f>:
 8003018:	0002      	movs	r2, r0
 800301a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301c:	004b      	lsls	r3, r1, #1
 800301e:	030d      	lsls	r5, r1, #12
 8003020:	0f40      	lsrs	r0, r0, #29
 8003022:	0d5b      	lsrs	r3, r3, #21
 8003024:	0fcc      	lsrs	r4, r1, #31
 8003026:	0a6d      	lsrs	r5, r5, #9
 8003028:	493a      	ldr	r1, [pc, #232]	; (8003114 <__aeabi_d2f+0xfc>)
 800302a:	4305      	orrs	r5, r0
 800302c:	1c58      	adds	r0, r3, #1
 800302e:	00d7      	lsls	r7, r2, #3
 8003030:	4208      	tst	r0, r1
 8003032:	d00a      	beq.n	800304a <__aeabi_d2f+0x32>
 8003034:	4938      	ldr	r1, [pc, #224]	; (8003118 <__aeabi_d2f+0x100>)
 8003036:	1859      	adds	r1, r3, r1
 8003038:	29fe      	cmp	r1, #254	; 0xfe
 800303a:	dd16      	ble.n	800306a <__aeabi_d2f+0x52>
 800303c:	20ff      	movs	r0, #255	; 0xff
 800303e:	2200      	movs	r2, #0
 8003040:	05c0      	lsls	r0, r0, #23
 8003042:	4310      	orrs	r0, r2
 8003044:	07e4      	lsls	r4, r4, #31
 8003046:	4320      	orrs	r0, r4
 8003048:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <__aeabi_d2f+0x44>
 800304e:	433d      	orrs	r5, r7
 8003050:	d026      	beq.n	80030a0 <__aeabi_d2f+0x88>
 8003052:	2205      	movs	r2, #5
 8003054:	0192      	lsls	r2, r2, #6
 8003056:	0a52      	lsrs	r2, r2, #9
 8003058:	b2d8      	uxtb	r0, r3
 800305a:	e7f1      	b.n	8003040 <__aeabi_d2f+0x28>
 800305c:	432f      	orrs	r7, r5
 800305e:	d0ed      	beq.n	800303c <__aeabi_d2f+0x24>
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	03d2      	lsls	r2, r2, #15
 8003064:	20ff      	movs	r0, #255	; 0xff
 8003066:	432a      	orrs	r2, r5
 8003068:	e7ea      	b.n	8003040 <__aeabi_d2f+0x28>
 800306a:	2900      	cmp	r1, #0
 800306c:	dd1b      	ble.n	80030a6 <__aeabi_d2f+0x8e>
 800306e:	0192      	lsls	r2, r2, #6
 8003070:	1e50      	subs	r0, r2, #1
 8003072:	4182      	sbcs	r2, r0
 8003074:	00ed      	lsls	r5, r5, #3
 8003076:	0f7f      	lsrs	r7, r7, #29
 8003078:	432a      	orrs	r2, r5
 800307a:	433a      	orrs	r2, r7
 800307c:	0753      	lsls	r3, r2, #29
 800307e:	d047      	beq.n	8003110 <__aeabi_d2f+0xf8>
 8003080:	230f      	movs	r3, #15
 8003082:	4013      	ands	r3, r2
 8003084:	2b04      	cmp	r3, #4
 8003086:	d000      	beq.n	800308a <__aeabi_d2f+0x72>
 8003088:	3204      	adds	r2, #4
 800308a:	2380      	movs	r3, #128	; 0x80
 800308c:	04db      	lsls	r3, r3, #19
 800308e:	4013      	ands	r3, r2
 8003090:	d03e      	beq.n	8003110 <__aeabi_d2f+0xf8>
 8003092:	1c48      	adds	r0, r1, #1
 8003094:	29fe      	cmp	r1, #254	; 0xfe
 8003096:	d0d1      	beq.n	800303c <__aeabi_d2f+0x24>
 8003098:	0192      	lsls	r2, r2, #6
 800309a:	0a52      	lsrs	r2, r2, #9
 800309c:	b2c0      	uxtb	r0, r0
 800309e:	e7cf      	b.n	8003040 <__aeabi_d2f+0x28>
 80030a0:	2000      	movs	r0, #0
 80030a2:	2200      	movs	r2, #0
 80030a4:	e7cc      	b.n	8003040 <__aeabi_d2f+0x28>
 80030a6:	000a      	movs	r2, r1
 80030a8:	3217      	adds	r2, #23
 80030aa:	db2f      	blt.n	800310c <__aeabi_d2f+0xf4>
 80030ac:	2680      	movs	r6, #128	; 0x80
 80030ae:	0436      	lsls	r6, r6, #16
 80030b0:	432e      	orrs	r6, r5
 80030b2:	251e      	movs	r5, #30
 80030b4:	1a6d      	subs	r5, r5, r1
 80030b6:	2d1f      	cmp	r5, #31
 80030b8:	dd11      	ble.n	80030de <__aeabi_d2f+0xc6>
 80030ba:	2202      	movs	r2, #2
 80030bc:	4252      	negs	r2, r2
 80030be:	1a52      	subs	r2, r2, r1
 80030c0:	0031      	movs	r1, r6
 80030c2:	40d1      	lsrs	r1, r2
 80030c4:	2d20      	cmp	r5, #32
 80030c6:	d004      	beq.n	80030d2 <__aeabi_d2f+0xba>
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <__aeabi_d2f+0x104>)
 80030ca:	4694      	mov	ip, r2
 80030cc:	4463      	add	r3, ip
 80030ce:	409e      	lsls	r6, r3
 80030d0:	4337      	orrs	r7, r6
 80030d2:	003a      	movs	r2, r7
 80030d4:	1e53      	subs	r3, r2, #1
 80030d6:	419a      	sbcs	r2, r3
 80030d8:	430a      	orrs	r2, r1
 80030da:	2100      	movs	r1, #0
 80030dc:	e7ce      	b.n	800307c <__aeabi_d2f+0x64>
 80030de:	4a10      	ldr	r2, [pc, #64]	; (8003120 <__aeabi_d2f+0x108>)
 80030e0:	0038      	movs	r0, r7
 80030e2:	4694      	mov	ip, r2
 80030e4:	4463      	add	r3, ip
 80030e6:	4098      	lsls	r0, r3
 80030e8:	003a      	movs	r2, r7
 80030ea:	1e41      	subs	r1, r0, #1
 80030ec:	4188      	sbcs	r0, r1
 80030ee:	409e      	lsls	r6, r3
 80030f0:	40ea      	lsrs	r2, r5
 80030f2:	4330      	orrs	r0, r6
 80030f4:	4302      	orrs	r2, r0
 80030f6:	2100      	movs	r1, #0
 80030f8:	0753      	lsls	r3, r2, #29
 80030fa:	d1c1      	bne.n	8003080 <__aeabi_d2f+0x68>
 80030fc:	2180      	movs	r1, #128	; 0x80
 80030fe:	0013      	movs	r3, r2
 8003100:	04c9      	lsls	r1, r1, #19
 8003102:	2001      	movs	r0, #1
 8003104:	400b      	ands	r3, r1
 8003106:	420a      	tst	r2, r1
 8003108:	d1c6      	bne.n	8003098 <__aeabi_d2f+0x80>
 800310a:	e7a3      	b.n	8003054 <__aeabi_d2f+0x3c>
 800310c:	2300      	movs	r3, #0
 800310e:	e7a0      	b.n	8003052 <__aeabi_d2f+0x3a>
 8003110:	000b      	movs	r3, r1
 8003112:	e79f      	b.n	8003054 <__aeabi_d2f+0x3c>
 8003114:	000007fe 	.word	0x000007fe
 8003118:	fffffc80 	.word	0xfffffc80
 800311c:	fffffca2 	.word	0xfffffca2
 8003120:	fffffc82 	.word	0xfffffc82

08003124 <__clzsi2>:
 8003124:	211c      	movs	r1, #28
 8003126:	2301      	movs	r3, #1
 8003128:	041b      	lsls	r3, r3, #16
 800312a:	4298      	cmp	r0, r3
 800312c:	d301      	bcc.n	8003132 <__clzsi2+0xe>
 800312e:	0c00      	lsrs	r0, r0, #16
 8003130:	3910      	subs	r1, #16
 8003132:	0a1b      	lsrs	r3, r3, #8
 8003134:	4298      	cmp	r0, r3
 8003136:	d301      	bcc.n	800313c <__clzsi2+0x18>
 8003138:	0a00      	lsrs	r0, r0, #8
 800313a:	3908      	subs	r1, #8
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	4298      	cmp	r0, r3
 8003140:	d301      	bcc.n	8003146 <__clzsi2+0x22>
 8003142:	0900      	lsrs	r0, r0, #4
 8003144:	3904      	subs	r1, #4
 8003146:	a202      	add	r2, pc, #8	; (adr r2, 8003150 <__clzsi2+0x2c>)
 8003148:	5c10      	ldrb	r0, [r2, r0]
 800314a:	1840      	adds	r0, r0, r1
 800314c:	4770      	bx	lr
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	02020304 	.word	0x02020304
 8003154:	01010101 	.word	0x01010101
	...

08003160 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b08b      	sub	sp, #44	; 0x2c
 8003164:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003166:	2414      	movs	r4, #20
 8003168:	193b      	adds	r3, r7, r4
 800316a:	0018      	movs	r0, r3
 800316c:	2314      	movs	r3, #20
 800316e:	001a      	movs	r2, r3
 8003170:	2100      	movs	r1, #0
 8003172:	f006 fdeb 	bl	8009d4c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003176:	4b2d      	ldr	r3, [pc, #180]	; (800322c <MX_GPIO_Init+0xcc>)
 8003178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800317a:	4b2c      	ldr	r3, [pc, #176]	; (800322c <MX_GPIO_Init+0xcc>)
 800317c:	2104      	movs	r1, #4
 800317e:	430a      	orrs	r2, r1
 8003180:	635a      	str	r2, [r3, #52]	; 0x34
 8003182:	4b2a      	ldr	r3, [pc, #168]	; (800322c <MX_GPIO_Init+0xcc>)
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	2204      	movs	r2, #4
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]
 800318c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800318e:	4b27      	ldr	r3, [pc, #156]	; (800322c <MX_GPIO_Init+0xcc>)
 8003190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <MX_GPIO_Init+0xcc>)
 8003194:	2120      	movs	r1, #32
 8003196:	430a      	orrs	r2, r1
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	4b24      	ldr	r3, [pc, #144]	; (800322c <MX_GPIO_Init+0xcc>)
 800319c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319e:	2220      	movs	r2, #32
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a6:	4b21      	ldr	r3, [pc, #132]	; (800322c <MX_GPIO_Init+0xcc>)
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <MX_GPIO_Init+0xcc>)
 80031ac:	2102      	movs	r1, #2
 80031ae:	430a      	orrs	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34
 80031b2:	4b1e      	ldr	r3, [pc, #120]	; (800322c <MX_GPIO_Init+0xcc>)
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	2202      	movs	r2, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80031be:	4b1b      	ldr	r3, [pc, #108]	; (800322c <MX_GPIO_Init+0xcc>)
 80031c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c2:	4b1a      	ldr	r3, [pc, #104]	; (800322c <MX_GPIO_Init+0xcc>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	430a      	orrs	r2, r1
 80031c8:	635a      	str	r2, [r3, #52]	; 0x34
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <MX_GPIO_Init+0xcc>)
 80031cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ce:	2201      	movs	r2, #1
 80031d0:	4013      	ands	r3, r2
 80031d2:	607b      	str	r3, [r7, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <MX_GPIO_Init+0xcc>)
 80031d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031da:	4b14      	ldr	r3, [pc, #80]	; (800322c <MX_GPIO_Init+0xcc>)
 80031dc:	2108      	movs	r1, #8
 80031de:	430a      	orrs	r2, r1
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <MX_GPIO_Init+0xcc>)
 80031e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e6:	2208      	movs	r2, #8
 80031e8:	4013      	ands	r3, r2
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	019b      	lsls	r3, r3, #6
 80031f2:	480f      	ldr	r0, [pc, #60]	; (8003230 <MX_GPIO_Init+0xd0>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	0019      	movs	r1, r3
 80031f8:	f001 faf4 	bl	80047e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	0192      	lsls	r2, r2, #6
 8003202:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003204:	193b      	adds	r3, r7, r4
 8003206:	2201      	movs	r2, #1
 8003208:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	193b      	adds	r3, r7, r4
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003210:	193b      	adds	r3, r7, r4
 8003212:	2200      	movs	r2, #0
 8003214:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003216:	193b      	adds	r3, r7, r4
 8003218:	4a05      	ldr	r2, [pc, #20]	; (8003230 <MX_GPIO_Init+0xd0>)
 800321a:	0019      	movs	r1, r3
 800321c:	0010      	movs	r0, r2
 800321e:	f001 f97d 	bl	800451c <HAL_GPIO_Init>

}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b00b      	add	sp, #44	; 0x2c
 8003228:	bd90      	pop	{r4, r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	40021000 	.word	0x40021000
 8003230:	50000400 	.word	0x50000400

08003234 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2 , (uint8_t *)&ch, 1, 0xFFFF);
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <__io_putchar+0x20>)
 800323e:	1d39      	adds	r1, r7, #4
 8003240:	4805      	ldr	r0, [pc, #20]	; (8003258 <__io_putchar+0x24>)
 8003242:	2201      	movs	r2, #1
 8003244:	f003 fd00 	bl	8006c48 <HAL_UART_Transmit>
    return ch;
 8003248:	687b      	ldr	r3, [r7, #4]
}
 800324a:	0018      	movs	r0, r3
 800324c:	46bd      	mov	sp, r7
 800324e:	b002      	add	sp, #8
 8003250:	bd80      	pop	{r7, pc}
 8003252:	46c0      	nop			; (mov r8, r8)
 8003254:	0000ffff 	.word	0x0000ffff
 8003258:	20000438 	.word	0x20000438

0800325c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003262:	f000 ff2b 	bl	80040bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003266:	f000 f85f 	bl	8003328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800326a:	f7ff ff79 	bl	8003160 <MX_GPIO_Init>
  MX_TIM17_Init();
 800326e:	f000 fc2f 	bl	8003ad0 <MX_TIM17_Init>
  MX_TIM15_Init();
 8003272:	f000 fae1 	bl	8003838 <MX_TIM15_Init>
  MX_TIM16_Init();
 8003276:	f000 fba3 	bl	80039c0 <MX_TIM16_Init>
  MX_TIM1_Init();
 800327a:	f000 f9d3 	bl	8003624 <MX_TIM1_Init>
  MX_TIM3_Init();
 800327e:	f000 fa3b 	bl	80036f8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8003282:	f000 fe35 	bl	8003ef0 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8003286:	f000 fa9b 	bl	80037c0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Shell_Init();
 800328a:	f005 fe51 	bl	8008f30 <Shell_Init>
  PIDInit();
 800328e:	f005 fbdf 	bl	8008a50 <PIDInit>
  dcMotorInit();
 8003292:	f005 fc85 	bl	8008ba0 <dcMotorInit>
/*  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim7);
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);*/
  HAL_TIM_Base_Start_IT(&htim1);
 8003296:	4b1d      	ldr	r3, [pc, #116]	; (800330c <main+0xb0>)
 8003298:	0018      	movs	r0, r3
 800329a:	f002 f951 	bl	8005540 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800329e:	4b1c      	ldr	r3, [pc, #112]	; (8003310 <main+0xb4>)
 80032a0:	0018      	movs	r0, r3
 80032a2:	f002 f94d 	bl	8005540 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <main+0xb8>)
 80032a8:	0018      	movs	r0, r3
 80032aa:	f002 f949 	bl	8005540 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <main+0xb4>)
 80032b0:	213c      	movs	r1, #60	; 0x3c
 80032b2:	0018      	movs	r0, r3
 80032b4:	f002 fb86 	bl	80059c4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80032b8:	4b14      	ldr	r3, [pc, #80]	; (800330c <main+0xb0>)
 80032ba:	213c      	movs	r1, #60	; 0x3c
 80032bc:	0018      	movs	r0, r3
 80032be:	f002 fb81 	bl	80059c4 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80032c2:	4b15      	ldr	r3, [pc, #84]	; (8003318 <main+0xbc>)
 80032c4:	2100      	movs	r1, #0
 80032c6:	0018      	movs	r0, r3
 80032c8:	f002 f9f0 	bl	80056ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <main+0xc0>)
 80032ce:	2100      	movs	r1, #0
 80032d0:	0018      	movs	r0, r3
 80032d2:	f002 f9eb 	bl	80056ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80032d6:	4b12      	ldr	r3, [pc, #72]	; (8003320 <main+0xc4>)
 80032d8:	2104      	movs	r1, #4
 80032da:	0018      	movs	r0, r3
 80032dc:	f002 f9e6 	bl	80056ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80032e0:	4b0f      	ldr	r3, [pc, #60]	; (8003320 <main+0xc4>)
 80032e2:	2100      	movs	r1, #0
 80032e4:	0018      	movs	r0, r3
 80032e6:	f002 f9e1 	bl	80056ac <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   //Shell_Loop();
	__HAL_TIM_SetCompare(&htim17 , TIM_CHANNEL_1, 2559);  //  motor1 avancer    para为设置比较器的�??
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <main+0xbc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <main+0xc8>)
 80032f0:	635a      	str	r2, [r3, #52]	; 0x34
    uint32_t encoderValueNow = getEncoderValue();
 80032f2:	f005 fe03 	bl	8008efc <getEncoderValue>
 80032f6:	0003      	movs	r3, r0
 80032f8:	60fb      	str	r3, [r7, #12]
    uint32_t encoderValueNow2 = getEncoderValue();
 80032fa:	f005 fdff 	bl	8008efc <getEncoderValue>
 80032fe:	0003      	movs	r3, r0
 8003300:	60bb      	str	r3, [r7, #8]
    uint32_t encoderValueNow3 = encoderValueNow2 - encoderValueNow ;
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	607b      	str	r3, [r7, #4]
  {
 800330a:	e7ee      	b.n	80032ea <main+0x8e>
 800330c:	20000270 	.word	0x20000270
 8003310:	200002bc 	.word	0x200002bc
 8003314:	20000308 	.word	0x20000308
 8003318:	200003ec 	.word	0x200003ec
 800331c:	200003a0 	.word	0x200003a0
 8003320:	20000354 	.word	0x20000354
 8003324:	000009ff 	.word	0x000009ff

08003328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b093      	sub	sp, #76	; 0x4c
 800332c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800332e:	2414      	movs	r4, #20
 8003330:	193b      	adds	r3, r7, r4
 8003332:	0018      	movs	r0, r3
 8003334:	2334      	movs	r3, #52	; 0x34
 8003336:	001a      	movs	r2, r3
 8003338:	2100      	movs	r1, #0
 800333a:	f006 fd07 	bl	8009d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800333e:	1d3b      	adds	r3, r7, #4
 8003340:	0018      	movs	r0, r3
 8003342:	2310      	movs	r3, #16
 8003344:	001a      	movs	r2, r3
 8003346:	2100      	movs	r1, #0
 8003348:	f006 fd00 	bl	8009d4c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	0018      	movs	r0, r3
 8003352:	f001 fa65 	bl	8004820 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003356:	193b      	adds	r3, r7, r4
 8003358:	2201      	movs	r2, #1
 800335a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800335c:	193b      	adds	r3, r7, r4
 800335e:	2280      	movs	r2, #128	; 0x80
 8003360:	0252      	lsls	r2, r2, #9
 8003362:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003364:	0021      	movs	r1, r4
 8003366:	187b      	adds	r3, r7, r1
 8003368:	2202      	movs	r2, #2
 800336a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2203      	movs	r2, #3
 8003370:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2200      	movs	r2, #0
 8003376:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003378:	187b      	adds	r3, r7, r1
 800337a:	2208      	movs	r2, #8
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800337e:	187b      	adds	r3, r7, r1
 8003380:	2280      	movs	r2, #128	; 0x80
 8003382:	0292      	lsls	r2, r2, #10
 8003384:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003386:	187b      	adds	r3, r7, r1
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	0592      	lsls	r2, r2, #22
 800338c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800338e:	187b      	adds	r3, r7, r1
 8003390:	0018      	movs	r0, r3
 8003392:	f001 fa91 	bl	80048b8 <HAL_RCC_OscConfig>
 8003396:	1e03      	subs	r3, r0, #0
 8003398:	d001      	beq.n	800339e <SystemClock_Config+0x76>
  {
    Error_Handler();
 800339a:	f000 f819 	bl	80033d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800339e:	1d3b      	adds	r3, r7, #4
 80033a0:	2207      	movs	r2, #7
 80033a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	2202      	movs	r2, #2
 80033a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033aa:	1d3b      	adds	r3, r7, #4
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033b6:	1d3b      	adds	r3, r7, #4
 80033b8:	2102      	movs	r1, #2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f001 fd8c 	bl	8004ed8 <HAL_RCC_ClockConfig>
 80033c0:	1e03      	subs	r3, r0, #0
 80033c2:	d001      	beq.n	80033c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80033c4:	f000 f804 	bl	80033d0 <Error_Handler>
  }
}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b013      	add	sp, #76	; 0x4c
 80033ce:	bd90      	pop	{r4, r7, pc}

080033d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033d4:	b672      	cpsid	i
}
 80033d6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <Error_Handler+0x8>
	...

080033dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <HAL_MspInit+0x44>)
 80033e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HAL_MspInit+0x44>)
 80033e8:	2101      	movs	r1, #1
 80033ea:	430a      	orrs	r2, r1
 80033ec:	641a      	str	r2, [r3, #64]	; 0x40
 80033ee:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <HAL_MspInit+0x44>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	2201      	movs	r2, #1
 80033f4:	4013      	ands	r3, r2
 80033f6:	607b      	str	r3, [r7, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033fa:	4b09      	ldr	r3, [pc, #36]	; (8003420 <HAL_MspInit+0x44>)
 80033fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <HAL_MspInit+0x44>)
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	0549      	lsls	r1, r1, #21
 8003404:	430a      	orrs	r2, r1
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HAL_MspInit+0x44>)
 800340a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	055b      	lsls	r3, r3, #21
 8003410:	4013      	ands	r3, r2
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	46bd      	mov	sp, r7
 800341a:	b002      	add	sp, #8
 800341c:	bd80      	pop	{r7, pc}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	40021000 	.word	0x40021000

08003424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003428:	e7fe      	b.n	8003428 <NMI_Handler+0x4>

0800342a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800342e:	e7fe      	b.n	800342e <HardFault_Handler+0x4>

08003430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003434:	46c0      	nop			; (mov r8, r8)
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003448:	f000 fea2 	bl	8004190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <TIM3_IRQHandler+0x14>)
 800345a:	0018      	movs	r0, r3
 800345c:	f002 fb56 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003460:	46c0      	nop			; (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	200002bc 	.word	0x200002bc

0800346c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <TIM7_IRQHandler+0x14>)
 8003472:	0018      	movs	r0, r3
 8003474:	f002 fb4a 	bl	8005b0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003478:	46c0      	nop			; (mov r8, r8)
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	20000308 	.word	0x20000308

08003484 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003488:	4b03      	ldr	r3, [pc, #12]	; (8003498 <USART2_IRQHandler+0x14>)
 800348a:	0018      	movs	r0, r3
 800348c:	f003 fcd0 	bl	8006e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	46c0      	nop			; (mov r8, r8)
 8003498:	20000438 	.word	0x20000438

0800349c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  return 1;
 80034a0:	2301      	movs	r3, #1
}
 80034a2:	0018      	movs	r0, r3
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <_kill>:

int _kill(int pid, int sig)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80034b2:	f006 fca5 	bl	8009e00 <__errno>
 80034b6:	0003      	movs	r3, r0
 80034b8:	2216      	movs	r2, #22
 80034ba:	601a      	str	r2, [r3, #0]
  return -1;
 80034bc:	2301      	movs	r3, #1
 80034be:	425b      	negs	r3, r3
}
 80034c0:	0018      	movs	r0, r3
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_exit>:

void _exit (int status)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034d0:	2301      	movs	r3, #1
 80034d2:	425a      	negs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	0011      	movs	r1, r2
 80034d8:	0018      	movs	r0, r3
 80034da:	f7ff ffe5 	bl	80034a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034de:	e7fe      	b.n	80034de <_exit+0x16>

080034e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ec:	2300      	movs	r3, #0
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	e00a      	b.n	8003508 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034f2:	e000      	b.n	80034f6 <_read+0x16>
 80034f4:	bf00      	nop
 80034f6:	0001      	movs	r1, r0
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	60ba      	str	r2, [r7, #8]
 80034fe:	b2ca      	uxtb	r2, r1
 8003500:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3301      	adds	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	429a      	cmp	r2, r3
 800350e:	dbf0      	blt.n	80034f2 <_read+0x12>
  }

  return len;
 8003510:	687b      	ldr	r3, [r7, #4]
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b006      	add	sp, #24
 8003518:	bd80      	pop	{r7, pc}

0800351a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b086      	sub	sp, #24
 800351e:	af00      	add	r7, sp, #0
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	e009      	b.n	8003540 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	60ba      	str	r2, [r7, #8]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff fe7d 	bl	8003234 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	3301      	adds	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	429a      	cmp	r2, r3
 8003546:	dbf1      	blt.n	800352c <_write+0x12>
  }
  return len;
 8003548:	687b      	ldr	r3, [r7, #4]
}
 800354a:	0018      	movs	r0, r3
 800354c:	46bd      	mov	sp, r7
 800354e:	b006      	add	sp, #24
 8003550:	bd80      	pop	{r7, pc}

08003552 <_close>:

int _close(int file)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b082      	sub	sp, #8
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800355a:	2301      	movs	r3, #1
 800355c:	425b      	negs	r3, r3
}
 800355e:	0018      	movs	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	b002      	add	sp, #8
 8003564:	bd80      	pop	{r7, pc}

08003566 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	0192      	lsls	r2, r2, #6
 8003576:	605a      	str	r2, [r3, #4]
  return 0;
 8003578:	2300      	movs	r3, #0
}
 800357a:	0018      	movs	r0, r3
 800357c:	46bd      	mov	sp, r7
 800357e:	b002      	add	sp, #8
 8003580:	bd80      	pop	{r7, pc}

08003582 <_isatty>:

int _isatty(int file)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800358a:	2301      	movs	r3, #1
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	0018      	movs	r0, r3
 80035a4:	46bd      	mov	sp, r7
 80035a6:	b004      	add	sp, #16
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035b4:	4a14      	ldr	r2, [pc, #80]	; (8003608 <_sbrk+0x5c>)
 80035b6:	4b15      	ldr	r3, [pc, #84]	; (800360c <_sbrk+0x60>)
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035c0:	4b13      	ldr	r3, [pc, #76]	; (8003610 <_sbrk+0x64>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035c8:	4b11      	ldr	r3, [pc, #68]	; (8003610 <_sbrk+0x64>)
 80035ca:	4a12      	ldr	r2, [pc, #72]	; (8003614 <_sbrk+0x68>)
 80035cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ce:	4b10      	ldr	r3, [pc, #64]	; (8003610 <_sbrk+0x64>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d207      	bcs.n	80035ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035dc:	f006 fc10 	bl	8009e00 <__errno>
 80035e0:	0003      	movs	r3, r0
 80035e2:	220c      	movs	r2, #12
 80035e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035e6:	2301      	movs	r3, #1
 80035e8:	425b      	negs	r3, r3
 80035ea:	e009      	b.n	8003600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035ec:	4b08      	ldr	r3, [pc, #32]	; (8003610 <_sbrk+0x64>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035f2:	4b07      	ldr	r3, [pc, #28]	; (8003610 <_sbrk+0x64>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	18d2      	adds	r2, r2, r3
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <_sbrk+0x64>)
 80035fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80035fe:	68fb      	ldr	r3, [r7, #12]
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b006      	add	sp, #24
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20009000 	.word	0x20009000
 800360c:	00000400 	.word	0x00000400
 8003610:	2000026c 	.word	0x2000026c
 8003614:	20000788 	.word	0x20000788

08003618 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800361c:	46c0      	nop			; (mov r8, r8)
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b08d      	sub	sp, #52	; 0x34
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800362a:	240c      	movs	r4, #12
 800362c:	193b      	adds	r3, r7, r4
 800362e:	0018      	movs	r0, r3
 8003630:	2324      	movs	r3, #36	; 0x24
 8003632:	001a      	movs	r2, r3
 8003634:	2100      	movs	r1, #0
 8003636:	f006 fb89 	bl	8009d4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800363a:	003b      	movs	r3, r7
 800363c:	0018      	movs	r0, r3
 800363e:	230c      	movs	r3, #12
 8003640:	001a      	movs	r2, r3
 8003642:	2100      	movs	r1, #0
 8003644:	f006 fb82 	bl	8009d4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003648:	4b28      	ldr	r3, [pc, #160]	; (80036ec <MX_TIM1_Init+0xc8>)
 800364a:	4a29      	ldr	r2, [pc, #164]	; (80036f0 <MX_TIM1_Init+0xcc>)
 800364c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800364e:	4b27      	ldr	r3, [pc, #156]	; (80036ec <MX_TIM1_Init+0xc8>)
 8003650:	2200      	movs	r2, #0
 8003652:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003654:	4b25      	ldr	r3, [pc, #148]	; (80036ec <MX_TIM1_Init+0xc8>)
 8003656:	2200      	movs	r2, #0
 8003658:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800365a:	4b24      	ldr	r3, [pc, #144]	; (80036ec <MX_TIM1_Init+0xc8>)
 800365c:	4a25      	ldr	r2, [pc, #148]	; (80036f4 <MX_TIM1_Init+0xd0>)
 800365e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003660:	4b22      	ldr	r3, [pc, #136]	; (80036ec <MX_TIM1_Init+0xc8>)
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <MX_TIM1_Init+0xc8>)
 8003668:	2200      	movs	r2, #0
 800366a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800366c:	4b1f      	ldr	r3, [pc, #124]	; (80036ec <MX_TIM1_Init+0xc8>)
 800366e:	2280      	movs	r2, #128	; 0x80
 8003670:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003672:	0021      	movs	r1, r4
 8003674:	187b      	adds	r3, r7, r1
 8003676:	2203      	movs	r2, #3
 8003678:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800367a:	187b      	adds	r3, r7, r1
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003680:	187b      	adds	r3, r7, r1
 8003682:	2201      	movs	r2, #1
 8003684:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003686:	187b      	adds	r3, r7, r1
 8003688:	2200      	movs	r2, #0
 800368a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800368c:	187b      	adds	r3, r7, r1
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003692:	187b      	adds	r3, r7, r1
 8003694:	2200      	movs	r2, #0
 8003696:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003698:	187b      	adds	r3, r7, r1
 800369a:	2201      	movs	r2, #1
 800369c:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800369e:	187b      	adds	r3, r7, r1
 80036a0:	2200      	movs	r2, #0
 80036a2:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	2200      	movs	r2, #0
 80036a8:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80036aa:	187a      	adds	r2, r7, r1
 80036ac:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <MX_TIM1_Init+0xc8>)
 80036ae:	0011      	movs	r1, r2
 80036b0:	0018      	movs	r0, r3
 80036b2:	f002 f8df 	bl	8005874 <HAL_TIM_Encoder_Init>
 80036b6:	1e03      	subs	r3, r0, #0
 80036b8:	d001      	beq.n	80036be <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80036ba:	f7ff fe89 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036be:	003b      	movs	r3, r7
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80036c4:	003b      	movs	r3, r7
 80036c6:	2200      	movs	r2, #0
 80036c8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ca:	003b      	movs	r3, r7
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036d0:	003a      	movs	r2, r7
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <MX_TIM1_Init+0xc8>)
 80036d4:	0011      	movs	r1, r2
 80036d6:	0018      	movs	r0, r3
 80036d8:	f003 f93a 	bl	8006950 <HAL_TIMEx_MasterConfigSynchronization>
 80036dc:	1e03      	subs	r3, r0, #0
 80036de:	d001      	beq.n	80036e4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80036e0:	f7ff fe76 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	b00d      	add	sp, #52	; 0x34
 80036ea:	bd90      	pop	{r4, r7, pc}
 80036ec:	20000270 	.word	0x20000270
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	0000ffff 	.word	0x0000ffff

080036f8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80036f8:	b590      	push	{r4, r7, lr}
 80036fa:	b08d      	sub	sp, #52	; 0x34
 80036fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036fe:	240c      	movs	r4, #12
 8003700:	193b      	adds	r3, r7, r4
 8003702:	0018      	movs	r0, r3
 8003704:	2324      	movs	r3, #36	; 0x24
 8003706:	001a      	movs	r2, r3
 8003708:	2100      	movs	r1, #0
 800370a:	f006 fb1f 	bl	8009d4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800370e:	003b      	movs	r3, r7
 8003710:	0018      	movs	r0, r3
 8003712:	230c      	movs	r3, #12
 8003714:	001a      	movs	r2, r3
 8003716:	2100      	movs	r1, #0
 8003718:	f006 fb18 	bl	8009d4c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <MX_TIM3_Init+0xbc>)
 800371e:	4a26      	ldr	r2, [pc, #152]	; (80037b8 <MX_TIM3_Init+0xc0>)
 8003720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003722:	4b24      	ldr	r3, [pc, #144]	; (80037b4 <MX_TIM3_Init+0xbc>)
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003728:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <MX_TIM3_Init+0xbc>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800372e:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <MX_TIM3_Init+0xbc>)
 8003730:	4a22      	ldr	r2, [pc, #136]	; (80037bc <MX_TIM3_Init+0xc4>)
 8003732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <MX_TIM3_Init+0xbc>)
 8003736:	2200      	movs	r2, #0
 8003738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800373a:	4b1e      	ldr	r3, [pc, #120]	; (80037b4 <MX_TIM3_Init+0xbc>)
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003740:	0021      	movs	r1, r4
 8003742:	187b      	adds	r3, r7, r1
 8003744:	2203      	movs	r2, #3
 8003746:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003748:	187b      	adds	r3, r7, r1
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800374e:	187b      	adds	r3, r7, r1
 8003750:	2201      	movs	r2, #1
 8003752:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003754:	187b      	adds	r3, r7, r1
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800375a:	187b      	adds	r3, r7, r1
 800375c:	2200      	movs	r2, #0
 800375e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003760:	187b      	adds	r3, r7, r1
 8003762:	2200      	movs	r2, #0
 8003764:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003766:	187b      	adds	r3, r7, r1
 8003768:	2201      	movs	r2, #1
 800376a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800376c:	187b      	adds	r3, r7, r1
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003772:	187b      	adds	r3, r7, r1
 8003774:	2200      	movs	r2, #0
 8003776:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003778:	187a      	adds	r2, r7, r1
 800377a:	4b0e      	ldr	r3, [pc, #56]	; (80037b4 <MX_TIM3_Init+0xbc>)
 800377c:	0011      	movs	r1, r2
 800377e:	0018      	movs	r0, r3
 8003780:	f002 f878 	bl	8005874 <HAL_TIM_Encoder_Init>
 8003784:	1e03      	subs	r3, r0, #0
 8003786:	d001      	beq.n	800378c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003788:	f7ff fe22 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800378c:	003b      	movs	r3, r7
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003792:	003b      	movs	r3, r7
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003798:	003a      	movs	r2, r7
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <MX_TIM3_Init+0xbc>)
 800379c:	0011      	movs	r1, r2
 800379e:	0018      	movs	r0, r3
 80037a0:	f003 f8d6 	bl	8006950 <HAL_TIMEx_MasterConfigSynchronization>
 80037a4:	1e03      	subs	r3, r0, #0
 80037a6:	d001      	beq.n	80037ac <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80037a8:	f7ff fe12 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037ac:	46c0      	nop			; (mov r8, r8)
 80037ae:	46bd      	mov	sp, r7
 80037b0:	b00d      	add	sp, #52	; 0x34
 80037b2:	bd90      	pop	{r4, r7, pc}
 80037b4:	200002bc 	.word	0x200002bc
 80037b8:	40000400 	.word	0x40000400
 80037bc:	0000ffff 	.word	0x0000ffff

080037c0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	0018      	movs	r0, r3
 80037ca:	230c      	movs	r3, #12
 80037cc:	001a      	movs	r2, r3
 80037ce:	2100      	movs	r1, #0
 80037d0:	f006 fabc 	bl	8009d4c <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80037d4:	4b15      	ldr	r3, [pc, #84]	; (800382c <MX_TIM7_Init+0x6c>)
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <MX_TIM7_Init+0x70>)
 80037d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 6400-1;
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <MX_TIM7_Init+0x6c>)
 80037dc:	4a15      	ldr	r2, [pc, #84]	; (8003834 <MX_TIM7_Init+0x74>)
 80037de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e0:	4b12      	ldr	r3, [pc, #72]	; (800382c <MX_TIM7_Init+0x6c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 80037e6:	4b11      	ldr	r3, [pc, #68]	; (800382c <MX_TIM7_Init+0x6c>)
 80037e8:	2263      	movs	r2, #99	; 0x63
 80037ea:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037ec:	4b0f      	ldr	r3, [pc, #60]	; (800382c <MX_TIM7_Init+0x6c>)
 80037ee:	2280      	movs	r2, #128	; 0x80
 80037f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037f2:	4b0e      	ldr	r3, [pc, #56]	; (800382c <MX_TIM7_Init+0x6c>)
 80037f4:	0018      	movs	r0, r3
 80037f6:	f001 fe4b 	bl	8005490 <HAL_TIM_Base_Init>
 80037fa:	1e03      	subs	r3, r0, #0
 80037fc:	d001      	beq.n	8003802 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80037fe:	f7ff fde7 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800380e:	1d3a      	adds	r2, r7, #4
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <MX_TIM7_Init+0x6c>)
 8003812:	0011      	movs	r1, r2
 8003814:	0018      	movs	r0, r3
 8003816:	f003 f89b 	bl	8006950 <HAL_TIMEx_MasterConfigSynchronization>
 800381a:	1e03      	subs	r3, r0, #0
 800381c:	d001      	beq.n	8003822 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800381e:	f7ff fdd7 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	b004      	add	sp, #16
 8003828:	bd80      	pop	{r7, pc}
 800382a:	46c0      	nop			; (mov r8, r8)
 800382c:	20000308 	.word	0x20000308
 8003830:	40001400 	.word	0x40001400
 8003834:	000018ff 	.word	0x000018ff

08003838 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b09c      	sub	sp, #112	; 0x70
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800383e:	2360      	movs	r3, #96	; 0x60
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	0018      	movs	r0, r3
 8003844:	2310      	movs	r3, #16
 8003846:	001a      	movs	r2, r3
 8003848:	2100      	movs	r1, #0
 800384a:	f006 fa7f 	bl	8009d4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800384e:	2354      	movs	r3, #84	; 0x54
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	0018      	movs	r0, r3
 8003854:	230c      	movs	r3, #12
 8003856:	001a      	movs	r2, r3
 8003858:	2100      	movs	r1, #0
 800385a:	f006 fa77 	bl	8009d4c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800385e:	2338      	movs	r3, #56	; 0x38
 8003860:	18fb      	adds	r3, r7, r3
 8003862:	0018      	movs	r0, r3
 8003864:	231c      	movs	r3, #28
 8003866:	001a      	movs	r2, r3
 8003868:	2100      	movs	r1, #0
 800386a:	f006 fa6f 	bl	8009d4c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800386e:	1d3b      	adds	r3, r7, #4
 8003870:	0018      	movs	r0, r3
 8003872:	2334      	movs	r3, #52	; 0x34
 8003874:	001a      	movs	r2, r3
 8003876:	2100      	movs	r1, #0
 8003878:	f006 fa68 	bl	8009d4c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800387c:	4b4d      	ldr	r3, [pc, #308]	; (80039b4 <MX_TIM15_Init+0x17c>)
 800387e:	4a4e      	ldr	r2, [pc, #312]	; (80039b8 <MX_TIM15_Init+0x180>)
 8003880:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8003882:	4b4c      	ldr	r3, [pc, #304]	; (80039b4 <MX_TIM15_Init+0x17c>)
 8003884:	2200      	movs	r2, #0
 8003886:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003888:	4b4a      	ldr	r3, [pc, #296]	; (80039b4 <MX_TIM15_Init+0x17c>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2560-1;
 800388e:	4b49      	ldr	r3, [pc, #292]	; (80039b4 <MX_TIM15_Init+0x17c>)
 8003890:	4a4a      	ldr	r2, [pc, #296]	; (80039bc <MX_TIM15_Init+0x184>)
 8003892:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003894:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <MX_TIM15_Init+0x17c>)
 8003896:	2200      	movs	r2, #0
 8003898:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800389a:	4b46      	ldr	r3, [pc, #280]	; (80039b4 <MX_TIM15_Init+0x17c>)
 800389c:	2200      	movs	r2, #0
 800389e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a0:	4b44      	ldr	r3, [pc, #272]	; (80039b4 <MX_TIM15_Init+0x17c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80038a6:	4b43      	ldr	r3, [pc, #268]	; (80039b4 <MX_TIM15_Init+0x17c>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f001 fdf1 	bl	8005490 <HAL_TIM_Base_Init>
 80038ae:	1e03      	subs	r3, r0, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80038b2:	f7ff fd8d 	bl	80033d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b6:	2160      	movs	r1, #96	; 0x60
 80038b8:	187b      	adds	r3, r7, r1
 80038ba:	2280      	movs	r2, #128	; 0x80
 80038bc:	0152      	lsls	r2, r2, #5
 80038be:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80038c0:	187a      	adds	r2, r7, r1
 80038c2:	4b3c      	ldr	r3, [pc, #240]	; (80039b4 <MX_TIM15_Init+0x17c>)
 80038c4:	0011      	movs	r1, r2
 80038c6:	0018      	movs	r0, r3
 80038c8:	f002 fb52 	bl	8005f70 <HAL_TIM_ConfigClockSource>
 80038cc:	1e03      	subs	r3, r0, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80038d0:	f7ff fd7e 	bl	80033d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80038d4:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <MX_TIM15_Init+0x17c>)
 80038d6:	0018      	movs	r0, r3
 80038d8:	f001 fe88 	bl	80055ec <HAL_TIM_PWM_Init>
 80038dc:	1e03      	subs	r3, r0, #0
 80038de:	d001      	beq.n	80038e4 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80038e0:	f7ff fd76 	bl	80033d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e4:	2154      	movs	r1, #84	; 0x54
 80038e6:	187b      	adds	r3, r7, r1
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ec:	187b      	adds	r3, r7, r1
 80038ee:	2200      	movs	r2, #0
 80038f0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80038f2:	187a      	adds	r2, r7, r1
 80038f4:	4b2f      	ldr	r3, [pc, #188]	; (80039b4 <MX_TIM15_Init+0x17c>)
 80038f6:	0011      	movs	r1, r2
 80038f8:	0018      	movs	r0, r3
 80038fa:	f003 f829 	bl	8006950 <HAL_TIMEx_MasterConfigSynchronization>
 80038fe:	1e03      	subs	r3, r0, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 8003902:	f7ff fd65 	bl	80033d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003906:	2138      	movs	r1, #56	; 0x38
 8003908:	187b      	adds	r3, r7, r1
 800390a:	2260      	movs	r2, #96	; 0x60
 800390c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800390e:	187b      	adds	r3, r7, r1
 8003910:	2200      	movs	r2, #0
 8003912:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003914:	187b      	adds	r3, r7, r1
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800391a:	187b      	adds	r3, r7, r1
 800391c:	2200      	movs	r2, #0
 800391e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003920:	187b      	adds	r3, r7, r1
 8003922:	2200      	movs	r2, #0
 8003924:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003926:	187b      	adds	r3, r7, r1
 8003928:	2200      	movs	r2, #0
 800392a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800392c:	187b      	adds	r3, r7, r1
 800392e:	2200      	movs	r2, #0
 8003930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003932:	1879      	adds	r1, r7, r1
 8003934:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <MX_TIM15_Init+0x17c>)
 8003936:	2200      	movs	r2, #0
 8003938:	0018      	movs	r0, r3
 800393a:	f002 fa19 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 800393e:	1e03      	subs	r3, r0, #0
 8003940:	d001      	beq.n	8003946 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8003942:	f7ff fd45 	bl	80033d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003946:	2338      	movs	r3, #56	; 0x38
 8003948:	18f9      	adds	r1, r7, r3
 800394a:	4b1a      	ldr	r3, [pc, #104]	; (80039b4 <MX_TIM15_Init+0x17c>)
 800394c:	2204      	movs	r2, #4
 800394e:	0018      	movs	r0, r3
 8003950:	f002 fa0e 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8003954:	1e03      	subs	r3, r0, #0
 8003956:	d001      	beq.n	800395c <MX_TIM15_Init+0x124>
  {
    Error_Handler();
 8003958:	f7ff fd3a 	bl	80033d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003962:	1d3b      	adds	r3, r7, #4
 8003964:	2200      	movs	r2, #0
 8003966:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	2200      	movs	r2, #0
 8003972:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800397a:	1d3b      	adds	r3, r7, #4
 800397c:	2280      	movs	r2, #128	; 0x80
 800397e:	0192      	lsls	r2, r2, #6
 8003980:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003982:	1d3b      	adds	r3, r7, #4
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003988:	1d3b      	adds	r3, r7, #4
 800398a:	2200      	movs	r2, #0
 800398c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800398e:	1d3a      	adds	r2, r7, #4
 8003990:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <MX_TIM15_Init+0x17c>)
 8003992:	0011      	movs	r1, r2
 8003994:	0018      	movs	r0, r3
 8003996:	f003 f843 	bl	8006a20 <HAL_TIMEx_ConfigBreakDeadTime>
 800399a:	1e03      	subs	r3, r0, #0
 800399c:	d001      	beq.n	80039a2 <MX_TIM15_Init+0x16a>
  {
    Error_Handler();
 800399e:	f7ff fd17 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80039a2:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <MX_TIM15_Init+0x17c>)
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 fa0f 	bl	8003dc8 <HAL_TIM_MspPostInit>

}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b01c      	add	sp, #112	; 0x70
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	20000354 	.word	0x20000354
 80039b8:	40014000 	.word	0x40014000
 80039bc:	000009ff 	.word	0x000009ff

080039c0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b094      	sub	sp, #80	; 0x50
 80039c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80039c6:	2334      	movs	r3, #52	; 0x34
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	0018      	movs	r0, r3
 80039cc:	231c      	movs	r3, #28
 80039ce:	001a      	movs	r2, r3
 80039d0:	2100      	movs	r1, #0
 80039d2:	f006 f9bb 	bl	8009d4c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039d6:	003b      	movs	r3, r7
 80039d8:	0018      	movs	r0, r3
 80039da:	2334      	movs	r3, #52	; 0x34
 80039dc:	001a      	movs	r2, r3
 80039de:	2100      	movs	r1, #0
 80039e0:	f006 f9b4 	bl	8009d4c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80039e4:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <MX_TIM16_Init+0x104>)
 80039e6:	4a38      	ldr	r2, [pc, #224]	; (8003ac8 <MX_TIM16_Init+0x108>)
 80039e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80039ea:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <MX_TIM16_Init+0x104>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f0:	4b34      	ldr	r3, [pc, #208]	; (8003ac4 <MX_TIM16_Init+0x104>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2560-1;
 80039f6:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <MX_TIM16_Init+0x104>)
 80039f8:	4a34      	ldr	r2, [pc, #208]	; (8003acc <MX_TIM16_Init+0x10c>)
 80039fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039fc:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <MX_TIM16_Init+0x104>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003a02:	4b30      	ldr	r3, [pc, #192]	; (8003ac4 <MX_TIM16_Init+0x104>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a08:	4b2e      	ldr	r3, [pc, #184]	; (8003ac4 <MX_TIM16_Init+0x104>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003a0e:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <MX_TIM16_Init+0x104>)
 8003a10:	0018      	movs	r0, r3
 8003a12:	f001 fd3d 	bl	8005490 <HAL_TIM_Base_Init>
 8003a16:	1e03      	subs	r3, r0, #0
 8003a18:	d001      	beq.n	8003a1e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003a1a:	f7ff fcd9 	bl	80033d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <MX_TIM16_Init+0x104>)
 8003a20:	0018      	movs	r0, r3
 8003a22:	f001 fde3 	bl	80055ec <HAL_TIM_PWM_Init>
 8003a26:	1e03      	subs	r3, r0, #0
 8003a28:	d001      	beq.n	8003a2e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003a2a:	f7ff fcd1 	bl	80033d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a2e:	2134      	movs	r1, #52	; 0x34
 8003a30:	187b      	adds	r3, r7, r1
 8003a32:	2260      	movs	r2, #96	; 0x60
 8003a34:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	2200      	movs	r2, #0
 8003a3a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a42:	187b      	adds	r3, r7, r1
 8003a44:	2200      	movs	r2, #0
 8003a46:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a48:	187b      	adds	r3, r7, r1
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a4e:	187b      	adds	r3, r7, r1
 8003a50:	2200      	movs	r2, #0
 8003a52:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a54:	187b      	adds	r3, r7, r1
 8003a56:	2200      	movs	r2, #0
 8003a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a5a:	1879      	adds	r1, r7, r1
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <MX_TIM16_Init+0x104>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	0018      	movs	r0, r3
 8003a62:	f002 f985 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d001      	beq.n	8003a6e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8003a6a:	f7ff fcb1 	bl	80033d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a6e:	003b      	movs	r3, r7
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a74:	003b      	movs	r3, r7
 8003a76:	2200      	movs	r2, #0
 8003a78:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a7a:	003b      	movs	r3, r7
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a80:	003b      	movs	r3, r7
 8003a82:	2200      	movs	r2, #0
 8003a84:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a86:	003b      	movs	r3, r7
 8003a88:	2200      	movs	r2, #0
 8003a8a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a8c:	003b      	movs	r3, r7
 8003a8e:	2280      	movs	r2, #128	; 0x80
 8003a90:	0192      	lsls	r2, r2, #6
 8003a92:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a94:	003b      	movs	r3, r7
 8003a96:	2200      	movs	r2, #0
 8003a98:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a9a:	003b      	movs	r3, r7
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003aa0:	003a      	movs	r2, r7
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <MX_TIM16_Init+0x104>)
 8003aa4:	0011      	movs	r1, r2
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f002 ffba 	bl	8006a20 <HAL_TIMEx_ConfigBreakDeadTime>
 8003aac:	1e03      	subs	r3, r0, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8003ab0:	f7ff fc8e 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003ab4:	4b03      	ldr	r3, [pc, #12]	; (8003ac4 <MX_TIM16_Init+0x104>)
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 f986 	bl	8003dc8 <HAL_TIM_MspPostInit>

}
 8003abc:	46c0      	nop			; (mov r8, r8)
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b014      	add	sp, #80	; 0x50
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200003a0 	.word	0x200003a0
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	000009ff 	.word	0x000009ff

08003ad0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b094      	sub	sp, #80	; 0x50
 8003ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ad6:	2334      	movs	r3, #52	; 0x34
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	0018      	movs	r0, r3
 8003adc:	231c      	movs	r3, #28
 8003ade:	001a      	movs	r2, r3
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	f006 f933 	bl	8009d4c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003ae6:	003b      	movs	r3, r7
 8003ae8:	0018      	movs	r0, r3
 8003aea:	2334      	movs	r3, #52	; 0x34
 8003aec:	001a      	movs	r2, r3
 8003aee:	2100      	movs	r1, #0
 8003af0:	f006 f92c 	bl	8009d4c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003af4:	4b37      	ldr	r3, [pc, #220]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003af6:	4a38      	ldr	r2, [pc, #224]	; (8003bd8 <MX_TIM17_Init+0x108>)
 8003af8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8003afa:	4b36      	ldr	r3, [pc, #216]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b00:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2560-1;
 8003b06:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003b08:	4a34      	ldr	r2, [pc, #208]	; (8003bdc <MX_TIM17_Init+0x10c>)
 8003b0a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b0c:	4b31      	ldr	r3, [pc, #196]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003b12:	4b30      	ldr	r3, [pc, #192]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b18:	4b2e      	ldr	r3, [pc, #184]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003b1e:	4b2d      	ldr	r3, [pc, #180]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003b20:	0018      	movs	r0, r3
 8003b22:	f001 fcb5 	bl	8005490 <HAL_TIM_Base_Init>
 8003b26:	1e03      	subs	r3, r0, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003b2a:	f7ff fc51 	bl	80033d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003b2e:	4b29      	ldr	r3, [pc, #164]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003b30:	0018      	movs	r0, r3
 8003b32:	f001 fd5b 	bl	80055ec <HAL_TIM_PWM_Init>
 8003b36:	1e03      	subs	r3, r0, #0
 8003b38:	d001      	beq.n	8003b3e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8003b3a:	f7ff fc49 	bl	80033d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b3e:	2134      	movs	r1, #52	; 0x34
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	2260      	movs	r2, #96	; 0x60
 8003b44:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	2200      	movs	r2, #0
 8003b4a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	2200      	movs	r2, #0
 8003b50:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003b52:	187b      	adds	r3, r7, r1
 8003b54:	2200      	movs	r2, #0
 8003b56:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b58:	187b      	adds	r3, r7, r1
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003b5e:	187b      	adds	r3, r7, r1
 8003b60:	2200      	movs	r2, #0
 8003b62:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003b64:	187b      	adds	r3, r7, r1
 8003b66:	2200      	movs	r2, #0
 8003b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b6a:	1879      	adds	r1, r7, r1
 8003b6c:	4b19      	ldr	r3, [pc, #100]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	0018      	movs	r0, r3
 8003b72:	f002 f8fd 	bl	8005d70 <HAL_TIM_PWM_ConfigChannel>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d001      	beq.n	8003b7e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003b7a:	f7ff fc29 	bl	80033d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003b7e:	003b      	movs	r3, r7
 8003b80:	2200      	movs	r2, #0
 8003b82:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003b84:	003b      	movs	r3, r7
 8003b86:	2200      	movs	r2, #0
 8003b88:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003b8a:	003b      	movs	r3, r7
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b90:	003b      	movs	r3, r7
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b96:	003b      	movs	r3, r7
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b9c:	003b      	movs	r3, r7
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	0192      	lsls	r2, r2, #6
 8003ba2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ba4:	003b      	movs	r3, r7
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003baa:	003b      	movs	r3, r7
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003bb0:	003a      	movs	r2, r7
 8003bb2:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003bb4:	0011      	movs	r1, r2
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f002 ff32 	bl	8006a20 <HAL_TIMEx_ConfigBreakDeadTime>
 8003bbc:	1e03      	subs	r3, r0, #0
 8003bbe:	d001      	beq.n	8003bc4 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8003bc0:	f7ff fc06 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <MX_TIM17_Init+0x104>)
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f000 f8fe 	bl	8003dc8 <HAL_TIM_MspPostInit>

}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b014      	add	sp, #80	; 0x50
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	200003ec 	.word	0x200003ec
 8003bd8:	40014800 	.word	0x40014800
 8003bdc:	000009ff 	.word	0x000009ff

08003be0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003be0:	b590      	push	{r4, r7, lr}
 8003be2:	b08d      	sub	sp, #52	; 0x34
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	241c      	movs	r4, #28
 8003bea:	193b      	adds	r3, r7, r4
 8003bec:	0018      	movs	r0, r3
 8003bee:	2314      	movs	r3, #20
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	f006 f8aa 	bl	8009d4c <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a3a      	ldr	r2, [pc, #232]	; (8003ce8 <HAL_TIM_Encoder_MspInit+0x108>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d132      	bne.n	8003c68 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c02:	4b3a      	ldr	r3, [pc, #232]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c06:	4b39      	ldr	r3, [pc, #228]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c08:	2180      	movs	r1, #128	; 0x80
 8003c0a:	0109      	lsls	r1, r1, #4
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
 8003c10:	4b36      	ldr	r3, [pc, #216]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c14:	2380      	movs	r3, #128	; 0x80
 8003c16:	011b      	lsls	r3, r3, #4
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c1e:	4b33      	ldr	r3, [pc, #204]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c22:	4b32      	ldr	r3, [pc, #200]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c24:	2101      	movs	r1, #1
 8003c26:	430a      	orrs	r2, r1
 8003c28:	635a      	str	r2, [r3, #52]	; 0x34
 8003c2a:	4b30      	ldr	r3, [pc, #192]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c2e:	2201      	movs	r2, #1
 8003c30:	4013      	ands	r3, r2
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003c36:	193b      	adds	r3, r7, r4
 8003c38:	22c0      	movs	r2, #192	; 0xc0
 8003c3a:	0092      	lsls	r2, r2, #2
 8003c3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3e:	0021      	movs	r1, r4
 8003c40:	187b      	adds	r3, r7, r1
 8003c42:	2202      	movs	r2, #2
 8003c44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	187b      	adds	r3, r7, r1
 8003c48:	2200      	movs	r2, #0
 8003c4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4c:	187b      	adds	r3, r7, r1
 8003c4e:	2200      	movs	r2, #0
 8003c50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003c52:	187b      	adds	r3, r7, r1
 8003c54:	2202      	movs	r2, #2
 8003c56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c58:	187a      	adds	r2, r7, r1
 8003c5a:	23a0      	movs	r3, #160	; 0xa0
 8003c5c:	05db      	lsls	r3, r3, #23
 8003c5e:	0011      	movs	r1, r2
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 fc5b 	bl	800451c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003c66:	e03a      	b.n	8003cde <HAL_TIM_Encoder_MspInit+0xfe>
  else if(tim_encoderHandle->Instance==TIM3)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a20      	ldr	r2, [pc, #128]	; (8003cf0 <HAL_TIM_Encoder_MspInit+0x110>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d135      	bne.n	8003cde <HAL_TIM_Encoder_MspInit+0xfe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c72:	4b1e      	ldr	r3, [pc, #120]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c76:	4b1d      	ldr	r3, [pc, #116]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c78:	2102      	movs	r1, #2
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c7e:	4b1b      	ldr	r3, [pc, #108]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	2202      	movs	r2, #2
 8003c84:	4013      	ands	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c8a:	4b18      	ldr	r3, [pc, #96]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c8e:	4b17      	ldr	r3, [pc, #92]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c90:	2104      	movs	r1, #4
 8003c92:	430a      	orrs	r2, r1
 8003c94:	635a      	str	r2, [r3, #52]	; 0x34
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_TIM_Encoder_MspInit+0x10c>)
 8003c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ca2:	211c      	movs	r1, #28
 8003ca4:	187b      	adds	r3, r7, r1
 8003ca6:	22c0      	movs	r2, #192	; 0xc0
 8003ca8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003caa:	187b      	adds	r3, r7, r1
 8003cac:	2202      	movs	r2, #2
 8003cae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	187b      	adds	r3, r7, r1
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb6:	187b      	adds	r3, r7, r1
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003cbc:	187b      	adds	r3, r7, r1
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cc2:	187b      	adds	r3, r7, r1
 8003cc4:	4a0b      	ldr	r2, [pc, #44]	; (8003cf4 <HAL_TIM_Encoder_MspInit+0x114>)
 8003cc6:	0019      	movs	r1, r3
 8003cc8:	0010      	movs	r0, r2
 8003cca:	f000 fc27 	bl	800451c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	2010      	movs	r0, #16
 8003cd4:	f000 fb24 	bl	8004320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003cd8:	2010      	movs	r0, #16
 8003cda:	f000 fb36 	bl	800434a <HAL_NVIC_EnableIRQ>
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b00d      	add	sp, #52	; 0x34
 8003ce4:	bd90      	pop	{r4, r7, pc}
 8003ce6:	46c0      	nop			; (mov r8, r8)
 8003ce8:	40012c00 	.word	0x40012c00
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	50000800 	.word	0x50000800

08003cf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a2b      	ldr	r2, [pc, #172]	; (8003db4 <HAL_TIM_Base_MspInit+0xbc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d114      	bne.n	8003d34 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d0a:	4b2b      	ldr	r3, [pc, #172]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0e:	4b2a      	ldr	r3, [pc, #168]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d10:	2120      	movs	r1, #32
 8003d12:	430a      	orrs	r2, r1
 8003d14:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d16:	4b28      	ldr	r3, [pc, #160]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	697b      	ldr	r3, [r7, #20]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003d22:	2200      	movs	r2, #0
 8003d24:	2100      	movs	r1, #0
 8003d26:	2012      	movs	r0, #18
 8003d28:	f000 fafa 	bl	8004320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d2c:	2012      	movs	r0, #18
 8003d2e:	f000 fb0c 	bl	800434a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003d32:	e03a      	b.n	8003daa <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM15)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a20      	ldr	r2, [pc, #128]	; (8003dbc <HAL_TIM_Base_MspInit+0xc4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d10e      	bne.n	8003d5c <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d44:	2180      	movs	r1, #128	; 0x80
 8003d46:	0249      	lsls	r1, r1, #9
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d50:	2380      	movs	r3, #128	; 0x80
 8003d52:	025b      	lsls	r3, r3, #9
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
 8003d58:	693b      	ldr	r3, [r7, #16]
}
 8003d5a:	e026      	b.n	8003daa <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM16)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_TIM_Base_MspInit+0xc8>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d10e      	bne.n	8003d84 <HAL_TIM_Base_MspInit+0x8c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003d66:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	0289      	lsls	r1, r1, #10
 8003d70:	430a      	orrs	r2, r1
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
 8003d74:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	029b      	lsls	r3, r3, #10
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
}
 8003d82:	e012      	b.n	8003daa <HAL_TIM_Base_MspInit+0xb2>
  else if(tim_baseHandle->Instance==TIM17)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a0e      	ldr	r2, [pc, #56]	; (8003dc4 <HAL_TIM_Base_MspInit+0xcc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d10d      	bne.n	8003daa <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d92:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	02c9      	lsls	r1, r1, #11
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d9c:	4b06      	ldr	r3, [pc, #24]	; (8003db8 <HAL_TIM_Base_MspInit+0xc0>)
 8003d9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da0:	2380      	movs	r3, #128	; 0x80
 8003da2:	02db      	lsls	r3, r3, #11
 8003da4:	4013      	ands	r3, r2
 8003da6:	60bb      	str	r3, [r7, #8]
 8003da8:	68bb      	ldr	r3, [r7, #8]
}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b006      	add	sp, #24
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	40001400 	.word	0x40001400
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40014000 	.word	0x40014000
 8003dc0:	40014400 	.word	0x40014400
 8003dc4:	40014800 	.word	0x40014800

08003dc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003dc8:	b590      	push	{r4, r7, lr}
 8003dca:	b08b      	sub	sp, #44	; 0x2c
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd0:	2414      	movs	r4, #20
 8003dd2:	193b      	adds	r3, r7, r4
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	2314      	movs	r3, #20
 8003dd8:	001a      	movs	r2, r3
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f005 ffb6 	bl	8009d4c <memset>
  if(timHandle->Instance==TIM15)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <HAL_TIM_MspPostInit+0x110>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d123      	bne.n	8003e32 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dea:	4b3c      	ldr	r3, [pc, #240]	; (8003edc <HAL_TIM_MspPostInit+0x114>)
 8003dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dee:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <HAL_TIM_MspPostInit+0x114>)
 8003df0:	2102      	movs	r1, #2
 8003df2:	430a      	orrs	r2, r1
 8003df4:	635a      	str	r2, [r3, #52]	; 0x34
 8003df6:	4b39      	ldr	r3, [pc, #228]	; (8003edc <HAL_TIM_MspPostInit+0x114>)
 8003df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]
    /**TIM15 GPIO Configuration
    PB14     ------> TIM15_CH1
    PB15     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003e02:	193b      	adds	r3, r7, r4
 8003e04:	22c0      	movs	r2, #192	; 0xc0
 8003e06:	0212      	lsls	r2, r2, #8
 8003e08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0a:	0021      	movs	r1, r4
 8003e0c:	187b      	adds	r3, r7, r1
 8003e0e:	2202      	movs	r2, #2
 8003e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	187b      	adds	r3, r7, r1
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM15;
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	2205      	movs	r2, #5
 8003e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	4a2e      	ldr	r2, [pc, #184]	; (8003ee0 <HAL_TIM_MspPostInit+0x118>)
 8003e28:	0019      	movs	r1, r3
 8003e2a:	0010      	movs	r0, r2
 8003e2c:	f000 fb76 	bl	800451c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003e30:	e04e      	b.n	8003ed0 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM16)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2b      	ldr	r2, [pc, #172]	; (8003ee4 <HAL_TIM_MspPostInit+0x11c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d122      	bne.n	8003e82 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <HAL_TIM_MspPostInit+0x114>)
 8003e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e40:	4b26      	ldr	r3, [pc, #152]	; (8003edc <HAL_TIM_MspPostInit+0x114>)
 8003e42:	2108      	movs	r1, #8
 8003e44:	430a      	orrs	r2, r1
 8003e46:	635a      	str	r2, [r3, #52]	; 0x34
 8003e48:	4b24      	ldr	r3, [pc, #144]	; (8003edc <HAL_TIM_MspPostInit+0x114>)
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4c:	2208      	movs	r2, #8
 8003e4e:	4013      	ands	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003e54:	2114      	movs	r1, #20
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	2201      	movs	r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	2202      	movs	r2, #2
 8003e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2202      	movs	r2, #2
 8003e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	4a1c      	ldr	r2, [pc, #112]	; (8003ee8 <HAL_TIM_MspPostInit+0x120>)
 8003e78:	0019      	movs	r1, r3
 8003e7a:	0010      	movs	r0, r2
 8003e7c:	f000 fb4e 	bl	800451c <HAL_GPIO_Init>
}
 8003e80:	e026      	b.n	8003ed0 <HAL_TIM_MspPostInit+0x108>
  else if(timHandle->Instance==TIM17)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a19      	ldr	r2, [pc, #100]	; (8003eec <HAL_TIM_MspPostInit+0x124>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d121      	bne.n	8003ed0 <HAL_TIM_MspPostInit+0x108>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e8c:	4b13      	ldr	r3, [pc, #76]	; (8003edc <HAL_TIM_MspPostInit+0x114>)
 8003e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e90:	4b12      	ldr	r3, [pc, #72]	; (8003edc <HAL_TIM_MspPostInit+0x114>)
 8003e92:	2108      	movs	r1, #8
 8003e94:	430a      	orrs	r2, r1
 8003e96:	635a      	str	r2, [r3, #52]	; 0x34
 8003e98:	4b10      	ldr	r3, [pc, #64]	; (8003edc <HAL_TIM_MspPostInit+0x114>)
 8003e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003ea4:	2114      	movs	r1, #20
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	2202      	movs	r2, #2
 8003eb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	2200      	movs	r2, #0
 8003ebc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8003ebe:	187b      	adds	r3, r7, r1
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	4a08      	ldr	r2, [pc, #32]	; (8003ee8 <HAL_TIM_MspPostInit+0x120>)
 8003ec8:	0019      	movs	r1, r3
 8003eca:	0010      	movs	r0, r2
 8003ecc:	f000 fb26 	bl	800451c <HAL_GPIO_Init>
}
 8003ed0:	46c0      	nop			; (mov r8, r8)
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	b00b      	add	sp, #44	; 0x2c
 8003ed6:	bd90      	pop	{r4, r7, pc}
 8003ed8:	40014000 	.word	0x40014000
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	50000400 	.word	0x50000400
 8003ee4:	40014400 	.word	0x40014400
 8003ee8:	50000c00 	.word	0x50000c00
 8003eec:	40014800 	.word	0x40014800

08003ef0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003ef6:	4a26      	ldr	r2, [pc, #152]	; (8003f90 <MX_USART2_UART_Init+0xa0>)
 8003ef8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003efc:	22e1      	movs	r2, #225	; 0xe1
 8003efe:	0252      	lsls	r2, r2, #9
 8003f00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f08:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f16:	220c      	movs	r2, #12
 8003f18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f20:	4b1a      	ldr	r3, [pc, #104]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f26:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f2c:	4b17      	ldr	r3, [pc, #92]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f2e:	2200      	movs	r2, #0
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003f32:	4b16      	ldr	r3, [pc, #88]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f34:	2208      	movs	r2, #8
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
  huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	0212      	lsls	r2, r2, #8
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f40:	4b12      	ldr	r3, [pc, #72]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f42:	0018      	movs	r0, r3
 8003f44:	f002 fe2a 	bl	8006b9c <HAL_UART_Init>
 8003f48:	1e03      	subs	r3, r0, #0
 8003f4a:	d001      	beq.n	8003f50 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8003f4c:	f7ff fa40 	bl	80033d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f50:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f52:	2100      	movs	r1, #0
 8003f54:	0018      	movs	r0, r3
 8003f56:	f004 fc9b 	bl	8008890 <HAL_UARTEx_SetTxFifoThreshold>
 8003f5a:	1e03      	subs	r3, r0, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_USART2_UART_Init+0x72>
  {
    Error_Handler();
 8003f5e:	f7ff fa37 	bl	80033d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f62:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f64:	2100      	movs	r1, #0
 8003f66:	0018      	movs	r0, r3
 8003f68:	f004 fcd2 	bl	8008910 <HAL_UARTEx_SetRxFifoThreshold>
 8003f6c:	1e03      	subs	r3, r0, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_USART2_UART_Init+0x84>
  {
    Error_Handler();
 8003f70:	f7ff fa2e 	bl	80033d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <MX_USART2_UART_Init+0x9c>)
 8003f76:	0018      	movs	r0, r3
 8003f78:	f004 fc50 	bl	800881c <HAL_UARTEx_DisableFifoMode>
 8003f7c:	1e03      	subs	r3, r0, #0
 8003f7e:	d001      	beq.n	8003f84 <MX_USART2_UART_Init+0x94>
  {
    Error_Handler();
 8003f80:	f7ff fa26 	bl	80033d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f84:	46c0      	nop			; (mov r8, r8)
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	20000438 	.word	0x20000438
 8003f90:	40004400 	.word	0x40004400

08003f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f94:	b590      	push	{r4, r7, lr}
 8003f96:	b091      	sub	sp, #68	; 0x44
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f9c:	232c      	movs	r3, #44	; 0x2c
 8003f9e:	18fb      	adds	r3, r7, r3
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	2314      	movs	r3, #20
 8003fa4:	001a      	movs	r2, r3
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	f005 fed0 	bl	8009d4c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003fac:	2410      	movs	r4, #16
 8003fae:	193b      	adds	r3, r7, r4
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	231c      	movs	r3, #28
 8003fb4:	001a      	movs	r2, r3
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	f005 fec8 	bl	8009d4c <memset>
  if(uartHandle->Instance==USART2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a26      	ldr	r2, [pc, #152]	; (800405c <HAL_UART_MspInit+0xc8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d145      	bne.n	8004052 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003fc6:	193b      	adds	r3, r7, r4
 8003fc8:	2202      	movs	r2, #2
 8003fca:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003fcc:	193b      	adds	r3, r7, r4
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f001 f927 	bl	8005228 <HAL_RCCEx_PeriphCLKConfig>
 8003fda:	1e03      	subs	r3, r0, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003fde:	f7ff f9f7 	bl	80033d0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003fe2:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <HAL_UART_MspInit+0xcc>)
 8003fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe6:	4b1e      	ldr	r3, [pc, #120]	; (8004060 <HAL_UART_MspInit+0xcc>)
 8003fe8:	2180      	movs	r1, #128	; 0x80
 8003fea:	0289      	lsls	r1, r1, #10
 8003fec:	430a      	orrs	r2, r1
 8003fee:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_UART_MspInit+0xcc>)
 8003ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	029b      	lsls	r3, r3, #10
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ffe:	4b18      	ldr	r3, [pc, #96]	; (8004060 <HAL_UART_MspInit+0xcc>)
 8004000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <HAL_UART_MspInit+0xcc>)
 8004004:	2108      	movs	r1, #8
 8004006:	430a      	orrs	r2, r1
 8004008:	635a      	str	r2, [r3, #52]	; 0x34
 800400a:	4b15      	ldr	r3, [pc, #84]	; (8004060 <HAL_UART_MspInit+0xcc>)
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800400e:	2208      	movs	r2, #8
 8004010:	4013      	ands	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004016:	212c      	movs	r1, #44	; 0x2c
 8004018:	187b      	adds	r3, r7, r1
 800401a:	2260      	movs	r2, #96	; 0x60
 800401c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401e:	187b      	adds	r3, r7, r1
 8004020:	2202      	movs	r2, #2
 8004022:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	187b      	adds	r3, r7, r1
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402a:	187b      	adds	r3, r7, r1
 800402c:	2200      	movs	r2, #0
 800402e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART2;
 8004030:	187b      	adds	r3, r7, r1
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004036:	187b      	adds	r3, r7, r1
 8004038:	4a0a      	ldr	r2, [pc, #40]	; (8004064 <HAL_UART_MspInit+0xd0>)
 800403a:	0019      	movs	r1, r3
 800403c:	0010      	movs	r0, r2
 800403e:	f000 fa6d 	bl	800451c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004042:	2200      	movs	r2, #0
 8004044:	2100      	movs	r1, #0
 8004046:	201c      	movs	r0, #28
 8004048:	f000 f96a 	bl	8004320 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800404c:	201c      	movs	r0, #28
 800404e:	f000 f97c 	bl	800434a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b011      	add	sp, #68	; 0x44
 8004058:	bd90      	pop	{r4, r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	40004400 	.word	0x40004400
 8004060:	40021000 	.word	0x40021000
 8004064:	50000c00 	.word	0x50000c00

08004068 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004068:	480d      	ldr	r0, [pc, #52]	; (80040a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800406a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800406c:	f7ff fad4 	bl	8003618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004070:	480c      	ldr	r0, [pc, #48]	; (80040a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004072:	490d      	ldr	r1, [pc, #52]	; (80040a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004074:	4a0d      	ldr	r2, [pc, #52]	; (80040ac <LoopForever+0xe>)
  movs r3, #0
 8004076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004078:	e002      	b.n	8004080 <LoopCopyDataInit>

0800407a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800407a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800407c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800407e:	3304      	adds	r3, #4

08004080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004084:	d3f9      	bcc.n	800407a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004088:	4c0a      	ldr	r4, [pc, #40]	; (80040b4 <LoopForever+0x16>)
  movs r3, #0
 800408a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800408c:	e001      	b.n	8004092 <LoopFillZerobss>

0800408e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800408e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004090:	3204      	adds	r2, #4

08004092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004094:	d3fb      	bcc.n	800408e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004096:	f005 feb9 	bl	8009e0c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800409a:	f7ff f8df 	bl	800325c <main>

0800409e <LoopForever>:

LoopForever:
  b LoopForever
 800409e:	e7fe      	b.n	800409e <LoopForever>
  ldr   r0, =_estack
 80040a0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80040a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040a8:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80040ac:	0800c5c0 	.word	0x0800c5c0
  ldr r2, =_sbss
 80040b0:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80040b4:	20000788 	.word	0x20000788

080040b8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80040b8:	e7fe      	b.n	80040b8 <ADC1_IRQHandler>
	...

080040bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80040c2:	1dfb      	adds	r3, r7, #7
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040c8:	4b0b      	ldr	r3, [pc, #44]	; (80040f8 <HAL_Init+0x3c>)
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_Init+0x3c>)
 80040ce:	2180      	movs	r1, #128	; 0x80
 80040d0:	0049      	lsls	r1, r1, #1
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040d6:	2003      	movs	r0, #3
 80040d8:	f000 f810 	bl	80040fc <HAL_InitTick>
 80040dc:	1e03      	subs	r3, r0, #0
 80040de:	d003      	beq.n	80040e8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80040e0:	1dfb      	adds	r3, r7, #7
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e001      	b.n	80040ec <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80040e8:	f7ff f978 	bl	80033dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80040ec:	1dfb      	adds	r3, r7, #7
 80040ee:	781b      	ldrb	r3, [r3, #0]
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	40022000 	.word	0x40022000

080040fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040fc:	b590      	push	{r4, r7, lr}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004104:	230f      	movs	r3, #15
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <HAL_InitTick+0x88>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02b      	beq.n	800416c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8004114:	4b1c      	ldr	r3, [pc, #112]	; (8004188 <HAL_InitTick+0x8c>)
 8004116:	681c      	ldr	r4, [r3, #0]
 8004118:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <HAL_InitTick+0x88>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	0019      	movs	r1, r3
 800411e:	23fa      	movs	r3, #250	; 0xfa
 8004120:	0098      	lsls	r0, r3, #2
 8004122:	f7fc f809 	bl	8000138 <__udivsi3>
 8004126:	0003      	movs	r3, r0
 8004128:	0019      	movs	r1, r3
 800412a:	0020      	movs	r0, r4
 800412c:	f7fc f804 	bl	8000138 <__udivsi3>
 8004130:	0003      	movs	r3, r0
 8004132:	0018      	movs	r0, r3
 8004134:	f000 f919 	bl	800436a <HAL_SYSTICK_Config>
 8004138:	1e03      	subs	r3, r0, #0
 800413a:	d112      	bne.n	8004162 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b03      	cmp	r3, #3
 8004140:	d80a      	bhi.n	8004158 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	2301      	movs	r3, #1
 8004146:	425b      	negs	r3, r3
 8004148:	2200      	movs	r2, #0
 800414a:	0018      	movs	r0, r3
 800414c:	f000 f8e8 	bl	8004320 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004150:	4b0e      	ldr	r3, [pc, #56]	; (800418c <HAL_InitTick+0x90>)
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e00d      	b.n	8004174 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004158:	230f      	movs	r3, #15
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	2201      	movs	r2, #1
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	e008      	b.n	8004174 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004162:	230f      	movs	r3, #15
 8004164:	18fb      	adds	r3, r7, r3
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e003      	b.n	8004174 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800416c:	230f      	movs	r3, #15
 800416e:	18fb      	adds	r3, r7, r3
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004174:	230f      	movs	r3, #15
 8004176:	18fb      	adds	r3, r7, r3
 8004178:	781b      	ldrb	r3, [r3, #0]
}
 800417a:	0018      	movs	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	b005      	add	sp, #20
 8004180:	bd90      	pop	{r4, r7, pc}
 8004182:	46c0      	nop			; (mov r8, r8)
 8004184:	20000008 	.word	0x20000008
 8004188:	20000000 	.word	0x20000000
 800418c:	20000004 	.word	0x20000004

08004190 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <HAL_IncTick+0x1c>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	001a      	movs	r2, r3
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <HAL_IncTick+0x20>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	18d2      	adds	r2, r2, r3
 80041a0:	4b03      	ldr	r3, [pc, #12]	; (80041b0 <HAL_IncTick+0x20>)
 80041a2:	601a      	str	r2, [r3, #0]
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	20000008 	.word	0x20000008
 80041b0:	200004cc 	.word	0x200004cc

080041b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  return uwTick;
 80041b8:	4b02      	ldr	r3, [pc, #8]	; (80041c4 <HAL_GetTick+0x10>)
 80041ba:	681b      	ldr	r3, [r3, #0]
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	46c0      	nop			; (mov r8, r8)
 80041c4:	200004cc 	.word	0x200004cc

080041c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	0002      	movs	r2, r0
 80041d0:	1dfb      	adds	r3, r7, #7
 80041d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041d4:	1dfb      	adds	r3, r7, #7
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b7f      	cmp	r3, #127	; 0x7f
 80041da:	d809      	bhi.n	80041f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041dc:	1dfb      	adds	r3, r7, #7
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	001a      	movs	r2, r3
 80041e2:	231f      	movs	r3, #31
 80041e4:	401a      	ands	r2, r3
 80041e6:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <__NVIC_EnableIRQ+0x30>)
 80041e8:	2101      	movs	r1, #1
 80041ea:	4091      	lsls	r1, r2
 80041ec:	000a      	movs	r2, r1
 80041ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	e000e100 	.word	0xe000e100

080041fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	0002      	movs	r2, r0
 8004204:	6039      	str	r1, [r7, #0]
 8004206:	1dfb      	adds	r3, r7, #7
 8004208:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b7f      	cmp	r3, #127	; 0x7f
 8004210:	d828      	bhi.n	8004264 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004212:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <__NVIC_SetPriority+0xd4>)
 8004214:	1dfb      	adds	r3, r7, #7
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	b25b      	sxtb	r3, r3
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	33c0      	adds	r3, #192	; 0xc0
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	589b      	ldr	r3, [r3, r2]
 8004222:	1dfa      	adds	r2, r7, #7
 8004224:	7812      	ldrb	r2, [r2, #0]
 8004226:	0011      	movs	r1, r2
 8004228:	2203      	movs	r2, #3
 800422a:	400a      	ands	r2, r1
 800422c:	00d2      	lsls	r2, r2, #3
 800422e:	21ff      	movs	r1, #255	; 0xff
 8004230:	4091      	lsls	r1, r2
 8004232:	000a      	movs	r2, r1
 8004234:	43d2      	mvns	r2, r2
 8004236:	401a      	ands	r2, r3
 8004238:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	22ff      	movs	r2, #255	; 0xff
 8004240:	401a      	ands	r2, r3
 8004242:	1dfb      	adds	r3, r7, #7
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	0018      	movs	r0, r3
 8004248:	2303      	movs	r3, #3
 800424a:	4003      	ands	r3, r0
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004250:	481f      	ldr	r0, [pc, #124]	; (80042d0 <__NVIC_SetPriority+0xd4>)
 8004252:	1dfb      	adds	r3, r7, #7
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	b25b      	sxtb	r3, r3
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	430a      	orrs	r2, r1
 800425c:	33c0      	adds	r3, #192	; 0xc0
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004262:	e031      	b.n	80042c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004264:	4a1b      	ldr	r2, [pc, #108]	; (80042d4 <__NVIC_SetPriority+0xd8>)
 8004266:	1dfb      	adds	r3, r7, #7
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	0019      	movs	r1, r3
 800426c:	230f      	movs	r3, #15
 800426e:	400b      	ands	r3, r1
 8004270:	3b08      	subs	r3, #8
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	3306      	adds	r3, #6
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	18d3      	adds	r3, r2, r3
 800427a:	3304      	adds	r3, #4
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1dfa      	adds	r2, r7, #7
 8004280:	7812      	ldrb	r2, [r2, #0]
 8004282:	0011      	movs	r1, r2
 8004284:	2203      	movs	r2, #3
 8004286:	400a      	ands	r2, r1
 8004288:	00d2      	lsls	r2, r2, #3
 800428a:	21ff      	movs	r1, #255	; 0xff
 800428c:	4091      	lsls	r1, r2
 800428e:	000a      	movs	r2, r1
 8004290:	43d2      	mvns	r2, r2
 8004292:	401a      	ands	r2, r3
 8004294:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	019b      	lsls	r3, r3, #6
 800429a:	22ff      	movs	r2, #255	; 0xff
 800429c:	401a      	ands	r2, r3
 800429e:	1dfb      	adds	r3, r7, #7
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	0018      	movs	r0, r3
 80042a4:	2303      	movs	r3, #3
 80042a6:	4003      	ands	r3, r0
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042ac:	4809      	ldr	r0, [pc, #36]	; (80042d4 <__NVIC_SetPriority+0xd8>)
 80042ae:	1dfb      	adds	r3, r7, #7
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	001c      	movs	r4, r3
 80042b4:	230f      	movs	r3, #15
 80042b6:	4023      	ands	r3, r4
 80042b8:	3b08      	subs	r3, #8
 80042ba:	089b      	lsrs	r3, r3, #2
 80042bc:	430a      	orrs	r2, r1
 80042be:	3306      	adds	r3, #6
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	18c3      	adds	r3, r0, r3
 80042c4:	3304      	adds	r3, #4
 80042c6:	601a      	str	r2, [r3, #0]
}
 80042c8:	46c0      	nop			; (mov r8, r8)
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b003      	add	sp, #12
 80042ce:	bd90      	pop	{r4, r7, pc}
 80042d0:	e000e100 	.word	0xe000e100
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	1e5a      	subs	r2, r3, #1
 80042e4:	2380      	movs	r3, #128	; 0x80
 80042e6:	045b      	lsls	r3, r3, #17
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d301      	bcc.n	80042f0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042ec:	2301      	movs	r3, #1
 80042ee:	e010      	b.n	8004312 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <SysTick_Config+0x44>)
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	3a01      	subs	r2, #1
 80042f6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042f8:	2301      	movs	r3, #1
 80042fa:	425b      	negs	r3, r3
 80042fc:	2103      	movs	r1, #3
 80042fe:	0018      	movs	r0, r3
 8004300:	f7ff ff7c 	bl	80041fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <SysTick_Config+0x44>)
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <SysTick_Config+0x44>)
 800430c:	2207      	movs	r2, #7
 800430e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004310:	2300      	movs	r3, #0
}
 8004312:	0018      	movs	r0, r3
 8004314:	46bd      	mov	sp, r7
 8004316:	b002      	add	sp, #8
 8004318:	bd80      	pop	{r7, pc}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	e000e010 	.word	0xe000e010

08004320 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	210f      	movs	r1, #15
 800432c:	187b      	adds	r3, r7, r1
 800432e:	1c02      	adds	r2, r0, #0
 8004330:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	187b      	adds	r3, r7, r1
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	b25b      	sxtb	r3, r3
 800433a:	0011      	movs	r1, r2
 800433c:	0018      	movs	r0, r3
 800433e:	f7ff ff5d 	bl	80041fc <__NVIC_SetPriority>
}
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	46bd      	mov	sp, r7
 8004346:	b004      	add	sp, #16
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b082      	sub	sp, #8
 800434e:	af00      	add	r7, sp, #0
 8004350:	0002      	movs	r2, r0
 8004352:	1dfb      	adds	r3, r7, #7
 8004354:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004356:	1dfb      	adds	r3, r7, #7
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	b25b      	sxtb	r3, r3
 800435c:	0018      	movs	r0, r3
 800435e:	f7ff ff33 	bl	80041c8 <__NVIC_EnableIRQ>
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	46bd      	mov	sp, r7
 8004366:	b002      	add	sp, #8
 8004368:	bd80      	pop	{r7, pc}

0800436a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b082      	sub	sp, #8
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f7ff ffaf 	bl	80042d8 <SysTick_Config>
 800437a:	0003      	movs	r3, r0
}
 800437c:	0018      	movs	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	b002      	add	sp, #8
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e050      	b.n	8004438 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2225      	movs	r2, #37	; 0x25
 800439a:	5c9b      	ldrb	r3, [r3, r2]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d008      	beq.n	80043b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2204      	movs	r2, #4
 80043a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2224      	movs	r2, #36	; 0x24
 80043ac:	2100      	movs	r1, #0
 80043ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e041      	b.n	8004438 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	210e      	movs	r1, #14
 80043c0:	438a      	bics	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ce:	491c      	ldr	r1, [pc, #112]	; (8004440 <HAL_DMA_Abort+0xbc>)
 80043d0:	400a      	ands	r2, r1
 80043d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2101      	movs	r1, #1
 80043e0:	438a      	bics	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80043e4:	4b17      	ldr	r3, [pc, #92]	; (8004444 <HAL_DMA_Abort+0xc0>)
 80043e6:	6859      	ldr	r1, [r3, #4]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ec:	221c      	movs	r2, #28
 80043ee:	4013      	ands	r3, r2
 80043f0:	2201      	movs	r2, #1
 80043f2:	409a      	lsls	r2, r3
 80043f4:	4b13      	ldr	r3, [pc, #76]	; (8004444 <HAL_DMA_Abort+0xc0>)
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004402:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00c      	beq.n	8004426 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004416:	490a      	ldr	r1, [pc, #40]	; (8004440 <HAL_DMA_Abort+0xbc>)
 8004418:	400a      	ands	r2, r1
 800441a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004424:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2225      	movs	r2, #37	; 0x25
 800442a:	2101      	movs	r1, #1
 800442c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2224      	movs	r2, #36	; 0x24
 8004432:	2100      	movs	r1, #0
 8004434:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b002      	add	sp, #8
 800443e:	bd80      	pop	{r7, pc}
 8004440:	fffffeff 	.word	0xfffffeff
 8004444:	40020000 	.word	0x40020000

08004448 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	210f      	movs	r1, #15
 8004452:	187b      	adds	r3, r7, r1
 8004454:	2200      	movs	r2, #0
 8004456:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2225      	movs	r2, #37	; 0x25
 800445c:	5c9b      	ldrb	r3, [r3, r2]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d006      	beq.n	8004472 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2204      	movs	r2, #4
 8004468:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800446a:	187b      	adds	r3, r7, r1
 800446c:	2201      	movs	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
 8004470:	e049      	b.n	8004506 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	210e      	movs	r1, #14
 800447e:	438a      	bics	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	438a      	bics	r2, r1
 8004490:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449c:	491d      	ldr	r1, [pc, #116]	; (8004514 <HAL_DMA_Abort_IT+0xcc>)
 800449e:	400a      	ands	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80044a2:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <HAL_DMA_Abort_IT+0xd0>)
 80044a4:	6859      	ldr	r1, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	221c      	movs	r2, #28
 80044ac:	4013      	ands	r3, r2
 80044ae:	2201      	movs	r2, #1
 80044b0:	409a      	lsls	r2, r3
 80044b2:	4b19      	ldr	r3, [pc, #100]	; (8004518 <HAL_DMA_Abort_IT+0xd0>)
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80044c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00c      	beq.n	80044e4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	490f      	ldr	r1, [pc, #60]	; (8004514 <HAL_DMA_Abort_IT+0xcc>)
 80044d6:	400a      	ands	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80044e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2225      	movs	r2, #37	; 0x25
 80044e8:	2101      	movs	r1, #1
 80044ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2224      	movs	r2, #36	; 0x24
 80044f0:	2100      	movs	r1, #0
 80044f2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	0010      	movs	r0, r2
 8004504:	4798      	blx	r3
    }
  }
  return status;
 8004506:	230f      	movs	r3, #15
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	781b      	ldrb	r3, [r3, #0]
}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	b004      	add	sp, #16
 8004512:	bd80      	pop	{r7, pc}
 8004514:	fffffeff 	.word	0xfffffeff
 8004518:	40020000 	.word	0x40020000

0800451c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004526:	2300      	movs	r3, #0
 8004528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800452a:	e147      	b.n	80047bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2101      	movs	r1, #1
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	4091      	lsls	r1, r2
 8004536:	000a      	movs	r2, r1
 8004538:	4013      	ands	r3, r2
 800453a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d100      	bne.n	8004544 <HAL_GPIO_Init+0x28>
 8004542:	e138      	b.n	80047b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2203      	movs	r2, #3
 800454a:	4013      	ands	r3, r2
 800454c:	2b01      	cmp	r3, #1
 800454e:	d005      	beq.n	800455c <HAL_GPIO_Init+0x40>
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2203      	movs	r2, #3
 8004556:	4013      	ands	r3, r2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d130      	bne.n	80045be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	2203      	movs	r2, #3
 8004568:	409a      	lsls	r2, r3
 800456a:	0013      	movs	r3, r2
 800456c:	43da      	mvns	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4013      	ands	r3, r2
 8004572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	005b      	lsls	r3, r3, #1
 800457c:	409a      	lsls	r2, r3
 800457e:	0013      	movs	r3, r2
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004592:	2201      	movs	r2, #1
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	409a      	lsls	r2, r3
 8004598:	0013      	movs	r3, r2
 800459a:	43da      	mvns	r2, r3
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	4013      	ands	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	2201      	movs	r2, #1
 80045aa:	401a      	ands	r2, r3
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	409a      	lsls	r2, r3
 80045b0:	0013      	movs	r3, r2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2203      	movs	r2, #3
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d017      	beq.n	80045fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	2203      	movs	r2, #3
 80045d6:	409a      	lsls	r2, r3
 80045d8:	0013      	movs	r3, r2
 80045da:	43da      	mvns	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	4013      	ands	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	689a      	ldr	r2, [r3, #8]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	409a      	lsls	r2, r3
 80045ec:	0013      	movs	r3, r2
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	2203      	movs	r2, #3
 8004600:	4013      	ands	r3, r2
 8004602:	2b02      	cmp	r3, #2
 8004604:	d123      	bne.n	800464e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	08da      	lsrs	r2, r3, #3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3208      	adds	r2, #8
 800460e:	0092      	lsls	r2, r2, #2
 8004610:	58d3      	ldr	r3, [r2, r3]
 8004612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2207      	movs	r2, #7
 8004618:	4013      	ands	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	220f      	movs	r2, #15
 800461e:	409a      	lsls	r2, r3
 8004620:	0013      	movs	r3, r2
 8004622:	43da      	mvns	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4013      	ands	r3, r2
 8004628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2107      	movs	r1, #7
 8004632:	400b      	ands	r3, r1
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	409a      	lsls	r2, r3
 8004638:	0013      	movs	r3, r2
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	4313      	orrs	r3, r2
 800463e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	08da      	lsrs	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	3208      	adds	r2, #8
 8004648:	0092      	lsls	r2, r2, #2
 800464a:	6939      	ldr	r1, [r7, #16]
 800464c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	2203      	movs	r2, #3
 800465a:	409a      	lsls	r2, r3
 800465c:	0013      	movs	r3, r2
 800465e:	43da      	mvns	r2, r3
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	4013      	ands	r3, r2
 8004664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2203      	movs	r2, #3
 800466c:	401a      	ands	r2, r3
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	0013      	movs	r3, r2
 8004676:	693a      	ldr	r2, [r7, #16]
 8004678:	4313      	orrs	r3, r2
 800467a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	23c0      	movs	r3, #192	; 0xc0
 8004688:	029b      	lsls	r3, r3, #10
 800468a:	4013      	ands	r3, r2
 800468c:	d100      	bne.n	8004690 <HAL_GPIO_Init+0x174>
 800468e:	e092      	b.n	80047b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004690:	4a50      	ldr	r2, [pc, #320]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	089b      	lsrs	r3, r3, #2
 8004696:	3318      	adds	r3, #24
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	589b      	ldr	r3, [r3, r2]
 800469c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2203      	movs	r2, #3
 80046a2:	4013      	ands	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	220f      	movs	r2, #15
 80046a8:	409a      	lsls	r2, r3
 80046aa:	0013      	movs	r3, r2
 80046ac:	43da      	mvns	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	4013      	ands	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	23a0      	movs	r3, #160	; 0xa0
 80046b8:	05db      	lsls	r3, r3, #23
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d013      	beq.n	80046e6 <HAL_GPIO_Init+0x1ca>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a45      	ldr	r2, [pc, #276]	; (80047d8 <HAL_GPIO_Init+0x2bc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00d      	beq.n	80046e2 <HAL_GPIO_Init+0x1c6>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a44      	ldr	r2, [pc, #272]	; (80047dc <HAL_GPIO_Init+0x2c0>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <HAL_GPIO_Init+0x1c2>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a43      	ldr	r2, [pc, #268]	; (80047e0 <HAL_GPIO_Init+0x2c4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d101      	bne.n	80046da <HAL_GPIO_Init+0x1be>
 80046d6:	2303      	movs	r3, #3
 80046d8:	e006      	b.n	80046e8 <HAL_GPIO_Init+0x1cc>
 80046da:	2305      	movs	r3, #5
 80046dc:	e004      	b.n	80046e8 <HAL_GPIO_Init+0x1cc>
 80046de:	2302      	movs	r3, #2
 80046e0:	e002      	b.n	80046e8 <HAL_GPIO_Init+0x1cc>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <HAL_GPIO_Init+0x1cc>
 80046e6:	2300      	movs	r3, #0
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	2103      	movs	r1, #3
 80046ec:	400a      	ands	r2, r1
 80046ee:	00d2      	lsls	r2, r2, #3
 80046f0:	4093      	lsls	r3, r2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80046f8:	4936      	ldr	r1, [pc, #216]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	089b      	lsrs	r3, r3, #2
 80046fe:	3318      	adds	r3, #24
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004706:	4b33      	ldr	r3, [pc, #204]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	43da      	mvns	r2, r3
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	4013      	ands	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	035b      	lsls	r3, r3, #13
 800471e:	4013      	ands	r3, r2
 8004720:	d003      	beq.n	800472a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8004722:	693a      	ldr	r2, [r7, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800472a:	4b2a      	ldr	r3, [pc, #168]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004730:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	43da      	mvns	r2, r3
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4013      	ands	r3, r2
 800473e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	2380      	movs	r3, #128	; 0x80
 8004746:	039b      	lsls	r3, r3, #14
 8004748:	4013      	ands	r3, r2
 800474a:	d003      	beq.n	8004754 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800474c:	693a      	ldr	r2, [r7, #16]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4313      	orrs	r3, r2
 8004752:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004754:	4b1f      	ldr	r3, [pc, #124]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800475a:	4a1e      	ldr	r2, [pc, #120]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 800475c:	2384      	movs	r3, #132	; 0x84
 800475e:	58d3      	ldr	r3, [r2, r3]
 8004760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	43da      	mvns	r2, r3
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	029b      	lsls	r3, r3, #10
 8004774:	4013      	ands	r3, r2
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004780:	4914      	ldr	r1, [pc, #80]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 8004782:	2284      	movs	r2, #132	; 0x84
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004788:	4a12      	ldr	r2, [pc, #72]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 800478a:	2380      	movs	r3, #128	; 0x80
 800478c:	58d3      	ldr	r3, [r2, r3]
 800478e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	43da      	mvns	r2, r3
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4013      	ands	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	2380      	movs	r3, #128	; 0x80
 80047a0:	025b      	lsls	r3, r3, #9
 80047a2:	4013      	ands	r3, r2
 80047a4:	d003      	beq.n	80047ae <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047ae:	4909      	ldr	r1, [pc, #36]	; (80047d4 <HAL_GPIO_Init+0x2b8>)
 80047b0:	2280      	movs	r2, #128	; 0x80
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	3301      	adds	r3, #1
 80047ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	40da      	lsrs	r2, r3
 80047c4:	1e13      	subs	r3, r2, #0
 80047c6:	d000      	beq.n	80047ca <HAL_GPIO_Init+0x2ae>
 80047c8:	e6b0      	b.n	800452c <HAL_GPIO_Init+0x10>
  }
}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b006      	add	sp, #24
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40021800 	.word	0x40021800
 80047d8:	50000400 	.word	0x50000400
 80047dc:	50000800 	.word	0x50000800
 80047e0:	50000c00 	.word	0x50000c00

080047e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	0008      	movs	r0, r1
 80047ee:	0011      	movs	r1, r2
 80047f0:	1cbb      	adds	r3, r7, #2
 80047f2:	1c02      	adds	r2, r0, #0
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	1c7b      	adds	r3, r7, #1
 80047f8:	1c0a      	adds	r2, r1, #0
 80047fa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047fc:	1c7b      	adds	r3, r7, #1
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004804:	1cbb      	adds	r3, r7, #2
 8004806:	881a      	ldrh	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800480c:	e003      	b.n	8004816 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800480e:	1cbb      	adds	r3, r7, #2
 8004810:	881a      	ldrh	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	46bd      	mov	sp, r7
 800481a:	b002      	add	sp, #8
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a19      	ldr	r2, [pc, #100]	; (8004894 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800482e:	4013      	ands	r3, r2
 8004830:	0019      	movs	r1, r3
 8004832:	4b17      	ldr	r3, [pc, #92]	; (8004890 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	430a      	orrs	r2, r1
 8004838:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	429a      	cmp	r2, r3
 8004842:	d11f      	bne.n	8004884 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004844:	4b14      	ldr	r3, [pc, #80]	; (8004898 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	0013      	movs	r3, r2
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	189b      	adds	r3, r3, r2
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	4912      	ldr	r1, [pc, #72]	; (800489c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004852:	0018      	movs	r0, r3
 8004854:	f7fb fc70 	bl	8000138 <__udivsi3>
 8004858:	0003      	movs	r3, r0
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800485e:	e008      	b.n	8004872 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3b01      	subs	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e001      	b.n	8004872 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e009      	b.n	8004886 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004872:	4b07      	ldr	r3, [pc, #28]	; (8004890 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004874:	695a      	ldr	r2, [r3, #20]
 8004876:	2380      	movs	r3, #128	; 0x80
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	401a      	ands	r2, r3
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	429a      	cmp	r2, r3
 8004882:	d0ed      	beq.n	8004860 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	0018      	movs	r0, r3
 8004888:	46bd      	mov	sp, r7
 800488a:	b004      	add	sp, #16
 800488c:	bd80      	pop	{r7, pc}
 800488e:	46c0      	nop			; (mov r8, r8)
 8004890:	40007000 	.word	0x40007000
 8004894:	fffff9ff 	.word	0xfffff9ff
 8004898:	20000000 	.word	0x20000000
 800489c:	000f4240 	.word	0x000f4240

080048a0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80048a4:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	23e0      	movs	r3, #224	; 0xe0
 80048aa:	01db      	lsls	r3, r3, #7
 80048ac:	4013      	ands	r3, r2
}
 80048ae:	0018      	movs	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40021000 	.word	0x40021000

080048b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b088      	sub	sp, #32
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e2f3      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2201      	movs	r2, #1
 80048d0:	4013      	ands	r3, r2
 80048d2:	d100      	bne.n	80048d6 <HAL_RCC_OscConfig+0x1e>
 80048d4:	e07c      	b.n	80049d0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d6:	4bc3      	ldr	r3, [pc, #780]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	2238      	movs	r2, #56	; 0x38
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e0:	4bc0      	ldr	r3, [pc, #768]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2203      	movs	r2, #3
 80048e6:	4013      	ands	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	2b10      	cmp	r3, #16
 80048ee:	d102      	bne.n	80048f6 <HAL_RCC_OscConfig+0x3e>
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d002      	beq.n	80048fc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d10b      	bne.n	8004914 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	4bb9      	ldr	r3, [pc, #740]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	2380      	movs	r3, #128	; 0x80
 8004902:	029b      	lsls	r3, r3, #10
 8004904:	4013      	ands	r3, r2
 8004906:	d062      	beq.n	80049ce <HAL_RCC_OscConfig+0x116>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d15e      	bne.n	80049ce <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e2ce      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685a      	ldr	r2, [r3, #4]
 8004918:	2380      	movs	r3, #128	; 0x80
 800491a:	025b      	lsls	r3, r3, #9
 800491c:	429a      	cmp	r2, r3
 800491e:	d107      	bne.n	8004930 <HAL_RCC_OscConfig+0x78>
 8004920:	4bb0      	ldr	r3, [pc, #704]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4baf      	ldr	r3, [pc, #700]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	0249      	lsls	r1, r1, #9
 800492a:	430a      	orrs	r2, r1
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	e020      	b.n	8004972 <HAL_RCC_OscConfig+0xba>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	23a0      	movs	r3, #160	; 0xa0
 8004936:	02db      	lsls	r3, r3, #11
 8004938:	429a      	cmp	r2, r3
 800493a:	d10e      	bne.n	800495a <HAL_RCC_OscConfig+0xa2>
 800493c:	4ba9      	ldr	r3, [pc, #676]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4ba8      	ldr	r3, [pc, #672]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004942:	2180      	movs	r1, #128	; 0x80
 8004944:	02c9      	lsls	r1, r1, #11
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	4ba6      	ldr	r3, [pc, #664]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4ba5      	ldr	r3, [pc, #660]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004950:	2180      	movs	r1, #128	; 0x80
 8004952:	0249      	lsls	r1, r1, #9
 8004954:	430a      	orrs	r2, r1
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e00b      	b.n	8004972 <HAL_RCC_OscConfig+0xba>
 800495a:	4ba2      	ldr	r3, [pc, #648]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4ba1      	ldr	r3, [pc, #644]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004960:	49a1      	ldr	r1, [pc, #644]	; (8004be8 <HAL_RCC_OscConfig+0x330>)
 8004962:	400a      	ands	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	4b9f      	ldr	r3, [pc, #636]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b9e      	ldr	r3, [pc, #632]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 800496c:	499f      	ldr	r1, [pc, #636]	; (8004bec <HAL_RCC_OscConfig+0x334>)
 800496e:	400a      	ands	r2, r1
 8004970:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d014      	beq.n	80049a4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7ff fc1b 	bl	80041b4 <HAL_GetTick>
 800497e:	0003      	movs	r3, r0
 8004980:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004984:	f7ff fc16 	bl	80041b4 <HAL_GetTick>
 8004988:	0002      	movs	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e28d      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004996:	4b93      	ldr	r3, [pc, #588]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	029b      	lsls	r3, r3, #10
 800499e:	4013      	ands	r3, r2
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0xcc>
 80049a2:	e015      	b.n	80049d0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a4:	f7ff fc06 	bl	80041b4 <HAL_GetTick>
 80049a8:	0003      	movs	r3, r0
 80049aa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049ac:	e008      	b.n	80049c0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ae:	f7ff fc01 	bl	80041b4 <HAL_GetTick>
 80049b2:	0002      	movs	r2, r0
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	2b64      	cmp	r3, #100	; 0x64
 80049ba:	d901      	bls.n	80049c0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e278      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049c0:	4b88      	ldr	r3, [pc, #544]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	029b      	lsls	r3, r3, #10
 80049c8:	4013      	ands	r3, r2
 80049ca:	d1f0      	bne.n	80049ae <HAL_RCC_OscConfig+0xf6>
 80049cc:	e000      	b.n	80049d0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ce:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2202      	movs	r2, #2
 80049d6:	4013      	ands	r3, r2
 80049d8:	d100      	bne.n	80049dc <HAL_RCC_OscConfig+0x124>
 80049da:	e099      	b.n	8004b10 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049dc:	4b81      	ldr	r3, [pc, #516]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2238      	movs	r2, #56	; 0x38
 80049e2:	4013      	ands	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049e6:	4b7f      	ldr	r3, [pc, #508]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2203      	movs	r2, #3
 80049ec:	4013      	ands	r3, r2
 80049ee:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d102      	bne.n	80049fc <HAL_RCC_OscConfig+0x144>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d002      	beq.n	8004a02 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d135      	bne.n	8004a6e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a02:	4b78      	ldr	r3, [pc, #480]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	2380      	movs	r3, #128	; 0x80
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	d005      	beq.n	8004a1a <HAL_RCC_OscConfig+0x162>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e24b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1a:	4b72      	ldr	r3, [pc, #456]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	4a74      	ldr	r2, [pc, #464]	; (8004bf0 <HAL_RCC_OscConfig+0x338>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	0019      	movs	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	021a      	lsls	r2, r3, #8
 8004a2a:	4b6e      	ldr	r3, [pc, #440]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d112      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a36:	4b6b      	ldr	r3, [pc, #428]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a6e      	ldr	r2, [pc, #440]	; (8004bf4 <HAL_RCC_OscConfig+0x33c>)
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	0019      	movs	r1, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691a      	ldr	r2, [r3, #16]
 8004a44:	4b67      	ldr	r3, [pc, #412]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a46:	430a      	orrs	r2, r1
 8004a48:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004a4a:	4b66      	ldr	r3, [pc, #408]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	0adb      	lsrs	r3, r3, #11
 8004a50:	2207      	movs	r2, #7
 8004a52:	4013      	ands	r3, r2
 8004a54:	4a68      	ldr	r2, [pc, #416]	; (8004bf8 <HAL_RCC_OscConfig+0x340>)
 8004a56:	40da      	lsrs	r2, r3
 8004a58:	4b68      	ldr	r3, [pc, #416]	; (8004bfc <HAL_RCC_OscConfig+0x344>)
 8004a5a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a5c:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <HAL_RCC_OscConfig+0x348>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f7ff fb4b 	bl	80040fc <HAL_InitTick>
 8004a66:	1e03      	subs	r3, r0, #0
 8004a68:	d051      	beq.n	8004b0e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e221      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d030      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a76:	4b5b      	ldr	r3, [pc, #364]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a5e      	ldr	r2, [pc, #376]	; (8004bf4 <HAL_RCC_OscConfig+0x33c>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	0019      	movs	r1, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	4b57      	ldr	r3, [pc, #348]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a86:	430a      	orrs	r2, r1
 8004a88:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004a8a:	4b56      	ldr	r3, [pc, #344]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b55      	ldr	r3, [pc, #340]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004a90:	2180      	movs	r1, #128	; 0x80
 8004a92:	0049      	lsls	r1, r1, #1
 8004a94:	430a      	orrs	r2, r1
 8004a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a98:	f7ff fb8c 	bl	80041b4 <HAL_GetTick>
 8004a9c:	0003      	movs	r3, r0
 8004a9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa2:	f7ff fb87 	bl	80041b4 <HAL_GetTick>
 8004aa6:	0002      	movs	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e1fe      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab4:	4b4b      	ldr	r3, [pc, #300]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	2380      	movs	r3, #128	; 0x80
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	4013      	ands	r3, r2
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac0:	4b48      	ldr	r3, [pc, #288]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	4a4a      	ldr	r2, [pc, #296]	; (8004bf0 <HAL_RCC_OscConfig+0x338>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	021a      	lsls	r2, r3, #8
 8004ad0:	4b44      	ldr	r3, [pc, #272]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	e01b      	b.n	8004b10 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004ad8:	4b42      	ldr	r3, [pc, #264]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b41      	ldr	r3, [pc, #260]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004ade:	4949      	ldr	r1, [pc, #292]	; (8004c04 <HAL_RCC_OscConfig+0x34c>)
 8004ae0:	400a      	ands	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7ff fb66 	bl	80041b4 <HAL_GetTick>
 8004ae8:	0003      	movs	r3, r0
 8004aea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aee:	f7ff fb61 	bl	80041b4 <HAL_GetTick>
 8004af2:	0002      	movs	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e1d8      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b00:	4b38      	ldr	r3, [pc, #224]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	2380      	movs	r3, #128	; 0x80
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4013      	ands	r3, r2
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x236>
 8004b0c:	e000      	b.n	8004b10 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b0e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2208      	movs	r2, #8
 8004b16:	4013      	ands	r3, r2
 8004b18:	d047      	beq.n	8004baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b1a:	4b32      	ldr	r3, [pc, #200]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2238      	movs	r2, #56	; 0x38
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b18      	cmp	r3, #24
 8004b24:	d10a      	bne.n	8004b3c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004b26:	4b2f      	ldr	r3, [pc, #188]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d03c      	beq.n	8004baa <HAL_RCC_OscConfig+0x2f2>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d138      	bne.n	8004baa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e1ba      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d019      	beq.n	8004b78 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004b44:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004b46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b48:	4b26      	ldr	r3, [pc, #152]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b50:	f7ff fb30 	bl	80041b4 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5a:	f7ff fb2b 	bl	80041b4 <HAL_GetTick>
 8004b5e:	0002      	movs	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e1a2      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b6c:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b70:	2202      	movs	r2, #2
 8004b72:	4013      	ands	r3, r2
 8004b74:	d0f1      	beq.n	8004b5a <HAL_RCC_OscConfig+0x2a2>
 8004b76:	e018      	b.n	8004baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004b7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b7c:	4b19      	ldr	r3, [pc, #100]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004b7e:	2101      	movs	r1, #1
 8004b80:	438a      	bics	r2, r1
 8004b82:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b84:	f7ff fb16 	bl	80041b4 <HAL_GetTick>
 8004b88:	0003      	movs	r3, r0
 8004b8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b8c:	e008      	b.n	8004ba0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b8e:	f7ff fb11 	bl	80041b4 <HAL_GetTick>
 8004b92:	0002      	movs	r2, r0
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e188      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ba0:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d1f1      	bne.n	8004b8e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d100      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x2fe>
 8004bb4:	e0c6      	b.n	8004d44 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bb6:	231f      	movs	r3, #31
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2238      	movs	r2, #56	; 0x38
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	2b20      	cmp	r3, #32
 8004bc8:	d11e      	bne.n	8004c08 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCC_OscConfig+0x32c>)
 8004bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bce:	2202      	movs	r2, #2
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d100      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x31e>
 8004bd4:	e0b6      	b.n	8004d44 <HAL_RCC_OscConfig+0x48c>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d000      	beq.n	8004be0 <HAL_RCC_OscConfig+0x328>
 8004bde:	e0b1      	b.n	8004d44 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e166      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
 8004be4:	40021000 	.word	0x40021000
 8004be8:	fffeffff 	.word	0xfffeffff
 8004bec:	fffbffff 	.word	0xfffbffff
 8004bf0:	ffff80ff 	.word	0xffff80ff
 8004bf4:	ffffc7ff 	.word	0xffffc7ff
 8004bf8:	00f42400 	.word	0x00f42400
 8004bfc:	20000000 	.word	0x20000000
 8004c00:	20000004 	.word	0x20000004
 8004c04:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c08:	4bac      	ldr	r3, [pc, #688]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004c0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	055b      	lsls	r3, r3, #21
 8004c10:	4013      	ands	r3, r2
 8004c12:	d101      	bne.n	8004c18 <HAL_RCC_OscConfig+0x360>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <HAL_RCC_OscConfig+0x362>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d011      	beq.n	8004c42 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c1e:	4ba7      	ldr	r3, [pc, #668]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004c20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c22:	4ba6      	ldr	r3, [pc, #664]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004c24:	2180      	movs	r1, #128	; 0x80
 8004c26:	0549      	lsls	r1, r1, #21
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c2c:	4ba3      	ldr	r3, [pc, #652]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c30:	2380      	movs	r3, #128	; 0x80
 8004c32:	055b      	lsls	r3, r3, #21
 8004c34:	4013      	ands	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004c3a:	231f      	movs	r3, #31
 8004c3c:	18fb      	adds	r3, r7, r3
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c42:	4b9f      	ldr	r3, [pc, #636]	; (8004ec0 <HAL_RCC_OscConfig+0x608>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d11a      	bne.n	8004c84 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c4e:	4b9c      	ldr	r3, [pc, #624]	; (8004ec0 <HAL_RCC_OscConfig+0x608>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	4b9b      	ldr	r3, [pc, #620]	; (8004ec0 <HAL_RCC_OscConfig+0x608>)
 8004c54:	2180      	movs	r1, #128	; 0x80
 8004c56:	0049      	lsls	r1, r1, #1
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004c5c:	f7ff faaa 	bl	80041b4 <HAL_GetTick>
 8004c60:	0003      	movs	r3, r0
 8004c62:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c66:	f7ff faa5 	bl	80041b4 <HAL_GetTick>
 8004c6a:	0002      	movs	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e11c      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c78:	4b91      	ldr	r3, [pc, #580]	; (8004ec0 <HAL_RCC_OscConfig+0x608>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4013      	ands	r3, r2
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d106      	bne.n	8004c9a <HAL_RCC_OscConfig+0x3e2>
 8004c8c:	4b8b      	ldr	r3, [pc, #556]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c90:	4b8a      	ldr	r3, [pc, #552]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004c92:	2101      	movs	r1, #1
 8004c94:	430a      	orrs	r2, r1
 8004c96:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c98:	e01c      	b.n	8004cd4 <HAL_RCC_OscConfig+0x41c>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCC_OscConfig+0x404>
 8004ca2:	4b86      	ldr	r3, [pc, #536]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ca6:	4b85      	ldr	r3, [pc, #532]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004ca8:	2104      	movs	r1, #4
 8004caa:	430a      	orrs	r2, r1
 8004cac:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cae:	4b83      	ldr	r3, [pc, #524]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004cb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cb2:	4b82      	ldr	r3, [pc, #520]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004cb4:	2101      	movs	r1, #1
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cba:	e00b      	b.n	8004cd4 <HAL_RCC_OscConfig+0x41c>
 8004cbc:	4b7f      	ldr	r3, [pc, #508]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004cbe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cc0:	4b7e      	ldr	r3, [pc, #504]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	438a      	bics	r2, r1
 8004cc6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cc8:	4b7c      	ldr	r3, [pc, #496]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004cca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ccc:	4b7b      	ldr	r3, [pc, #492]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004cce:	2104      	movs	r1, #4
 8004cd0:	438a      	bics	r2, r1
 8004cd2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d014      	beq.n	8004d06 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7ff fa6a 	bl	80041b4 <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce4:	e009      	b.n	8004cfa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7ff fa65 	bl	80041b4 <HAL_GetTick>
 8004cea:	0002      	movs	r2, r0
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	4a74      	ldr	r2, [pc, #464]	; (8004ec4 <HAL_RCC_OscConfig+0x60c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e0db      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cfa:	4b70      	ldr	r3, [pc, #448]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfe:	2202      	movs	r2, #2
 8004d00:	4013      	ands	r3, r2
 8004d02:	d0f0      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x42e>
 8004d04:	e013      	b.n	8004d2e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d06:	f7ff fa55 	bl	80041b4 <HAL_GetTick>
 8004d0a:	0003      	movs	r3, r0
 8004d0c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d0e:	e009      	b.n	8004d24 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d10:	f7ff fa50 	bl	80041b4 <HAL_GetTick>
 8004d14:	0002      	movs	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	4a6a      	ldr	r2, [pc, #424]	; (8004ec4 <HAL_RCC_OscConfig+0x60c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e0c6      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d24:	4b65      	ldr	r3, [pc, #404]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	2202      	movs	r2, #2
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d2e:	231f      	movs	r3, #31
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d105      	bne.n	8004d44 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d38:	4b60      	ldr	r3, [pc, #384]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004d3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d3c:	4b5f      	ldr	r3, [pc, #380]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004d3e:	4962      	ldr	r1, [pc, #392]	; (8004ec8 <HAL_RCC_OscConfig+0x610>)
 8004d40:	400a      	ands	r2, r1
 8004d42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d100      	bne.n	8004d4e <HAL_RCC_OscConfig+0x496>
 8004d4c:	e0b0      	b.n	8004eb0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d4e:	4b5b      	ldr	r3, [pc, #364]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	2238      	movs	r2, #56	; 0x38
 8004d54:	4013      	ands	r3, r2
 8004d56:	2b10      	cmp	r3, #16
 8004d58:	d100      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4a4>
 8004d5a:	e078      	b.n	8004e4e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d153      	bne.n	8004e0c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d64:	4b55      	ldr	r3, [pc, #340]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b54      	ldr	r3, [pc, #336]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004d6a:	4958      	ldr	r1, [pc, #352]	; (8004ecc <HAL_RCC_OscConfig+0x614>)
 8004d6c:	400a      	ands	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d70:	f7ff fa20 	bl	80041b4 <HAL_GetTick>
 8004d74:	0003      	movs	r3, r0
 8004d76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7a:	f7ff fa1b 	bl	80041b4 <HAL_GetTick>
 8004d7e:	0002      	movs	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e092      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2380      	movs	r3, #128	; 0x80
 8004d92:	049b      	lsls	r3, r3, #18
 8004d94:	4013      	ands	r3, r2
 8004d96:	d1f0      	bne.n	8004d7a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d98:	4b48      	ldr	r3, [pc, #288]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	4a4c      	ldr	r2, [pc, #304]	; (8004ed0 <HAL_RCC_OscConfig+0x618>)
 8004d9e:	4013      	ands	r3, r2
 8004da0:	0019      	movs	r1, r3
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1a      	ldr	r2, [r3, #32]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	431a      	orrs	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	431a      	orrs	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	4b3e      	ldr	r3, [pc, #248]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dc6:	4b3d      	ldr	r3, [pc, #244]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	4b3c      	ldr	r3, [pc, #240]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004dcc:	2180      	movs	r1, #128	; 0x80
 8004dce:	0449      	lsls	r1, r1, #17
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004dd4:	4b39      	ldr	r3, [pc, #228]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	4b38      	ldr	r3, [pc, #224]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004dda:	2180      	movs	r1, #128	; 0x80
 8004ddc:	0549      	lsls	r1, r1, #21
 8004dde:	430a      	orrs	r2, r1
 8004de0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de2:	f7ff f9e7 	bl	80041b4 <HAL_GetTick>
 8004de6:	0003      	movs	r3, r0
 8004de8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7ff f9e2 	bl	80041b4 <HAL_GetTick>
 8004df0:	0002      	movs	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e059      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfe:	4b2f      	ldr	r3, [pc, #188]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	049b      	lsls	r3, r3, #18
 8004e06:	4013      	ands	r3, r2
 8004e08:	d0f0      	beq.n	8004dec <HAL_RCC_OscConfig+0x534>
 8004e0a:	e051      	b.n	8004eb0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4b2a      	ldr	r3, [pc, #168]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004e12:	492e      	ldr	r1, [pc, #184]	; (8004ecc <HAL_RCC_OscConfig+0x614>)
 8004e14:	400a      	ands	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e18:	f7ff f9cc 	bl	80041b4 <HAL_GetTick>
 8004e1c:	0003      	movs	r3, r0
 8004e1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e20:	e008      	b.n	8004e34 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e22:	f7ff f9c7 	bl	80041b4 <HAL_GetTick>
 8004e26:	0002      	movs	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e03e      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e34:	4b21      	ldr	r3, [pc, #132]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	2380      	movs	r3, #128	; 0x80
 8004e3a:	049b      	lsls	r3, r3, #18
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	d1f0      	bne.n	8004e22 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004e40:	4b1e      	ldr	r3, [pc, #120]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004e42:	68da      	ldr	r2, [r3, #12]
 8004e44:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004e46:	4923      	ldr	r1, [pc, #140]	; (8004ed4 <HAL_RCC_OscConfig+0x61c>)
 8004e48:	400a      	ands	r2, r1
 8004e4a:	60da      	str	r2, [r3, #12]
 8004e4c:	e030      	b.n	8004eb0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e02b      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004e5a:	4b18      	ldr	r3, [pc, #96]	; (8004ebc <HAL_RCC_OscConfig+0x604>)
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2203      	movs	r2, #3
 8004e64:	401a      	ands	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d11e      	bne.n	8004eac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	2270      	movs	r2, #112	; 0x70
 8004e72:	401a      	ands	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d117      	bne.n	8004eac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	23fe      	movs	r3, #254	; 0xfe
 8004e80:	01db      	lsls	r3, r3, #7
 8004e82:	401a      	ands	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e88:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d10e      	bne.n	8004eac <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	23f8      	movs	r3, #248	; 0xf8
 8004e92:	039b      	lsls	r3, r3, #14
 8004e94:	401a      	ands	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d106      	bne.n	8004eac <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	0f5b      	lsrs	r3, r3, #29
 8004ea2:	075a      	lsls	r2, r3, #29
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	b008      	add	sp, #32
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40007000 	.word	0x40007000
 8004ec4:	00001388 	.word	0x00001388
 8004ec8:	efffffff 	.word	0xefffffff
 8004ecc:	feffffff 	.word	0xfeffffff
 8004ed0:	1fc1808c 	.word	0x1fc1808c
 8004ed4:	effefffc 	.word	0xeffefffc

08004ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0e9      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eec:	4b76      	ldr	r3, [pc, #472]	; (80050c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d91e      	bls.n	8004f38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b73      	ldr	r3, [pc, #460]	; (80050c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2207      	movs	r2, #7
 8004f00:	4393      	bics	r3, r2
 8004f02:	0019      	movs	r1, r3
 8004f04:	4b70      	ldr	r3, [pc, #448]	; (80050c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f0c:	f7ff f952 	bl	80041b4 <HAL_GetTick>
 8004f10:	0003      	movs	r3, r0
 8004f12:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f14:	e009      	b.n	8004f2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f16:	f7ff f94d 	bl	80041b4 <HAL_GetTick>
 8004f1a:	0002      	movs	r2, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	4a6a      	ldr	r2, [pc, #424]	; (80050cc <HAL_RCC_ClockConfig+0x1f4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e0ca      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f2a:	4b67      	ldr	r3, [pc, #412]	; (80050c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2207      	movs	r2, #7
 8004f30:	4013      	ands	r3, r2
 8004f32:	683a      	ldr	r2, [r7, #0]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d1ee      	bne.n	8004f16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	4013      	ands	r3, r2
 8004f40:	d015      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2204      	movs	r2, #4
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d006      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f4c:	4b60      	ldr	r3, [pc, #384]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	4b5f      	ldr	r3, [pc, #380]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f52:	21e0      	movs	r1, #224	; 0xe0
 8004f54:	01c9      	lsls	r1, r1, #7
 8004f56:	430a      	orrs	r2, r1
 8004f58:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f5a:	4b5d      	ldr	r3, [pc, #372]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4a5d      	ldr	r2, [pc, #372]	; (80050d4 <HAL_RCC_ClockConfig+0x1fc>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	0019      	movs	r1, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	4b59      	ldr	r3, [pc, #356]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2201      	movs	r2, #1
 8004f74:	4013      	ands	r3, r2
 8004f76:	d057      	beq.n	8005028 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f80:	4b53      	ldr	r3, [pc, #332]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	2380      	movs	r3, #128	; 0x80
 8004f86:	029b      	lsls	r3, r3, #10
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d12b      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e097      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f98:	4b4d      	ldr	r3, [pc, #308]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	2380      	movs	r3, #128	; 0x80
 8004f9e:	049b      	lsls	r3, r3, #18
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d11f      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e08b      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fb0:	4b47      	ldr	r3, [pc, #284]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	2380      	movs	r3, #128	; 0x80
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d113      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e07f      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d106      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fc8:	4b41      	ldr	r3, [pc, #260]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fcc:	2202      	movs	r2, #2
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d108      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e074      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd6:	4b3e      	ldr	r3, [pc, #248]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fda:	2202      	movs	r2, #2
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e06d      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fe4:	4b3a      	ldr	r3, [pc, #232]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2207      	movs	r2, #7
 8004fea:	4393      	bics	r3, r2
 8004fec:	0019      	movs	r1, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	4b37      	ldr	r3, [pc, #220]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff8:	f7ff f8dc 	bl	80041b4 <HAL_GetTick>
 8004ffc:	0003      	movs	r3, r0
 8004ffe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005000:	e009      	b.n	8005016 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005002:	f7ff f8d7 	bl	80041b4 <HAL_GetTick>
 8005006:	0002      	movs	r2, r0
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <HAL_RCC_ClockConfig+0x1f4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e054      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005016:	4b2e      	ldr	r3, [pc, #184]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	2238      	movs	r2, #56	; 0x38
 800501c:	401a      	ands	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	429a      	cmp	r2, r3
 8005026:	d1ec      	bne.n	8005002 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005028:	4b27      	ldr	r3, [pc, #156]	; (80050c8 <HAL_RCC_ClockConfig+0x1f0>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2207      	movs	r2, #7
 800502e:	4013      	ands	r3, r2
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d21e      	bcs.n	8005074 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2207      	movs	r2, #7
 800503c:	4393      	bics	r3, r2
 800503e:	0019      	movs	r1, r3
 8005040:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005048:	f7ff f8b4 	bl	80041b4 <HAL_GetTick>
 800504c:	0003      	movs	r3, r0
 800504e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005050:	e009      	b.n	8005066 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005052:	f7ff f8af 	bl	80041b4 <HAL_GetTick>
 8005056:	0002      	movs	r2, r0
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	4a1b      	ldr	r2, [pc, #108]	; (80050cc <HAL_RCC_ClockConfig+0x1f4>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e02c      	b.n	80050c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005066:	4b18      	ldr	r3, [pc, #96]	; (80050c8 <HAL_RCC_ClockConfig+0x1f0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2207      	movs	r2, #7
 800506c:	4013      	ands	r3, r2
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d1ee      	bne.n	8005052 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2204      	movs	r2, #4
 800507a:	4013      	ands	r3, r2
 800507c:	d009      	beq.n	8005092 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800507e:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <HAL_RCC_ClockConfig+0x200>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	4b10      	ldr	r3, [pc, #64]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 800508e:	430a      	orrs	r2, r1
 8005090:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005092:	f000 f829 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 8005096:	0001      	movs	r1, r0
 8005098:	4b0d      	ldr	r3, [pc, #52]	; (80050d0 <HAL_RCC_ClockConfig+0x1f8>)
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	0a1b      	lsrs	r3, r3, #8
 800509e:	220f      	movs	r2, #15
 80050a0:	401a      	ands	r2, r3
 80050a2:	4b0e      	ldr	r3, [pc, #56]	; (80050dc <HAL_RCC_ClockConfig+0x204>)
 80050a4:	0092      	lsls	r2, r2, #2
 80050a6:	58d3      	ldr	r3, [r2, r3]
 80050a8:	221f      	movs	r2, #31
 80050aa:	4013      	ands	r3, r2
 80050ac:	000a      	movs	r2, r1
 80050ae:	40da      	lsrs	r2, r3
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <HAL_RCC_ClockConfig+0x208>)
 80050b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_ClockConfig+0x20c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7ff f81f 	bl	80040fc <HAL_InitTick>
 80050be:	0003      	movs	r3, r0
}
 80050c0:	0018      	movs	r0, r3
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b004      	add	sp, #16
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40022000 	.word	0x40022000
 80050cc:	00001388 	.word	0x00001388
 80050d0:	40021000 	.word	0x40021000
 80050d4:	fffff0ff 	.word	0xfffff0ff
 80050d8:	ffff8fff 	.word	0xffff8fff
 80050dc:	0800c16c 	.word	0x0800c16c
 80050e0:	20000000 	.word	0x20000000
 80050e4:	20000004 	.word	0x20000004

080050e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ee:	4b3c      	ldr	r3, [pc, #240]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	2238      	movs	r2, #56	; 0x38
 80050f4:	4013      	ands	r3, r2
 80050f6:	d10f      	bne.n	8005118 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80050f8:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	0adb      	lsrs	r3, r3, #11
 80050fe:	2207      	movs	r2, #7
 8005100:	4013      	ands	r3, r2
 8005102:	2201      	movs	r2, #1
 8005104:	409a      	lsls	r2, r3
 8005106:	0013      	movs	r3, r2
 8005108:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	4835      	ldr	r0, [pc, #212]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800510e:	f7fb f813 	bl	8000138 <__udivsi3>
 8005112:	0003      	movs	r3, r0
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	e05d      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005118:	4b31      	ldr	r3, [pc, #196]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2238      	movs	r2, #56	; 0x38
 800511e:	4013      	ands	r3, r2
 8005120:	2b08      	cmp	r3, #8
 8005122:	d102      	bne.n	800512a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005124:	4b2f      	ldr	r3, [pc, #188]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e054      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800512a:	4b2d      	ldr	r3, [pc, #180]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2238      	movs	r2, #56	; 0x38
 8005130:	4013      	ands	r3, r2
 8005132:	2b10      	cmp	r3, #16
 8005134:	d138      	bne.n	80051a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005136:	4b2a      	ldr	r3, [pc, #168]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	2203      	movs	r2, #3
 800513c:	4013      	ands	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005140:	4b27      	ldr	r3, [pc, #156]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	2207      	movs	r2, #7
 8005148:	4013      	ands	r3, r2
 800514a:	3301      	adds	r3, #1
 800514c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b03      	cmp	r3, #3
 8005152:	d10d      	bne.n	8005170 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	4823      	ldr	r0, [pc, #140]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005158:	f7fa ffee 	bl	8000138 <__udivsi3>
 800515c:	0003      	movs	r3, r0
 800515e:	0019      	movs	r1, r3
 8005160:	4b1f      	ldr	r3, [pc, #124]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	0a1b      	lsrs	r3, r3, #8
 8005166:	227f      	movs	r2, #127	; 0x7f
 8005168:	4013      	ands	r3, r2
 800516a:	434b      	muls	r3, r1
 800516c:	617b      	str	r3, [r7, #20]
        break;
 800516e:	e00d      	b.n	800518c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	481c      	ldr	r0, [pc, #112]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005174:	f7fa ffe0 	bl	8000138 <__udivsi3>
 8005178:	0003      	movs	r3, r0
 800517a:	0019      	movs	r1, r3
 800517c:	4b18      	ldr	r3, [pc, #96]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	227f      	movs	r2, #127	; 0x7f
 8005184:	4013      	ands	r3, r2
 8005186:	434b      	muls	r3, r1
 8005188:	617b      	str	r3, [r7, #20]
        break;
 800518a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	0f5b      	lsrs	r3, r3, #29
 8005192:	2207      	movs	r2, #7
 8005194:	4013      	ands	r3, r2
 8005196:	3301      	adds	r3, #1
 8005198:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800519a:	6879      	ldr	r1, [r7, #4]
 800519c:	6978      	ldr	r0, [r7, #20]
 800519e:	f7fa ffcb 	bl	8000138 <__udivsi3>
 80051a2:	0003      	movs	r3, r0
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	e015      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051a8:	4b0d      	ldr	r3, [pc, #52]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2238      	movs	r2, #56	; 0x38
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d103      	bne.n	80051bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80051b4:	2380      	movs	r3, #128	; 0x80
 80051b6:	021b      	lsls	r3, r3, #8
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	e00b      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051bc:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	2238      	movs	r2, #56	; 0x38
 80051c2:	4013      	ands	r3, r2
 80051c4:	2b18      	cmp	r3, #24
 80051c6:	d103      	bne.n	80051d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80051c8:	23fa      	movs	r3, #250	; 0xfa
 80051ca:	01db      	lsls	r3, r3, #7
 80051cc:	613b      	str	r3, [r7, #16]
 80051ce:	e001      	b.n	80051d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051d4:	693b      	ldr	r3, [r7, #16]
}
 80051d6:	0018      	movs	r0, r3
 80051d8:	46bd      	mov	sp, r7
 80051da:	b006      	add	sp, #24
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	40021000 	.word	0x40021000
 80051e4:	00f42400 	.word	0x00f42400

080051e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051ec:	4b02      	ldr	r3, [pc, #8]	; (80051f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ee:	681b      	ldr	r3, [r3, #0]
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	20000000 	.word	0x20000000

080051fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051fc:	b5b0      	push	{r4, r5, r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005200:	f7ff fff2 	bl	80051e8 <HAL_RCC_GetHCLKFreq>
 8005204:	0004      	movs	r4, r0
 8005206:	f7ff fb4b 	bl	80048a0 <LL_RCC_GetAPB1Prescaler>
 800520a:	0003      	movs	r3, r0
 800520c:	0b1a      	lsrs	r2, r3, #12
 800520e:	4b05      	ldr	r3, [pc, #20]	; (8005224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005210:	0092      	lsls	r2, r2, #2
 8005212:	58d3      	ldr	r3, [r2, r3]
 8005214:	221f      	movs	r2, #31
 8005216:	4013      	ands	r3, r2
 8005218:	40dc      	lsrs	r4, r3
 800521a:	0023      	movs	r3, r4
}
 800521c:	0018      	movs	r0, r3
 800521e:	46bd      	mov	sp, r7
 8005220:	bdb0      	pop	{r4, r5, r7, pc}
 8005222:	46c0      	nop			; (mov r8, r8)
 8005224:	0800c1ac 	.word	0x0800c1ac

08005228 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005230:	2313      	movs	r3, #19
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005238:	2312      	movs	r3, #18
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	029b      	lsls	r3, r3, #10
 8005248:	4013      	ands	r3, r2
 800524a:	d100      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800524c:	e0a3      	b.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800524e:	2011      	movs	r0, #17
 8005250:	183b      	adds	r3, r7, r0
 8005252:	2200      	movs	r2, #0
 8005254:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005256:	4b86      	ldr	r3, [pc, #536]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005258:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525a:	2380      	movs	r3, #128	; 0x80
 800525c:	055b      	lsls	r3, r3, #21
 800525e:	4013      	ands	r3, r2
 8005260:	d110      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005262:	4b83      	ldr	r3, [pc, #524]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005266:	4b82      	ldr	r3, [pc, #520]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005268:	2180      	movs	r1, #128	; 0x80
 800526a:	0549      	lsls	r1, r1, #21
 800526c:	430a      	orrs	r2, r1
 800526e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005270:	4b7f      	ldr	r3, [pc, #508]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005274:	2380      	movs	r3, #128	; 0x80
 8005276:	055b      	lsls	r3, r3, #21
 8005278:	4013      	ands	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
 800527c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800527e:	183b      	adds	r3, r7, r0
 8005280:	2201      	movs	r2, #1
 8005282:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005284:	4b7b      	ldr	r3, [pc, #492]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	4b7a      	ldr	r3, [pc, #488]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800528a:	2180      	movs	r1, #128	; 0x80
 800528c:	0049      	lsls	r1, r1, #1
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005292:	f7fe ff8f 	bl	80041b4 <HAL_GetTick>
 8005296:	0003      	movs	r3, r0
 8005298:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800529a:	e00b      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800529c:	f7fe ff8a 	bl	80041b4 <HAL_GetTick>
 80052a0:	0002      	movs	r2, r0
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d904      	bls.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80052aa:	2313      	movs	r3, #19
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	2203      	movs	r2, #3
 80052b0:	701a      	strb	r2, [r3, #0]
        break;
 80052b2:	e005      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052b4:	4b6f      	ldr	r3, [pc, #444]	; (8005474 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	4013      	ands	r3, r2
 80052be:	d0ed      	beq.n	800529c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80052c0:	2313      	movs	r3, #19
 80052c2:	18fb      	adds	r3, r7, r3
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d154      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052ca:	4b69      	ldr	r3, [pc, #420]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052ce:	23c0      	movs	r3, #192	; 0xc0
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4013      	ands	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d019      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d014      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052e6:	4b62      	ldr	r3, [pc, #392]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ea:	4a63      	ldr	r2, [pc, #396]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052f0:	4b5f      	ldr	r3, [pc, #380]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80052f4:	4b5e      	ldr	r3, [pc, #376]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	0249      	lsls	r1, r1, #9
 80052fa:	430a      	orrs	r2, r1
 80052fc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052fe:	4b5c      	ldr	r3, [pc, #368]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005302:	4b5b      	ldr	r3, [pc, #364]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005304:	495d      	ldr	r1, [pc, #372]	; (800547c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005306:	400a      	ands	r2, r1
 8005308:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800530a:	4b59      	ldr	r3, [pc, #356]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2201      	movs	r2, #1
 8005314:	4013      	ands	r3, r2
 8005316:	d016      	beq.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fe ff4c 	bl	80041b4 <HAL_GetTick>
 800531c:	0003      	movs	r3, r0
 800531e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005320:	e00c      	b.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f7fe ff47 	bl	80041b4 <HAL_GetTick>
 8005326:	0002      	movs	r2, r0
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	4a54      	ldr	r2, [pc, #336]	; (8005480 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d904      	bls.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005332:	2313      	movs	r3, #19
 8005334:	18fb      	adds	r3, r7, r3
 8005336:	2203      	movs	r2, #3
 8005338:	701a      	strb	r2, [r3, #0]
            break;
 800533a:	e004      	b.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800533c:	4b4c      	ldr	r3, [pc, #304]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	2202      	movs	r2, #2
 8005342:	4013      	ands	r3, r2
 8005344:	d0ed      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005346:	2313      	movs	r3, #19
 8005348:	18fb      	adds	r3, r7, r3
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005350:	4b47      	ldr	r3, [pc, #284]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005354:	4a48      	ldr	r2, [pc, #288]	; (8005478 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005356:	4013      	ands	r3, r2
 8005358:	0019      	movs	r1, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	4b44      	ldr	r3, [pc, #272]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005360:	430a      	orrs	r2, r1
 8005362:	65da      	str	r2, [r3, #92]	; 0x5c
 8005364:	e00c      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005366:	2312      	movs	r3, #18
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	2213      	movs	r2, #19
 800536c:	18ba      	adds	r2, r7, r2
 800536e:	7812      	ldrb	r2, [r2, #0]
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	e005      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005374:	2312      	movs	r3, #18
 8005376:	18fb      	adds	r3, r7, r3
 8005378:	2213      	movs	r2, #19
 800537a:	18ba      	adds	r2, r7, r2
 800537c:	7812      	ldrb	r2, [r2, #0]
 800537e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005380:	2311      	movs	r3, #17
 8005382:	18fb      	adds	r3, r7, r3
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d105      	bne.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800538a:	4b39      	ldr	r3, [pc, #228]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800538c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800538e:	4b38      	ldr	r3, [pc, #224]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005390:	493c      	ldr	r1, [pc, #240]	; (8005484 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005392:	400a      	ands	r2, r1
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2201      	movs	r2, #1
 800539c:	4013      	ands	r3, r2
 800539e:	d009      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053a0:	4b33      	ldr	r3, [pc, #204]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a4:	2203      	movs	r2, #3
 80053a6:	4393      	bics	r3, r2
 80053a8:	0019      	movs	r1, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	4b30      	ldr	r3, [pc, #192]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053b0:	430a      	orrs	r2, r1
 80053b2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2202      	movs	r2, #2
 80053ba:	4013      	ands	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053be:	4b2c      	ldr	r3, [pc, #176]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	220c      	movs	r2, #12
 80053c4:	4393      	bics	r3, r2
 80053c6:	0019      	movs	r1, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	4b28      	ldr	r3, [pc, #160]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ce:	430a      	orrs	r2, r1
 80053d0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2220      	movs	r2, #32
 80053d8:	4013      	ands	r3, r2
 80053da:	d009      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053dc:	4b24      	ldr	r3, [pc, #144]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	4a29      	ldr	r2, [pc, #164]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053e2:	4013      	ands	r3, r2
 80053e4:	0019      	movs	r1, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	4b21      	ldr	r3, [pc, #132]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053ec:	430a      	orrs	r2, r1
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	2380      	movs	r3, #128	; 0x80
 80053f6:	01db      	lsls	r3, r3, #7
 80053f8:	4013      	ands	r3, r2
 80053fa:	d015      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053fc:	4b1c      	ldr	r3, [pc, #112]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80053fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	0899      	lsrs	r1, r3, #2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	695a      	ldr	r2, [r3, #20]
 8005408:	4b19      	ldr	r3, [pc, #100]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800540a:	430a      	orrs	r2, r1
 800540c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	05db      	lsls	r3, r3, #23
 8005416:	429a      	cmp	r2, r3
 8005418:	d106      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	4b14      	ldr	r3, [pc, #80]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005420:	2180      	movs	r1, #128	; 0x80
 8005422:	0249      	lsls	r1, r1, #9
 8005424:	430a      	orrs	r2, r1
 8005426:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	4013      	ands	r3, r2
 8005432:	d016      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005434:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	4a14      	ldr	r2, [pc, #80]	; (800548c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800543a:	4013      	ands	r3, r2
 800543c:	0019      	movs	r1, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005444:	430a      	orrs	r2, r1
 8005446:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691a      	ldr	r2, [r3, #16]
 800544c:	2380      	movs	r3, #128	; 0x80
 800544e:	01db      	lsls	r3, r3, #7
 8005450:	429a      	cmp	r2, r3
 8005452:	d106      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	4b05      	ldr	r3, [pc, #20]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800545a:	2180      	movs	r1, #128	; 0x80
 800545c:	0249      	lsls	r1, r1, #9
 800545e:	430a      	orrs	r2, r1
 8005460:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005462:	2312      	movs	r3, #18
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	781b      	ldrb	r3, [r3, #0]
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	b006      	add	sp, #24
 800546e:	bd80      	pop	{r7, pc}
 8005470:	40021000 	.word	0x40021000
 8005474:	40007000 	.word	0x40007000
 8005478:	fffffcff 	.word	0xfffffcff
 800547c:	fffeffff 	.word	0xfffeffff
 8005480:	00001388 	.word	0x00001388
 8005484:	efffffff 	.word	0xefffffff
 8005488:	ffffcfff 	.word	0xffffcfff
 800548c:	ffff3fff 	.word	0xffff3fff

08005490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e04a      	b.n	8005538 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	223d      	movs	r2, #61	; 0x3d
 80054a6:	5c9b      	ldrb	r3, [r3, r2]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d107      	bne.n	80054be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	223c      	movs	r2, #60	; 0x3c
 80054b2:	2100      	movs	r1, #0
 80054b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7fe fc1d 	bl	8003cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	223d      	movs	r2, #61	; 0x3d
 80054c2:	2102      	movs	r1, #2
 80054c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3304      	adds	r3, #4
 80054ce:	0019      	movs	r1, r3
 80054d0:	0010      	movs	r0, r2
 80054d2:	f000 fe43 	bl	800615c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2248      	movs	r2, #72	; 0x48
 80054da:	2101      	movs	r1, #1
 80054dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	223e      	movs	r2, #62	; 0x3e
 80054e2:	2101      	movs	r1, #1
 80054e4:	5499      	strb	r1, [r3, r2]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	223f      	movs	r2, #63	; 0x3f
 80054ea:	2101      	movs	r1, #1
 80054ec:	5499      	strb	r1, [r3, r2]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2240      	movs	r2, #64	; 0x40
 80054f2:	2101      	movs	r1, #1
 80054f4:	5499      	strb	r1, [r3, r2]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2241      	movs	r2, #65	; 0x41
 80054fa:	2101      	movs	r1, #1
 80054fc:	5499      	strb	r1, [r3, r2]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2242      	movs	r2, #66	; 0x42
 8005502:	2101      	movs	r1, #1
 8005504:	5499      	strb	r1, [r3, r2]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2243      	movs	r2, #67	; 0x43
 800550a:	2101      	movs	r1, #1
 800550c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2244      	movs	r2, #68	; 0x44
 8005512:	2101      	movs	r1, #1
 8005514:	5499      	strb	r1, [r3, r2]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2245      	movs	r2, #69	; 0x45
 800551a:	2101      	movs	r1, #1
 800551c:	5499      	strb	r1, [r3, r2]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2246      	movs	r2, #70	; 0x46
 8005522:	2101      	movs	r1, #1
 8005524:	5499      	strb	r1, [r3, r2]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2247      	movs	r2, #71	; 0x47
 800552a:	2101      	movs	r1, #1
 800552c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	223d      	movs	r2, #61	; 0x3d
 8005532:	2101      	movs	r1, #1
 8005534:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b002      	add	sp, #8
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	223d      	movs	r2, #61	; 0x3d
 800554c:	5c9b      	ldrb	r3, [r3, r2]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	d001      	beq.n	8005558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e03c      	b.n	80055d2 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	223d      	movs	r2, #61	; 0x3d
 800555c:	2102      	movs	r1, #2
 800555e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2101      	movs	r1, #1
 800556c:	430a      	orrs	r2, r1
 800556e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_TIM_Base_Start_IT+0x9c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x4e>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a18      	ldr	r2, [pc, #96]	; (80055e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIM_Base_Start_IT+0x4e>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <HAL_TIM_Base_Start_IT+0xa4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d116      	bne.n	80055bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4a14      	ldr	r2, [pc, #80]	; (80055e8 <HAL_TIM_Base_Start_IT+0xa8>)
 8005596:	4013      	ands	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b06      	cmp	r3, #6
 800559e:	d016      	beq.n	80055ce <HAL_TIM_Base_Start_IT+0x8e>
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	2380      	movs	r3, #128	; 0x80
 80055a4:	025b      	lsls	r3, r3, #9
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d011      	beq.n	80055ce <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2101      	movs	r1, #1
 80055b6:	430a      	orrs	r2, r1
 80055b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ba:	e008      	b.n	80055ce <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2101      	movs	r1, #1
 80055c8:	430a      	orrs	r2, r1
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	e000      	b.n	80055d0 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ce:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b004      	add	sp, #16
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	00010007 	.word	0x00010007

080055ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e04a      	b.n	8005694 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	223d      	movs	r2, #61	; 0x3d
 8005602:	5c9b      	ldrb	r3, [r3, r2]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d107      	bne.n	800561a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	223c      	movs	r2, #60	; 0x3c
 800560e:	2100      	movs	r1, #0
 8005610:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	0018      	movs	r0, r3
 8005616:	f000 f841 	bl	800569c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	223d      	movs	r2, #61	; 0x3d
 800561e:	2102      	movs	r1, #2
 8005620:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3304      	adds	r3, #4
 800562a:	0019      	movs	r1, r3
 800562c:	0010      	movs	r0, r2
 800562e:	f000 fd95 	bl	800615c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2248      	movs	r2, #72	; 0x48
 8005636:	2101      	movs	r1, #1
 8005638:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	223e      	movs	r2, #62	; 0x3e
 800563e:	2101      	movs	r1, #1
 8005640:	5499      	strb	r1, [r3, r2]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	223f      	movs	r2, #63	; 0x3f
 8005646:	2101      	movs	r1, #1
 8005648:	5499      	strb	r1, [r3, r2]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2240      	movs	r2, #64	; 0x40
 800564e:	2101      	movs	r1, #1
 8005650:	5499      	strb	r1, [r3, r2]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2241      	movs	r2, #65	; 0x41
 8005656:	2101      	movs	r1, #1
 8005658:	5499      	strb	r1, [r3, r2]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2242      	movs	r2, #66	; 0x42
 800565e:	2101      	movs	r1, #1
 8005660:	5499      	strb	r1, [r3, r2]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2243      	movs	r2, #67	; 0x43
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2244      	movs	r2, #68	; 0x44
 800566e:	2101      	movs	r1, #1
 8005670:	5499      	strb	r1, [r3, r2]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2245      	movs	r2, #69	; 0x45
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2246      	movs	r2, #70	; 0x46
 800567e:	2101      	movs	r1, #1
 8005680:	5499      	strb	r1, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2247      	movs	r2, #71	; 0x47
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	223d      	movs	r2, #61	; 0x3d
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	0018      	movs	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	b002      	add	sp, #8
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d108      	bne.n	80056ce <HAL_TIM_PWM_Start+0x22>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	223e      	movs	r2, #62	; 0x3e
 80056c0:	5c9b      	ldrb	r3, [r3, r2]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	3b01      	subs	r3, #1
 80056c6:	1e5a      	subs	r2, r3, #1
 80056c8:	4193      	sbcs	r3, r2
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	e037      	b.n	800573e <HAL_TIM_PWM_Start+0x92>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d108      	bne.n	80056e6 <HAL_TIM_PWM_Start+0x3a>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	223f      	movs	r2, #63	; 0x3f
 80056d8:	5c9b      	ldrb	r3, [r3, r2]
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	3b01      	subs	r3, #1
 80056de:	1e5a      	subs	r2, r3, #1
 80056e0:	4193      	sbcs	r3, r2
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	e02b      	b.n	800573e <HAL_TIM_PWM_Start+0x92>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d108      	bne.n	80056fe <HAL_TIM_PWM_Start+0x52>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2240      	movs	r2, #64	; 0x40
 80056f0:	5c9b      	ldrb	r3, [r3, r2]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	1e5a      	subs	r2, r3, #1
 80056f8:	4193      	sbcs	r3, r2
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	e01f      	b.n	800573e <HAL_TIM_PWM_Start+0x92>
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	2b0c      	cmp	r3, #12
 8005702:	d108      	bne.n	8005716 <HAL_TIM_PWM_Start+0x6a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2241      	movs	r2, #65	; 0x41
 8005708:	5c9b      	ldrb	r3, [r3, r2]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	3b01      	subs	r3, #1
 800570e:	1e5a      	subs	r2, r3, #1
 8005710:	4193      	sbcs	r3, r2
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e013      	b.n	800573e <HAL_TIM_PWM_Start+0x92>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b10      	cmp	r3, #16
 800571a:	d108      	bne.n	800572e <HAL_TIM_PWM_Start+0x82>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2242      	movs	r2, #66	; 0x42
 8005720:	5c9b      	ldrb	r3, [r3, r2]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	1e5a      	subs	r2, r3, #1
 8005728:	4193      	sbcs	r3, r2
 800572a:	b2db      	uxtb	r3, r3
 800572c:	e007      	b.n	800573e <HAL_TIM_PWM_Start+0x92>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2243      	movs	r2, #67	; 0x43
 8005732:	5c9b      	ldrb	r3, [r3, r2]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	3b01      	subs	r3, #1
 8005738:	1e5a      	subs	r2, r3, #1
 800573a:	4193      	sbcs	r3, r2
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e085      	b.n	8005852 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <HAL_TIM_PWM_Start+0xaa>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	223e      	movs	r2, #62	; 0x3e
 8005750:	2102      	movs	r1, #2
 8005752:	5499      	strb	r1, [r3, r2]
 8005754:	e023      	b.n	800579e <HAL_TIM_PWM_Start+0xf2>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b04      	cmp	r3, #4
 800575a:	d104      	bne.n	8005766 <HAL_TIM_PWM_Start+0xba>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	223f      	movs	r2, #63	; 0x3f
 8005760:	2102      	movs	r1, #2
 8005762:	5499      	strb	r1, [r3, r2]
 8005764:	e01b      	b.n	800579e <HAL_TIM_PWM_Start+0xf2>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b08      	cmp	r3, #8
 800576a:	d104      	bne.n	8005776 <HAL_TIM_PWM_Start+0xca>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2240      	movs	r2, #64	; 0x40
 8005770:	2102      	movs	r1, #2
 8005772:	5499      	strb	r1, [r3, r2]
 8005774:	e013      	b.n	800579e <HAL_TIM_PWM_Start+0xf2>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b0c      	cmp	r3, #12
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Start+0xda>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2241      	movs	r2, #65	; 0x41
 8005780:	2102      	movs	r1, #2
 8005782:	5499      	strb	r1, [r3, r2]
 8005784:	e00b      	b.n	800579e <HAL_TIM_PWM_Start+0xf2>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b10      	cmp	r3, #16
 800578a:	d104      	bne.n	8005796 <HAL_TIM_PWM_Start+0xea>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2242      	movs	r2, #66	; 0x42
 8005790:	2102      	movs	r1, #2
 8005792:	5499      	strb	r1, [r3, r2]
 8005794:	e003      	b.n	800579e <HAL_TIM_PWM_Start+0xf2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2243      	movs	r2, #67	; 0x43
 800579a:	2102      	movs	r1, #2
 800579c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6839      	ldr	r1, [r7, #0]
 80057a4:	2201      	movs	r2, #1
 80057a6:	0018      	movs	r0, r3
 80057a8:	f001 f8ae 	bl	8006908 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2a      	ldr	r2, [pc, #168]	; (800585c <HAL_TIM_PWM_Start+0x1b0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00e      	beq.n	80057d4 <HAL_TIM_PWM_Start+0x128>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a29      	ldr	r2, [pc, #164]	; (8005860 <HAL_TIM_PWM_Start+0x1b4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d009      	beq.n	80057d4 <HAL_TIM_PWM_Start+0x128>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a27      	ldr	r2, [pc, #156]	; (8005864 <HAL_TIM_PWM_Start+0x1b8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d004      	beq.n	80057d4 <HAL_TIM_PWM_Start+0x128>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a26      	ldr	r2, [pc, #152]	; (8005868 <HAL_TIM_PWM_Start+0x1bc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_TIM_PWM_Start+0x12c>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <HAL_TIM_PWM_Start+0x12e>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d008      	beq.n	80057f0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2180      	movs	r1, #128	; 0x80
 80057ea:	0209      	lsls	r1, r1, #8
 80057ec:	430a      	orrs	r2, r1
 80057ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a19      	ldr	r2, [pc, #100]	; (800585c <HAL_TIM_PWM_Start+0x1b0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIM_PWM_Start+0x162>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_TIM_PWM_Start+0x1c0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIM_PWM_Start+0x162>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a15      	ldr	r2, [pc, #84]	; (8005860 <HAL_TIM_PWM_Start+0x1b4>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d116      	bne.n	800583c <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689b      	ldr	r3, [r3, #8]
 8005814:	4a16      	ldr	r2, [pc, #88]	; (8005870 <HAL_TIM_PWM_Start+0x1c4>)
 8005816:	4013      	ands	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b06      	cmp	r3, #6
 800581e:	d016      	beq.n	800584e <HAL_TIM_PWM_Start+0x1a2>
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	025b      	lsls	r3, r3, #9
 8005826:	429a      	cmp	r2, r3
 8005828:	d011      	beq.n	800584e <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2101      	movs	r1, #1
 8005836:	430a      	orrs	r2, r1
 8005838:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583a:	e008      	b.n	800584e <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2101      	movs	r1, #1
 8005848:	430a      	orrs	r2, r1
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	e000      	b.n	8005850 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	0018      	movs	r0, r3
 8005854:	46bd      	mov	sp, r7
 8005856:	b004      	add	sp, #16
 8005858:	bd80      	pop	{r7, pc}
 800585a:	46c0      	nop			; (mov r8, r8)
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40014000 	.word	0x40014000
 8005864:	40014400 	.word	0x40014400
 8005868:	40014800 	.word	0x40014800
 800586c:	40000400 	.word	0x40000400
 8005870:	00010007 	.word	0x00010007

08005874 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e090      	b.n	80059aa <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	223d      	movs	r2, #61	; 0x3d
 800588c:	5c9b      	ldrb	r3, [r3, r2]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d107      	bne.n	80058a4 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	223c      	movs	r2, #60	; 0x3c
 8005898:	2100      	movs	r1, #0
 800589a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	0018      	movs	r0, r3
 80058a0:	f7fe f99e 	bl	8003be0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	223d      	movs	r2, #61	; 0x3d
 80058a8:	2102      	movs	r1, #2
 80058aa:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	493f      	ldr	r1, [pc, #252]	; (80059b4 <HAL_TIM_Encoder_Init+0x140>)
 80058b8:	400a      	ands	r2, r1
 80058ba:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	0019      	movs	r1, r3
 80058c6:	0010      	movs	r0, r2
 80058c8:	f000 fc48 	bl	800615c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699b      	ldr	r3, [r3, #24]
 80058da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	697a      	ldr	r2, [r7, #20]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	4a31      	ldr	r2, [pc, #196]	; (80059b8 <HAL_TIM_Encoder_Init+0x144>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	4313      	orrs	r3, r2
 8005902:	693a      	ldr	r2, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <HAL_TIM_Encoder_Init+0x148>)
 800590c:	4013      	ands	r3, r2
 800590e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	4a2b      	ldr	r2, [pc, #172]	; (80059c0 <HAL_TIM_Encoder_Init+0x14c>)
 8005914:	4013      	ands	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	69db      	ldr	r3, [r3, #28]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	4313      	orrs	r3, r2
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	4313      	orrs	r3, r2
 8005928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	011a      	lsls	r2, r3, #4
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	031b      	lsls	r3, r3, #12
 8005936:	4313      	orrs	r3, r2
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2222      	movs	r2, #34	; 0x22
 8005942:	4393      	bics	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2288      	movs	r2, #136	; 0x88
 800594a:	4393      	bics	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	4313      	orrs	r3, r2
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2248      	movs	r2, #72	; 0x48
 800597c:	2101      	movs	r1, #1
 800597e:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	223e      	movs	r2, #62	; 0x3e
 8005984:	2101      	movs	r1, #1
 8005986:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	223f      	movs	r2, #63	; 0x3f
 800598c:	2101      	movs	r1, #1
 800598e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2244      	movs	r2, #68	; 0x44
 8005994:	2101      	movs	r1, #1
 8005996:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2245      	movs	r2, #69	; 0x45
 800599c:	2101      	movs	r1, #1
 800599e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	223d      	movs	r2, #61	; 0x3d
 80059a4:	2101      	movs	r1, #1
 80059a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	0018      	movs	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b006      	add	sp, #24
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	fffebff8 	.word	0xfffebff8
 80059b8:	fffffcfc 	.word	0xfffffcfc
 80059bc:	fffff3f3 	.word	0xfffff3f3
 80059c0:	ffff0f0f 	.word	0xffff0f0f

080059c4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059ce:	200f      	movs	r0, #15
 80059d0:	183b      	adds	r3, r7, r0
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	213e      	movs	r1, #62	; 0x3e
 80059d6:	5c52      	ldrb	r2, [r2, r1]
 80059d8:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059da:	230e      	movs	r3, #14
 80059dc:	18fb      	adds	r3, r7, r3
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	213f      	movs	r1, #63	; 0x3f
 80059e2:	5c52      	ldrb	r2, [r2, r1]
 80059e4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059e6:	240d      	movs	r4, #13
 80059e8:	193b      	adds	r3, r7, r4
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	2144      	movs	r1, #68	; 0x44
 80059ee:	5c52      	ldrb	r2, [r2, r1]
 80059f0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059f2:	230c      	movs	r3, #12
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	2145      	movs	r1, #69	; 0x45
 80059fa:	5c52      	ldrb	r2, [r2, r1]
 80059fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d112      	bne.n	8005a2a <HAL_TIM_Encoder_Start+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a04:	183b      	adds	r3, r7, r0
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d103      	bne.n	8005a14 <HAL_TIM_Encoder_Start+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a0c:	193b      	adds	r3, r7, r4
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d001      	beq.n	8005a18 <HAL_TIM_Encoder_Start+0x54>
    {
      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e075      	b.n	8005b04 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	223e      	movs	r2, #62	; 0x3e
 8005a1c:	2102      	movs	r1, #2
 8005a1e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2244      	movs	r2, #68	; 0x44
 8005a24:	2102      	movs	r1, #2
 8005a26:	5499      	strb	r1, [r3, r2]
 8005a28:	e03d      	b.n	8005aa6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d114      	bne.n	8005a5a <HAL_TIM_Encoder_Start+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a30:	230e      	movs	r3, #14
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d104      	bne.n	8005a44 <HAL_TIM_Encoder_Start+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a3a:	230c      	movs	r3, #12
 8005a3c:	18fb      	adds	r3, r7, r3
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d001      	beq.n	8005a48 <HAL_TIM_Encoder_Start+0x84>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e05d      	b.n	8005b04 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	223f      	movs	r2, #63	; 0x3f
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2245      	movs	r2, #69	; 0x45
 8005a54:	2102      	movs	r1, #2
 8005a56:	5499      	strb	r1, [r3, r2]
 8005a58:	e025      	b.n	8005aa6 <HAL_TIM_Encoder_Start+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a5a:	230f      	movs	r3, #15
 8005a5c:	18fb      	adds	r3, r7, r3
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d10e      	bne.n	8005a82 <HAL_TIM_Encoder_Start+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a64:	230e      	movs	r3, #14
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d109      	bne.n	8005a82 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a6e:	230d      	movs	r3, #13
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d104      	bne.n	8005a82 <HAL_TIM_Encoder_Start+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a78:	230c      	movs	r3, #12
 8005a7a:	18fb      	adds	r3, r7, r3
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d001      	beq.n	8005a86 <HAL_TIM_Encoder_Start+0xc2>
    {
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e03e      	b.n	8005b04 <HAL_TIM_Encoder_Start+0x140>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	223e      	movs	r2, #62	; 0x3e
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	223f      	movs	r2, #63	; 0x3f
 8005a92:	2102      	movs	r1, #2
 8005a94:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2244      	movs	r2, #68	; 0x44
 8005a9a:	2102      	movs	r1, #2
 8005a9c:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2245      	movs	r2, #69	; 0x45
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_TIM_Encoder_Start+0xf0>
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d008      	beq.n	8005ac4 <HAL_TIM_Encoder_Start+0x100>
 8005ab2:	e00f      	b.n	8005ad4 <HAL_TIM_Encoder_Start+0x110>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	2100      	movs	r1, #0
 8005abc:	0018      	movs	r0, r3
 8005abe:	f000 ff23 	bl	8006908 <TIM_CCxChannelCmd>
      break;
 8005ac2:	e016      	b.n	8005af2 <HAL_TIM_Encoder_Start+0x12e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	2104      	movs	r1, #4
 8005acc:	0018      	movs	r0, r3
 8005ace:	f000 ff1b 	bl	8006908 <TIM_CCxChannelCmd>
      break;
 8005ad2:	e00e      	b.n	8005af2 <HAL_TIM_Encoder_Start+0x12e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	2100      	movs	r1, #0
 8005adc:	0018      	movs	r0, r3
 8005ade:	f000 ff13 	bl	8006908 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	2104      	movs	r1, #4
 8005aea:	0018      	movs	r0, r3
 8005aec:	f000 ff0c 	bl	8006908 <TIM_CCxChannelCmd>
      break;
 8005af0:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2101      	movs	r1, #1
 8005afe:	430a      	orrs	r2, r1
 8005b00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	0018      	movs	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	b005      	add	sp, #20
 8005b0a:	bd90      	pop	{r4, r7, pc}

08005b0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d124      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d11d      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2203      	movs	r2, #3
 8005b36:	4252      	negs	r2, r2
 8005b38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	2203      	movs	r2, #3
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d004      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	0018      	movs	r0, r3
 8005b50:	f000 faec 	bl	800612c <HAL_TIM_IC_CaptureCallback>
 8005b54:	e007      	b.n	8005b66 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	0018      	movs	r0, r3
 8005b5a:	f000 fadf 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	0018      	movs	r0, r3
 8005b62:	f000 faeb 	bl	800613c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	2204      	movs	r2, #4
 8005b74:	4013      	ands	r3, r2
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d125      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	2204      	movs	r2, #4
 8005b82:	4013      	ands	r3, r2
 8005b84:	2b04      	cmp	r3, #4
 8005b86:	d11e      	bne.n	8005bc6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2205      	movs	r2, #5
 8005b8e:	4252      	negs	r2, r2
 8005b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2202      	movs	r2, #2
 8005b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	23c0      	movs	r3, #192	; 0xc0
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d004      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	0018      	movs	r0, r3
 8005baa:	f000 fabf 	bl	800612c <HAL_TIM_IC_CaptureCallback>
 8005bae:	e007      	b.n	8005bc0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f000 fab2 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	0018      	movs	r0, r3
 8005bbc:	f000 fabe 	bl	800613c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	2208      	movs	r2, #8
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b08      	cmp	r3, #8
 8005bd2:	d124      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2208      	movs	r2, #8
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d11d      	bne.n	8005c1e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2209      	movs	r2, #9
 8005be8:	4252      	negs	r2, r2
 8005bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2204      	movs	r2, #4
 8005bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	2203      	movs	r2, #3
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d004      	beq.n	8005c08 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	0018      	movs	r0, r3
 8005c02:	f000 fa93 	bl	800612c <HAL_TIM_IC_CaptureCallback>
 8005c06:	e007      	b.n	8005c18 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	0018      	movs	r0, r3
 8005c0c:	f000 fa86 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	0018      	movs	r0, r3
 8005c14:	f000 fa92 	bl	800613c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2210      	movs	r2, #16
 8005c26:	4013      	ands	r3, r2
 8005c28:	2b10      	cmp	r3, #16
 8005c2a:	d125      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	2210      	movs	r2, #16
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d11e      	bne.n	8005c78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	2211      	movs	r2, #17
 8005c40:	4252      	negs	r2, r2
 8005c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2208      	movs	r2, #8
 8005c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69da      	ldr	r2, [r3, #28]
 8005c50:	23c0      	movs	r3, #192	; 0xc0
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4013      	ands	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	0018      	movs	r0, r3
 8005c5c:	f000 fa66 	bl	800612c <HAL_TIM_IC_CaptureCallback>
 8005c60:	e007      	b.n	8005c72 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	0018      	movs	r0, r3
 8005c66:	f000 fa59 	bl	800611c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f000 fa65 	bl	800613c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4013      	ands	r3, r2
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d10f      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d108      	bne.n	8005ca6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	4252      	negs	r2, r2
 8005c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	0018      	movs	r0, r3
 8005ca2:	f003 f8a1 	bl	8008de8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	2280      	movs	r2, #128	; 0x80
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b80      	cmp	r3, #128	; 0x80
 8005cb2:	d10f      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	2280      	movs	r2, #128	; 0x80
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b80      	cmp	r3, #128	; 0x80
 8005cc0:	d108      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2281      	movs	r2, #129	; 0x81
 8005cc8:	4252      	negs	r2, r2
 8005cca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0018      	movs	r0, r3
 8005cd0:	f000 ff54 	bl	8006b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	401a      	ands	r2, r3
 8005ce0:	2380      	movs	r3, #128	; 0x80
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d10e      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2280      	movs	r2, #128	; 0x80
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	2b80      	cmp	r3, #128	; 0x80
 8005cf4:	d107      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <HAL_TIM_IRQHandler+0x260>)
 8005cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 ff43 	bl	8006b8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	2240      	movs	r2, #64	; 0x40
 8005d0e:	4013      	ands	r3, r2
 8005d10:	2b40      	cmp	r3, #64	; 0x40
 8005d12:	d10f      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2240      	movs	r2, #64	; 0x40
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	2b40      	cmp	r3, #64	; 0x40
 8005d20:	d108      	bne.n	8005d34 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2241      	movs	r2, #65	; 0x41
 8005d28:	4252      	negs	r2, r2
 8005d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	0018      	movs	r0, r3
 8005d30:	f000 fa0c 	bl	800614c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d10f      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d108      	bne.n	8005d62 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2221      	movs	r2, #33	; 0x21
 8005d56:	4252      	negs	r2, r2
 8005d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f000 ff05 	bl	8006b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d62:	46c0      	nop			; (mov r8, r8)
 8005d64:	46bd      	mov	sp, r7
 8005d66:	b002      	add	sp, #8
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	fffffeff 	.word	0xfffffeff

08005d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d7c:	2317      	movs	r3, #23
 8005d7e:	18fb      	adds	r3, r7, r3
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	223c      	movs	r2, #60	; 0x3c
 8005d88:	5c9b      	ldrb	r3, [r3, r2]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e0e5      	b.n	8005f5e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	223c      	movs	r2, #60	; 0x3c
 8005d96:	2101      	movs	r1, #1
 8005d98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b14      	cmp	r3, #20
 8005d9e:	d900      	bls.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005da0:	e0d1      	b.n	8005f46 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	009a      	lsls	r2, r3, #2
 8005da6:	4b70      	ldr	r3, [pc, #448]	; (8005f68 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005da8:	18d3      	adds	r3, r2, r3
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	0011      	movs	r1, r2
 8005db6:	0018      	movs	r0, r3
 8005db8:	f000 fa46 	bl	8006248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	699a      	ldr	r2, [r3, #24]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2108      	movs	r1, #8
 8005dc8:	430a      	orrs	r2, r1
 8005dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2104      	movs	r1, #4
 8005dd8:	438a      	bics	r2, r1
 8005dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6999      	ldr	r1, [r3, #24]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	619a      	str	r2, [r3, #24]
      break;
 8005dee:	e0af      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	0011      	movs	r1, r2
 8005df8:	0018      	movs	r0, r3
 8005dfa:	f000 faaf 	bl	800635c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2180      	movs	r1, #128	; 0x80
 8005e0a:	0109      	lsls	r1, r1, #4
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4954      	ldr	r1, [pc, #336]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005e1c:	400a      	ands	r2, r1
 8005e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6999      	ldr	r1, [r3, #24]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	021a      	lsls	r2, r3, #8
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	619a      	str	r2, [r3, #24]
      break;
 8005e34:	e08c      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	0011      	movs	r1, r2
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 fb10 	bl	8006464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	69da      	ldr	r2, [r3, #28]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2108      	movs	r1, #8
 8005e50:	430a      	orrs	r2, r1
 8005e52:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	69da      	ldr	r2, [r3, #28]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2104      	movs	r1, #4
 8005e60:	438a      	bics	r2, r1
 8005e62:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	69d9      	ldr	r1, [r3, #28]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	691a      	ldr	r2, [r3, #16]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	430a      	orrs	r2, r1
 8005e74:	61da      	str	r2, [r3, #28]
      break;
 8005e76:	e06b      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	0011      	movs	r1, r2
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 fb77 	bl	8006574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2180      	movs	r1, #128	; 0x80
 8005e92:	0109      	lsls	r1, r1, #4
 8005e94:	430a      	orrs	r2, r1
 8005e96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4932      	ldr	r1, [pc, #200]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ea4:	400a      	ands	r2, r1
 8005ea6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	69d9      	ldr	r1, [r3, #28]
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	021a      	lsls	r2, r3, #8
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	61da      	str	r2, [r3, #28]
      break;
 8005ebc:	e048      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	0011      	movs	r1, r2
 8005ec6:	0018      	movs	r0, r3
 8005ec8:	f000 fbbe 	bl	8006648 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2108      	movs	r1, #8
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2104      	movs	r1, #4
 8005ee8:	438a      	bics	r2, r1
 8005eea:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005efe:	e027      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	0011      	movs	r1, r2
 8005f08:	0018      	movs	r0, r3
 8005f0a:	f000 fbfd 	bl	8006708 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2180      	movs	r1, #128	; 0x80
 8005f1a:	0109      	lsls	r1, r1, #4
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4910      	ldr	r1, [pc, #64]	; (8005f6c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005f2c:	400a      	ands	r2, r1
 8005f2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	021a      	lsls	r2, r3, #8
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005f44:	e004      	b.n	8005f50 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005f46:	2317      	movs	r3, #23
 8005f48:	18fb      	adds	r3, r7, r3
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	701a      	strb	r2, [r3, #0]
      break;
 8005f4e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	223c      	movs	r2, #60	; 0x3c
 8005f54:	2100      	movs	r1, #0
 8005f56:	5499      	strb	r1, [r3, r2]

  return status;
 8005f58:	2317      	movs	r3, #23
 8005f5a:	18fb      	adds	r3, r7, r3
 8005f5c:	781b      	ldrb	r3, [r3, #0]
}
 8005f5e:	0018      	movs	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b006      	add	sp, #24
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	46c0      	nop			; (mov r8, r8)
 8005f68:	0800c1cc 	.word	0x0800c1cc
 8005f6c:	fffffbff 	.word	0xfffffbff

08005f70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f7a:	230f      	movs	r3, #15
 8005f7c:	18fb      	adds	r3, r7, r3
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	223c      	movs	r2, #60	; 0x3c
 8005f86:	5c9b      	ldrb	r3, [r3, r2]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d101      	bne.n	8005f90 <HAL_TIM_ConfigClockSource+0x20>
 8005f8c:	2302      	movs	r3, #2
 8005f8e:	e0bc      	b.n	800610a <HAL_TIM_ConfigClockSource+0x19a>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	223c      	movs	r2, #60	; 0x3c
 8005f94:	2101      	movs	r1, #1
 8005f96:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	223d      	movs	r2, #61	; 0x3d
 8005f9c:	2102      	movs	r1, #2
 8005f9e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4a5a      	ldr	r2, [pc, #360]	; (8006114 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	4a59      	ldr	r2, [pc, #356]	; (8006118 <HAL_TIM_ConfigClockSource+0x1a8>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2280      	movs	r2, #128	; 0x80
 8005fc6:	0192      	lsls	r2, r2, #6
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d040      	beq.n	800604e <HAL_TIM_ConfigClockSource+0xde>
 8005fcc:	2280      	movs	r2, #128	; 0x80
 8005fce:	0192      	lsls	r2, r2, #6
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d900      	bls.n	8005fd6 <HAL_TIM_ConfigClockSource+0x66>
 8005fd4:	e088      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x178>
 8005fd6:	2280      	movs	r2, #128	; 0x80
 8005fd8:	0152      	lsls	r2, r2, #5
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d100      	bne.n	8005fe0 <HAL_TIM_ConfigClockSource+0x70>
 8005fde:	e088      	b.n	80060f2 <HAL_TIM_ConfigClockSource+0x182>
 8005fe0:	2280      	movs	r2, #128	; 0x80
 8005fe2:	0152      	lsls	r2, r2, #5
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d900      	bls.n	8005fea <HAL_TIM_ConfigClockSource+0x7a>
 8005fe8:	e07e      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x178>
 8005fea:	2b70      	cmp	r3, #112	; 0x70
 8005fec:	d018      	beq.n	8006020 <HAL_TIM_ConfigClockSource+0xb0>
 8005fee:	d900      	bls.n	8005ff2 <HAL_TIM_ConfigClockSource+0x82>
 8005ff0:	e07a      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x178>
 8005ff2:	2b60      	cmp	r3, #96	; 0x60
 8005ff4:	d04f      	beq.n	8006096 <HAL_TIM_ConfigClockSource+0x126>
 8005ff6:	d900      	bls.n	8005ffa <HAL_TIM_ConfigClockSource+0x8a>
 8005ff8:	e076      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x178>
 8005ffa:	2b50      	cmp	r3, #80	; 0x50
 8005ffc:	d03b      	beq.n	8006076 <HAL_TIM_ConfigClockSource+0x106>
 8005ffe:	d900      	bls.n	8006002 <HAL_TIM_ConfigClockSource+0x92>
 8006000:	e072      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x178>
 8006002:	2b40      	cmp	r3, #64	; 0x40
 8006004:	d057      	beq.n	80060b6 <HAL_TIM_ConfigClockSource+0x146>
 8006006:	d900      	bls.n	800600a <HAL_TIM_ConfigClockSource+0x9a>
 8006008:	e06e      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x178>
 800600a:	2b30      	cmp	r3, #48	; 0x30
 800600c:	d063      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x166>
 800600e:	d86b      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x178>
 8006010:	2b20      	cmp	r3, #32
 8006012:	d060      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x166>
 8006014:	d868      	bhi.n	80060e8 <HAL_TIM_ConfigClockSource+0x178>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d05d      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x166>
 800601a:	2b10      	cmp	r3, #16
 800601c:	d05b      	beq.n	80060d6 <HAL_TIM_ConfigClockSource+0x166>
 800601e:	e063      	b.n	80060e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006030:	f000 fc4a 	bl	80068c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	2277      	movs	r2, #119	; 0x77
 8006040:	4313      	orrs	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]
      break;
 800604c:	e052      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800605e:	f000 fc33 	bl	80068c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689a      	ldr	r2, [r3, #8]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2180      	movs	r1, #128	; 0x80
 800606e:	01c9      	lsls	r1, r1, #7
 8006070:	430a      	orrs	r2, r1
 8006072:	609a      	str	r2, [r3, #8]
      break;
 8006074:	e03e      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006082:	001a      	movs	r2, r3
 8006084:	f000 fba4 	bl	80067d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2150      	movs	r1, #80	; 0x50
 800608e:	0018      	movs	r0, r3
 8006090:	f000 fbfe 	bl	8006890 <TIM_ITRx_SetConfig>
      break;
 8006094:	e02e      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060a2:	001a      	movs	r2, r3
 80060a4:	f000 fbc2 	bl	800682c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2160      	movs	r1, #96	; 0x60
 80060ae:	0018      	movs	r0, r3
 80060b0:	f000 fbee 	bl	8006890 <TIM_ITRx_SetConfig>
      break;
 80060b4:	e01e      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060c2:	001a      	movs	r2, r3
 80060c4:	f000 fb84 	bl	80067d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2140      	movs	r1, #64	; 0x40
 80060ce:	0018      	movs	r0, r3
 80060d0:	f000 fbde 	bl	8006890 <TIM_ITRx_SetConfig>
      break;
 80060d4:	e00e      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	0019      	movs	r1, r3
 80060e0:	0010      	movs	r0, r2
 80060e2:	f000 fbd5 	bl	8006890 <TIM_ITRx_SetConfig>
      break;
 80060e6:	e005      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80060e8:	230f      	movs	r3, #15
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
      break;
 80060f0:	e000      	b.n	80060f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80060f2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	223d      	movs	r2, #61	; 0x3d
 80060f8:	2101      	movs	r1, #1
 80060fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	223c      	movs	r2, #60	; 0x3c
 8006100:	2100      	movs	r1, #0
 8006102:	5499      	strb	r1, [r3, r2]

  return status;
 8006104:	230f      	movs	r3, #15
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	781b      	ldrb	r3, [r3, #0]
}
 800610a:	0018      	movs	r0, r3
 800610c:	46bd      	mov	sp, r7
 800610e:	b004      	add	sp, #16
 8006110:	bd80      	pop	{r7, pc}
 8006112:	46c0      	nop			; (mov r8, r8)
 8006114:	ffceff88 	.word	0xffceff88
 8006118:	ffff00ff 	.word	0xffff00ff

0800611c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006124:	46c0      	nop			; (mov r8, r8)
 8006126:	46bd      	mov	sp, r7
 8006128:	b002      	add	sp, #8
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006134:	46c0      	nop			; (mov r8, r8)
 8006136:	46bd      	mov	sp, r7
 8006138:	b002      	add	sp, #8
 800613a:	bd80      	pop	{r7, pc}

0800613c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006144:	46c0      	nop			; (mov r8, r8)
 8006146:	46bd      	mov	sp, r7
 8006148:	b002      	add	sp, #8
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006154:	46c0      	nop			; (mov r8, r8)
 8006156:	46bd      	mov	sp, r7
 8006158:	b002      	add	sp, #8
 800615a:	bd80      	pop	{r7, pc}

0800615c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a2f      	ldr	r2, [pc, #188]	; (800622c <TIM_Base_SetConfig+0xd0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d003      	beq.n	800617c <TIM_Base_SetConfig+0x20>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a2e      	ldr	r2, [pc, #184]	; (8006230 <TIM_Base_SetConfig+0xd4>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d108      	bne.n	800618e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2270      	movs	r2, #112	; 0x70
 8006180:	4393      	bics	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a26      	ldr	r2, [pc, #152]	; (800622c <TIM_Base_SetConfig+0xd0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <TIM_Base_SetConfig+0x62>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	4a25      	ldr	r2, [pc, #148]	; (8006230 <TIM_Base_SetConfig+0xd4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d00f      	beq.n	80061be <TIM_Base_SetConfig+0x62>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4a24      	ldr	r2, [pc, #144]	; (8006234 <TIM_Base_SetConfig+0xd8>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d00b      	beq.n	80061be <TIM_Base_SetConfig+0x62>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a23      	ldr	r2, [pc, #140]	; (8006238 <TIM_Base_SetConfig+0xdc>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d007      	beq.n	80061be <TIM_Base_SetConfig+0x62>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	4a22      	ldr	r2, [pc, #136]	; (800623c <TIM_Base_SetConfig+0xe0>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d003      	beq.n	80061be <TIM_Base_SetConfig+0x62>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	4a21      	ldr	r2, [pc, #132]	; (8006240 <TIM_Base_SetConfig+0xe4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d108      	bne.n	80061d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a20      	ldr	r2, [pc, #128]	; (8006244 <TIM_Base_SetConfig+0xe8>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2280      	movs	r2, #128	; 0x80
 80061d4:	4393      	bics	r3, r2
 80061d6:	001a      	movs	r2, r3
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	695b      	ldr	r3, [r3, #20]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a0c      	ldr	r2, [pc, #48]	; (800622c <TIM_Base_SetConfig+0xd0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00b      	beq.n	8006216 <TIM_Base_SetConfig+0xba>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a0d      	ldr	r2, [pc, #52]	; (8006238 <TIM_Base_SetConfig+0xdc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d007      	beq.n	8006216 <TIM_Base_SetConfig+0xba>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a0c      	ldr	r2, [pc, #48]	; (800623c <TIM_Base_SetConfig+0xe0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_Base_SetConfig+0xba>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a0b      	ldr	r2, [pc, #44]	; (8006240 <TIM_Base_SetConfig+0xe4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d103      	bne.n	800621e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	615a      	str	r2, [r3, #20]
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	46bd      	mov	sp, r7
 8006228:	b004      	add	sp, #16
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40000400 	.word	0x40000400
 8006234:	40002000 	.word	0x40002000
 8006238:	40014000 	.word	0x40014000
 800623c:	40014400 	.word	0x40014400
 8006240:	40014800 	.word	0x40014800
 8006244:	fffffcff 	.word	0xfffffcff

08006248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
 8006250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	2201      	movs	r2, #1
 8006258:	4393      	bics	r3, r2
 800625a:	001a      	movs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a32      	ldr	r2, [pc, #200]	; (8006340 <TIM_OC1_SetConfig+0xf8>)
 8006276:	4013      	ands	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2203      	movs	r2, #3
 800627e:	4393      	bics	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2202      	movs	r2, #2
 8006290:	4393      	bics	r3, r2
 8006292:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a28      	ldr	r2, [pc, #160]	; (8006344 <TIM_OC1_SetConfig+0xfc>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00b      	beq.n	80062be <TIM_OC1_SetConfig+0x76>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a27      	ldr	r2, [pc, #156]	; (8006348 <TIM_OC1_SetConfig+0x100>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d007      	beq.n	80062be <TIM_OC1_SetConfig+0x76>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a26      	ldr	r2, [pc, #152]	; (800634c <TIM_OC1_SetConfig+0x104>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d003      	beq.n	80062be <TIM_OC1_SetConfig+0x76>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a25      	ldr	r2, [pc, #148]	; (8006350 <TIM_OC1_SetConfig+0x108>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10c      	bne.n	80062d8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2208      	movs	r2, #8
 80062c2:	4393      	bics	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	2204      	movs	r2, #4
 80062d4:	4393      	bics	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a1a      	ldr	r2, [pc, #104]	; (8006344 <TIM_OC1_SetConfig+0xfc>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00b      	beq.n	80062f8 <TIM_OC1_SetConfig+0xb0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4a19      	ldr	r2, [pc, #100]	; (8006348 <TIM_OC1_SetConfig+0x100>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d007      	beq.n	80062f8 <TIM_OC1_SetConfig+0xb0>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4a18      	ldr	r2, [pc, #96]	; (800634c <TIM_OC1_SetConfig+0x104>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d003      	beq.n	80062f8 <TIM_OC1_SetConfig+0xb0>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	4a17      	ldr	r2, [pc, #92]	; (8006350 <TIM_OC1_SetConfig+0x108>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d111      	bne.n	800631c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4a16      	ldr	r2, [pc, #88]	; (8006354 <TIM_OC1_SetConfig+0x10c>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	4a15      	ldr	r2, [pc, #84]	; (8006358 <TIM_OC1_SetConfig+0x110>)
 8006304:	4013      	ands	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	621a      	str	r2, [r3, #32]
}
 8006336:	46c0      	nop			; (mov r8, r8)
 8006338:	46bd      	mov	sp, r7
 800633a:	b006      	add	sp, #24
 800633c:	bd80      	pop	{r7, pc}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	fffeff8f 	.word	0xfffeff8f
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40014000 	.word	0x40014000
 800634c:	40014400 	.word	0x40014400
 8006350:	40014800 	.word	0x40014800
 8006354:	fffffeff 	.word	0xfffffeff
 8006358:	fffffdff 	.word	0xfffffdff

0800635c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a1b      	ldr	r3, [r3, #32]
 800636a:	2210      	movs	r2, #16
 800636c:	4393      	bics	r3, r2
 800636e:	001a      	movs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699b      	ldr	r3, [r3, #24]
 8006384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a2e      	ldr	r2, [pc, #184]	; (8006444 <TIM_OC2_SetConfig+0xe8>)
 800638a:	4013      	ands	r3, r2
 800638c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4a2d      	ldr	r2, [pc, #180]	; (8006448 <TIM_OC2_SetConfig+0xec>)
 8006392:	4013      	ands	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2220      	movs	r2, #32
 80063a6:	4393      	bics	r3, r2
 80063a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	011b      	lsls	r3, r3, #4
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a24      	ldr	r2, [pc, #144]	; (800644c <TIM_OC2_SetConfig+0xf0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d10d      	bne.n	80063da <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2280      	movs	r2, #128	; 0x80
 80063c2:	4393      	bics	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2240      	movs	r2, #64	; 0x40
 80063d6:	4393      	bics	r3, r2
 80063d8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a1b      	ldr	r2, [pc, #108]	; (800644c <TIM_OC2_SetConfig+0xf0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00b      	beq.n	80063fa <TIM_OC2_SetConfig+0x9e>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a1a      	ldr	r2, [pc, #104]	; (8006450 <TIM_OC2_SetConfig+0xf4>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <TIM_OC2_SetConfig+0x9e>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a19      	ldr	r2, [pc, #100]	; (8006454 <TIM_OC2_SetConfig+0xf8>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_OC2_SetConfig+0x9e>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a18      	ldr	r2, [pc, #96]	; (8006458 <TIM_OC2_SetConfig+0xfc>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d113      	bne.n	8006422 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4a17      	ldr	r2, [pc, #92]	; (800645c <TIM_OC2_SetConfig+0x100>)
 80063fe:	4013      	ands	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	4a16      	ldr	r2, [pc, #88]	; (8006460 <TIM_OC2_SetConfig+0x104>)
 8006406:	4013      	ands	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	4313      	orrs	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	621a      	str	r2, [r3, #32]
}
 800643c:	46c0      	nop			; (mov r8, r8)
 800643e:	46bd      	mov	sp, r7
 8006440:	b006      	add	sp, #24
 8006442:	bd80      	pop	{r7, pc}
 8006444:	feff8fff 	.word	0xfeff8fff
 8006448:	fffffcff 	.word	0xfffffcff
 800644c:	40012c00 	.word	0x40012c00
 8006450:	40014000 	.word	0x40014000
 8006454:	40014400 	.word	0x40014400
 8006458:	40014800 	.word	0x40014800
 800645c:	fffffbff 	.word	0xfffffbff
 8006460:	fffff7ff 	.word	0xfffff7ff

08006464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	4a35      	ldr	r2, [pc, #212]	; (8006548 <TIM_OC3_SetConfig+0xe4>)
 8006474:	401a      	ands	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a2f      	ldr	r2, [pc, #188]	; (800654c <TIM_OC3_SetConfig+0xe8>)
 8006490:	4013      	ands	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2203      	movs	r2, #3
 8006498:	4393      	bics	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	4a29      	ldr	r2, [pc, #164]	; (8006550 <TIM_OC3_SetConfig+0xec>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	021b      	lsls	r3, r3, #8
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a25      	ldr	r2, [pc, #148]	; (8006554 <TIM_OC3_SetConfig+0xf0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d10d      	bne.n	80064de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4a24      	ldr	r2, [pc, #144]	; (8006558 <TIM_OC3_SetConfig+0xf4>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	4a20      	ldr	r2, [pc, #128]	; (800655c <TIM_OC3_SetConfig+0xf8>)
 80064da:	4013      	ands	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <TIM_OC3_SetConfig+0xf0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_OC3_SetConfig+0x9a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <TIM_OC3_SetConfig+0xfc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_OC3_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a1c      	ldr	r2, [pc, #112]	; (8006564 <TIM_OC3_SetConfig+0x100>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC3_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a1b      	ldr	r2, [pc, #108]	; (8006568 <TIM_OC3_SetConfig+0x104>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d113      	bne.n	8006526 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	4a1a      	ldr	r2, [pc, #104]	; (800656c <TIM_OC3_SetConfig+0x108>)
 8006502:	4013      	ands	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4a19      	ldr	r2, [pc, #100]	; (8006570 <TIM_OC3_SetConfig+0x10c>)
 800650a:	4013      	ands	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	011b      	lsls	r3, r3, #4
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	4313      	orrs	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	68fa      	ldr	r2, [r7, #12]
 8006530:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	621a      	str	r2, [r3, #32]
}
 8006540:	46c0      	nop			; (mov r8, r8)
 8006542:	46bd      	mov	sp, r7
 8006544:	b006      	add	sp, #24
 8006546:	bd80      	pop	{r7, pc}
 8006548:	fffffeff 	.word	0xfffffeff
 800654c:	fffeff8f 	.word	0xfffeff8f
 8006550:	fffffdff 	.word	0xfffffdff
 8006554:	40012c00 	.word	0x40012c00
 8006558:	fffff7ff 	.word	0xfffff7ff
 800655c:	fffffbff 	.word	0xfffffbff
 8006560:	40014000 	.word	0x40014000
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800
 800656c:	ffffefff 	.word	0xffffefff
 8006570:	ffffdfff 	.word	0xffffdfff

08006574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b086      	sub	sp, #24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	4a28      	ldr	r2, [pc, #160]	; (8006624 <TIM_OC4_SetConfig+0xb0>)
 8006584:	401a      	ands	r2, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a22      	ldr	r2, [pc, #136]	; (8006628 <TIM_OC4_SetConfig+0xb4>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4a21      	ldr	r2, [pc, #132]	; (800662c <TIM_OC4_SetConfig+0xb8>)
 80065a8:	4013      	ands	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4a1d      	ldr	r2, [pc, #116]	; (8006630 <TIM_OC4_SetConfig+0xbc>)
 80065bc:	4013      	ands	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	031b      	lsls	r3, r3, #12
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a19      	ldr	r2, [pc, #100]	; (8006634 <TIM_OC4_SetConfig+0xc0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00b      	beq.n	80065ec <TIM_OC4_SetConfig+0x78>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a18      	ldr	r2, [pc, #96]	; (8006638 <TIM_OC4_SetConfig+0xc4>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <TIM_OC4_SetConfig+0x78>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <TIM_OC4_SetConfig+0xc8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC4_SetConfig+0x78>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a16      	ldr	r2, [pc, #88]	; (8006640 <TIM_OC4_SetConfig+0xcc>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d109      	bne.n	8006600 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	4a15      	ldr	r2, [pc, #84]	; (8006644 <TIM_OC4_SetConfig+0xd0>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	019b      	lsls	r3, r3, #6
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	46bd      	mov	sp, r7
 800661e:	b006      	add	sp, #24
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			; (mov r8, r8)
 8006624:	ffffefff 	.word	0xffffefff
 8006628:	feff8fff 	.word	0xfeff8fff
 800662c:	fffffcff 	.word	0xfffffcff
 8006630:	ffffdfff 	.word	0xffffdfff
 8006634:	40012c00 	.word	0x40012c00
 8006638:	40014000 	.word	0x40014000
 800663c:	40014400 	.word	0x40014400
 8006640:	40014800 	.word	0x40014800
 8006644:	ffffbfff 	.word	0xffffbfff

08006648 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	4a25      	ldr	r2, [pc, #148]	; (80066ec <TIM_OC5_SetConfig+0xa4>)
 8006658:	401a      	ands	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800666e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	4a1f      	ldr	r2, [pc, #124]	; (80066f0 <TIM_OC5_SetConfig+0xa8>)
 8006674:	4013      	ands	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <TIM_OC5_SetConfig+0xac>)
 8006686:	4013      	ands	r3, r2
 8006688:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	041b      	lsls	r3, r3, #16
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <TIM_OC5_SetConfig+0xb0>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00b      	beq.n	80066b6 <TIM_OC5_SetConfig+0x6e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a16      	ldr	r2, [pc, #88]	; (80066fc <TIM_OC5_SetConfig+0xb4>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d007      	beq.n	80066b6 <TIM_OC5_SetConfig+0x6e>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a15      	ldr	r2, [pc, #84]	; (8006700 <TIM_OC5_SetConfig+0xb8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_OC5_SetConfig+0x6e>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a14      	ldr	r2, [pc, #80]	; (8006704 <TIM_OC5_SetConfig+0xbc>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d109      	bne.n	80066ca <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4a0c      	ldr	r2, [pc, #48]	; (80066ec <TIM_OC5_SetConfig+0xa4>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	621a      	str	r2, [r3, #32]
}
 80066e4:	46c0      	nop			; (mov r8, r8)
 80066e6:	46bd      	mov	sp, r7
 80066e8:	b006      	add	sp, #24
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	fffeffff 	.word	0xfffeffff
 80066f0:	fffeff8f 	.word	0xfffeff8f
 80066f4:	fffdffff 	.word	0xfffdffff
 80066f8:	40012c00 	.word	0x40012c00
 80066fc:	40014000 	.word	0x40014000
 8006700:	40014400 	.word	0x40014400
 8006704:	40014800 	.word	0x40014800

08006708 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b086      	sub	sp, #24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	4a26      	ldr	r2, [pc, #152]	; (80067b0 <TIM_OC6_SetConfig+0xa8>)
 8006718:	401a      	ands	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4a20      	ldr	r2, [pc, #128]	; (80067b4 <TIM_OC6_SetConfig+0xac>)
 8006734:	4013      	ands	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	4a1c      	ldr	r2, [pc, #112]	; (80067b8 <TIM_OC6_SetConfig+0xb0>)
 8006748:	4013      	ands	r3, r2
 800674a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	051b      	lsls	r3, r3, #20
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a18      	ldr	r2, [pc, #96]	; (80067bc <TIM_OC6_SetConfig+0xb4>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d00b      	beq.n	8006778 <TIM_OC6_SetConfig+0x70>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a17      	ldr	r2, [pc, #92]	; (80067c0 <TIM_OC6_SetConfig+0xb8>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d007      	beq.n	8006778 <TIM_OC6_SetConfig+0x70>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a16      	ldr	r2, [pc, #88]	; (80067c4 <TIM_OC6_SetConfig+0xbc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_OC6_SetConfig+0x70>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a15      	ldr	r2, [pc, #84]	; (80067c8 <TIM_OC6_SetConfig+0xc0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d109      	bne.n	800678c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	4a14      	ldr	r2, [pc, #80]	; (80067cc <TIM_OC6_SetConfig+0xc4>)
 800677c:	4013      	ands	r3, r2
 800677e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	695b      	ldr	r3, [r3, #20]
 8006784:	029b      	lsls	r3, r3, #10
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68fa      	ldr	r2, [r7, #12]
 8006796:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	621a      	str	r2, [r3, #32]
}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b006      	add	sp, #24
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	ffefffff 	.word	0xffefffff
 80067b4:	feff8fff 	.word	0xfeff8fff
 80067b8:	ffdfffff 	.word	0xffdfffff
 80067bc:	40012c00 	.word	0x40012c00
 80067c0:	40014000 	.word	0x40014000
 80067c4:	40014400 	.word	0x40014400
 80067c8:	40014800 	.word	0x40014800
 80067cc:	fffbffff 	.word	0xfffbffff

080067d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	2201      	movs	r2, #1
 80067e8:	4393      	bics	r3, r2
 80067ea:	001a      	movs	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	22f0      	movs	r2, #240	; 0xf0
 80067fa:	4393      	bics	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	220a      	movs	r2, #10
 800680c:	4393      	bics	r3, r2
 800680e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	4313      	orrs	r3, r2
 8006816:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	697a      	ldr	r2, [r7, #20]
 8006822:	621a      	str	r2, [r3, #32]
}
 8006824:	46c0      	nop			; (mov r8, r8)
 8006826:	46bd      	mov	sp, r7
 8006828:	b006      	add	sp, #24
 800682a:	bd80      	pop	{r7, pc}

0800682c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	2210      	movs	r2, #16
 800683e:	4393      	bics	r3, r2
 8006840:	001a      	movs	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a1b      	ldr	r3, [r3, #32]
 8006850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	4a0d      	ldr	r2, [pc, #52]	; (800688c <TIM_TI2_ConfigInputStage+0x60>)
 8006856:	4013      	ands	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	031b      	lsls	r3, r3, #12
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	22a0      	movs	r2, #160	; 0xa0
 8006868:	4393      	bics	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	693a      	ldr	r2, [r7, #16]
 8006872:	4313      	orrs	r3, r2
 8006874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	621a      	str	r2, [r3, #32]
}
 8006882:	46c0      	nop			; (mov r8, r8)
 8006884:	46bd      	mov	sp, r7
 8006886:	b006      	add	sp, #24
 8006888:	bd80      	pop	{r7, pc}
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	ffff0fff 	.word	0xffff0fff

08006890 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4a08      	ldr	r2, [pc, #32]	; (80068c4 <TIM_ITRx_SetConfig+0x34>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068a8:	683a      	ldr	r2, [r7, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	2207      	movs	r2, #7
 80068b0:	4313      	orrs	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	609a      	str	r2, [r3, #8]
}
 80068ba:	46c0      	nop			; (mov r8, r8)
 80068bc:	46bd      	mov	sp, r7
 80068be:	b004      	add	sp, #16
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	ffcfff8f 	.word	0xffcfff8f

080068c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
 80068d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068dc:	697b      	ldr	r3, [r7, #20]
 80068de:	4a09      	ldr	r2, [pc, #36]	; (8006904 <TIM_ETR_SetConfig+0x3c>)
 80068e0:	4013      	ands	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	021a      	lsls	r2, r3, #8
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	697a      	ldr	r2, [r7, #20]
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	609a      	str	r2, [r3, #8]
}
 80068fc:	46c0      	nop			; (mov r8, r8)
 80068fe:	46bd      	mov	sp, r7
 8006900:	b006      	add	sp, #24
 8006902:	bd80      	pop	{r7, pc}
 8006904:	ffff00ff 	.word	0xffff00ff

08006908 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	221f      	movs	r2, #31
 8006918:	4013      	ands	r3, r2
 800691a:	2201      	movs	r2, #1
 800691c:	409a      	lsls	r2, r3
 800691e:	0013      	movs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	6a1b      	ldr	r3, [r3, #32]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	43d2      	mvns	r2, r2
 800692a:	401a      	ands	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a1a      	ldr	r2, [r3, #32]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	211f      	movs	r1, #31
 8006938:	400b      	ands	r3, r1
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	4099      	lsls	r1, r3
 800693e:	000b      	movs	r3, r1
 8006940:	431a      	orrs	r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	46c0      	nop			; (mov r8, r8)
 8006948:	46bd      	mov	sp, r7
 800694a:	b006      	add	sp, #24
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	223c      	movs	r2, #60	; 0x3c
 800695e:	5c9b      	ldrb	r3, [r3, r2]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d101      	bne.n	8006968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006964:	2302      	movs	r3, #2
 8006966:	e04f      	b.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	223c      	movs	r2, #60	; 0x3c
 800696c:	2101      	movs	r1, #1
 800696e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	223d      	movs	r2, #61	; 0x3d
 8006974:	2102      	movs	r1, #2
 8006976:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a20      	ldr	r2, [pc, #128]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d108      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a1f      	ldr	r2, [pc, #124]	; (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006996:	4013      	ands	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2270      	movs	r2, #112	; 0x70
 80069a8:	4393      	bics	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a13      	ldr	r2, [pc, #76]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d009      	beq.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a12      	ldr	r2, [pc, #72]	; (8006a18 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a11      	ldr	r2, [pc, #68]	; (8006a1c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d10c      	bne.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2280      	movs	r2, #128	; 0x80
 80069e0:	4393      	bics	r3, r2
 80069e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	223d      	movs	r2, #61	; 0x3d
 80069fa:	2101      	movs	r1, #1
 80069fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	223c      	movs	r2, #60	; 0x3c
 8006a02:	2100      	movs	r1, #0
 8006a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a06:	2300      	movs	r3, #0
}
 8006a08:	0018      	movs	r0, r3
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	b004      	add	sp, #16
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	40012c00 	.word	0x40012c00
 8006a14:	ff0fffff 	.word	0xff0fffff
 8006a18:	40000400 	.word	0x40000400
 8006a1c:	40014000 	.word	0x40014000

08006a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	223c      	movs	r2, #60	; 0x3c
 8006a32:	5c9b      	ldrb	r3, [r3, r2]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e079      	b.n	8006b30 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	223c      	movs	r2, #60	; 0x3c
 8006a40:	2101      	movs	r1, #1
 8006a42:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	22ff      	movs	r2, #255	; 0xff
 8006a48:	4393      	bics	r3, r2
 8006a4a:	001a      	movs	r2, r3
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4a38      	ldr	r2, [pc, #224]	; (8006b38 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006a58:	401a      	ands	r2, r3
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4a35      	ldr	r2, [pc, #212]	; (8006b3c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006a66:	401a      	ands	r2, r3
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	4a33      	ldr	r2, [pc, #204]	; (8006b40 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006a74:	401a      	ands	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	4a30      	ldr	r2, [pc, #192]	; (8006b44 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006a82:	401a      	ands	r2, r3
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4a2e      	ldr	r2, [pc, #184]	; (8006b48 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006a90:	401a      	ands	r2, r3
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	4a2b      	ldr	r2, [pc, #172]	; (8006b4c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4a29      	ldr	r2, [pc, #164]	; (8006b50 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006aac:	401a      	ands	r2, r3
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	041b      	lsls	r3, r3, #16
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a25      	ldr	r2, [pc, #148]	; (8006b54 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d106      	bne.n	8006ad0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4a24      	ldr	r2, [pc, #144]	; (8006b58 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006ac6:	401a      	ands	r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a1f      	ldr	r2, [pc, #124]	; (8006b54 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d121      	bne.n	8006b1e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006ade:	401a      	ands	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	051b      	lsls	r3, r3, #20
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a1c      	ldr	r2, [pc, #112]	; (8006b60 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006aee:	401a      	ands	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4a1a      	ldr	r2, [pc, #104]	; (8006b64 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006afc:	401a      	ands	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a12      	ldr	r2, [pc, #72]	; (8006b54 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d106      	bne.n	8006b1e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006b14:	401a      	ands	r2, r3
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	223c      	movs	r2, #60	; 0x3c
 8006b2a:	2100      	movs	r1, #0
 8006b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	0018      	movs	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b004      	add	sp, #16
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	fffffcff 	.word	0xfffffcff
 8006b3c:	fffffbff 	.word	0xfffffbff
 8006b40:	fffff7ff 	.word	0xfffff7ff
 8006b44:	ffffefff 	.word	0xffffefff
 8006b48:	ffffdfff 	.word	0xffffdfff
 8006b4c:	ffffbfff 	.word	0xffffbfff
 8006b50:	fff0ffff 	.word	0xfff0ffff
 8006b54:	40012c00 	.word	0x40012c00
 8006b58:	efffffff 	.word	0xefffffff
 8006b5c:	ff0fffff 	.word	0xff0fffff
 8006b60:	feffffff 	.word	0xfeffffff
 8006b64:	fdffffff 	.word	0xfdffffff
 8006b68:	dfffffff 	.word	0xdfffffff

08006b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b74:	46c0      	nop			; (mov r8, r8)
 8006b76:	46bd      	mov	sp, r7
 8006b78:	b002      	add	sp, #8
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b84:	46c0      	nop			; (mov r8, r8)
 8006b86:	46bd      	mov	sp, r7
 8006b88:	b002      	add	sp, #8
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	46bd      	mov	sp, r7
 8006b98:	b002      	add	sp, #8
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b082      	sub	sp, #8
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e046      	b.n	8006c3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2288      	movs	r2, #136	; 0x88
 8006bb2:	589b      	ldr	r3, [r3, r2]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d107      	bne.n	8006bc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2284      	movs	r2, #132	; 0x84
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7fd f9e6 	bl	8003f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2288      	movs	r2, #136	; 0x88
 8006bcc:	2124      	movs	r1, #36	; 0x24
 8006bce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2101      	movs	r1, #1
 8006bdc:	438a      	bics	r2, r1
 8006bde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	0018      	movs	r0, r3
 8006be4:	f000 fc66 	bl	80074b4 <UART_SetConfig>
 8006be8:	0003      	movs	r3, r0
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e024      	b.n	8006c3c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f000 fdfd 	bl	80077fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	490d      	ldr	r1, [pc, #52]	; (8006c44 <HAL_UART_Init+0xa8>)
 8006c0e:	400a      	ands	r2, r1
 8006c10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	212a      	movs	r1, #42	; 0x2a
 8006c1e:	438a      	bics	r2, r1
 8006c20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2101      	movs	r1, #1
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	0018      	movs	r0, r3
 8006c36:	f000 fe95 	bl	8007964 <UART_CheckIdleState>
 8006c3a:	0003      	movs	r3, r0
}
 8006c3c:	0018      	movs	r0, r3
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	b002      	add	sp, #8
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	ffffb7ff 	.word	0xffffb7ff

08006c48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	; 0x28
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	603b      	str	r3, [r7, #0]
 8006c54:	1dbb      	adds	r3, r7, #6
 8006c56:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	2288      	movs	r2, #136	; 0x88
 8006c5c:	589b      	ldr	r3, [r3, r2]
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d000      	beq.n	8006c64 <HAL_UART_Transmit+0x1c>
 8006c62:	e088      	b.n	8006d76 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d003      	beq.n	8006c72 <HAL_UART_Transmit+0x2a>
 8006c6a:	1dbb      	adds	r3, r7, #6
 8006c6c:	881b      	ldrh	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e080      	b.n	8006d78 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	2380      	movs	r3, #128	; 0x80
 8006c7c:	015b      	lsls	r3, r3, #5
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d109      	bne.n	8006c96 <HAL_UART_Transmit+0x4e>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d105      	bne.n	8006c96 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d001      	beq.n	8006c96 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006c92:	2301      	movs	r3, #1
 8006c94:	e070      	b.n	8006d78 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2290      	movs	r2, #144	; 0x90
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2288      	movs	r2, #136	; 0x88
 8006ca2:	2121      	movs	r1, #33	; 0x21
 8006ca4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ca6:	f7fd fa85 	bl	80041b4 <HAL_GetTick>
 8006caa:	0003      	movs	r3, r0
 8006cac:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	1dba      	adds	r2, r7, #6
 8006cb2:	2154      	movs	r1, #84	; 0x54
 8006cb4:	8812      	ldrh	r2, [r2, #0]
 8006cb6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	1dba      	adds	r2, r7, #6
 8006cbc:	2156      	movs	r1, #86	; 0x56
 8006cbe:	8812      	ldrh	r2, [r2, #0]
 8006cc0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	2380      	movs	r3, #128	; 0x80
 8006cc8:	015b      	lsls	r3, r3, #5
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d108      	bne.n	8006ce0 <HAL_UART_Transmit+0x98>
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d104      	bne.n	8006ce0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	61bb      	str	r3, [r7, #24]
 8006cde:	e003      	b.n	8006ce8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006ce8:	e02c      	b.n	8006d44 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	9300      	str	r3, [sp, #0]
 8006cf2:	0013      	movs	r3, r2
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2180      	movs	r1, #128	; 0x80
 8006cf8:	f000 fe82 	bl	8007a00 <UART_WaitOnFlagUntilTimeout>
 8006cfc:	1e03      	subs	r3, r0, #0
 8006cfe:	d001      	beq.n	8006d04 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e039      	b.n	8006d78 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10b      	bne.n	8006d22 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d0a:	69bb      	ldr	r3, [r7, #24]
 8006d0c:	881b      	ldrh	r3, [r3, #0]
 8006d0e:	001a      	movs	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	05d2      	lsls	r2, r2, #23
 8006d16:	0dd2      	lsrs	r2, r2, #23
 8006d18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	61bb      	str	r3, [r7, #24]
 8006d20:	e007      	b.n	8006d32 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	781a      	ldrb	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2256      	movs	r2, #86	; 0x56
 8006d36:	5a9b      	ldrh	r3, [r3, r2]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b299      	uxth	r1, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2256      	movs	r2, #86	; 0x56
 8006d42:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2256      	movs	r2, #86	; 0x56
 8006d48:	5a9b      	ldrh	r3, [r3, r2]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1cc      	bne.n	8006cea <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	0013      	movs	r3, r2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2140      	movs	r1, #64	; 0x40
 8006d5e:	f000 fe4f 	bl	8007a00 <UART_WaitOnFlagUntilTimeout>
 8006d62:	1e03      	subs	r3, r0, #0
 8006d64:	d001      	beq.n	8006d6a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e006      	b.n	8006d78 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2288      	movs	r2, #136	; 0x88
 8006d6e:	2120      	movs	r1, #32
 8006d70:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e000      	b.n	8006d78 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006d76:	2302      	movs	r3, #2
  }
}
 8006d78:	0018      	movs	r0, r3
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	b008      	add	sp, #32
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	1dbb      	adds	r3, r7, #6
 8006d8c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	228c      	movs	r2, #140	; 0x8c
 8006d92:	589b      	ldr	r3, [r3, r2]
 8006d94:	2b20      	cmp	r3, #32
 8006d96:	d145      	bne.n	8006e24 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <HAL_UART_Receive_IT+0x26>
 8006d9e:	1dbb      	adds	r3, r7, #6
 8006da0:	881b      	ldrh	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e03d      	b.n	8006e26 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	689a      	ldr	r2, [r3, #8]
 8006dae:	2380      	movs	r3, #128	; 0x80
 8006db0:	015b      	lsls	r3, r3, #5
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d109      	bne.n	8006dca <HAL_UART_Receive_IT+0x4a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	d001      	beq.n	8006dca <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e02d      	b.n	8006e26 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	041b      	lsls	r3, r3, #16
 8006dda:	4013      	ands	r3, r2
 8006ddc:	d019      	beq.n	8006e12 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dde:	f3ef 8310 	mrs	r3, PRIMASK
 8006de2:	613b      	str	r3, [r7, #16]
  return(result);
 8006de4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006de6:	61fb      	str	r3, [r7, #28]
 8006de8:	2301      	movs	r3, #1
 8006dea:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f383 8810 	msr	PRIMASK, r3
}
 8006df2:	46c0      	nop			; (mov r8, r8)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2180      	movs	r1, #128	; 0x80
 8006e00:	04c9      	lsls	r1, r1, #19
 8006e02:	430a      	orrs	r2, r1
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	f383 8810 	msr	PRIMASK, r3
}
 8006e10:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e12:	1dbb      	adds	r3, r7, #6
 8006e14:	881a      	ldrh	r2, [r3, #0]
 8006e16:	68b9      	ldr	r1, [r7, #8]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	0018      	movs	r0, r3
 8006e1c:	f000 feb8 	bl	8007b90 <UART_Start_Receive_IT>
 8006e20:	0003      	movs	r3, r0
 8006e22:	e000      	b.n	8006e26 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006e24:	2302      	movs	r3, #2
  }
}
 8006e26:	0018      	movs	r0, r3
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	b008      	add	sp, #32
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e30:	b5b0      	push	{r4, r5, r7, lr}
 8006e32:	b0aa      	sub	sp, #168	; 0xa8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69db      	ldr	r3, [r3, #28]
 8006e3e:	22a4      	movs	r2, #164	; 0xa4
 8006e40:	18b9      	adds	r1, r7, r2
 8006e42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	20a0      	movs	r0, #160	; 0xa0
 8006e4c:	1839      	adds	r1, r7, r0
 8006e4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	249c      	movs	r4, #156	; 0x9c
 8006e58:	1939      	adds	r1, r7, r4
 8006e5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e5c:	0011      	movs	r1, r2
 8006e5e:	18bb      	adds	r3, r7, r2
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4aa2      	ldr	r2, [pc, #648]	; (80070ec <HAL_UART_IRQHandler+0x2bc>)
 8006e64:	4013      	ands	r3, r2
 8006e66:	2298      	movs	r2, #152	; 0x98
 8006e68:	18bd      	adds	r5, r7, r2
 8006e6a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006e6c:	18bb      	adds	r3, r7, r2
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d11a      	bne.n	8006eaa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e74:	187b      	adds	r3, r7, r1
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	d015      	beq.n	8006eaa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e7e:	183b      	adds	r3, r7, r0
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2220      	movs	r2, #32
 8006e84:	4013      	ands	r3, r2
 8006e86:	d105      	bne.n	8006e94 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e88:	193b      	adds	r3, r7, r4
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	055b      	lsls	r3, r3, #21
 8006e90:	4013      	ands	r3, r2
 8006e92:	d00a      	beq.n	8006eaa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d100      	bne.n	8006e9e <HAL_UART_IRQHandler+0x6e>
 8006e9c:	e2dc      	b.n	8007458 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	0010      	movs	r0, r2
 8006ea6:	4798      	blx	r3
      }
      return;
 8006ea8:	e2d6      	b.n	8007458 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006eaa:	2398      	movs	r3, #152	; 0x98
 8006eac:	18fb      	adds	r3, r7, r3
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d100      	bne.n	8006eb6 <HAL_UART_IRQHandler+0x86>
 8006eb4:	e122      	b.n	80070fc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006eb6:	239c      	movs	r3, #156	; 0x9c
 8006eb8:	18fb      	adds	r3, r7, r3
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a8c      	ldr	r2, [pc, #560]	; (80070f0 <HAL_UART_IRQHandler+0x2c0>)
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	d106      	bne.n	8006ed0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ec2:	23a0      	movs	r3, #160	; 0xa0
 8006ec4:	18fb      	adds	r3, r7, r3
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a8a      	ldr	r2, [pc, #552]	; (80070f4 <HAL_UART_IRQHandler+0x2c4>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	d100      	bne.n	8006ed0 <HAL_UART_IRQHandler+0xa0>
 8006ece:	e115      	b.n	80070fc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ed0:	23a4      	movs	r3, #164	; 0xa4
 8006ed2:	18fb      	adds	r3, r7, r3
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4013      	ands	r3, r2
 8006eda:	d012      	beq.n	8006f02 <HAL_UART_IRQHandler+0xd2>
 8006edc:	23a0      	movs	r3, #160	; 0xa0
 8006ede:	18fb      	adds	r3, r7, r3
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	2380      	movs	r3, #128	; 0x80
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	4013      	ands	r3, r2
 8006ee8:	d00b      	beq.n	8006f02 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2290      	movs	r2, #144	; 0x90
 8006ef6:	589b      	ldr	r3, [r3, r2]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	431a      	orrs	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2190      	movs	r1, #144	; 0x90
 8006f00:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f02:	23a4      	movs	r3, #164	; 0xa4
 8006f04:	18fb      	adds	r3, r7, r3
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	4013      	ands	r3, r2
 8006f0c:	d011      	beq.n	8006f32 <HAL_UART_IRQHandler+0x102>
 8006f0e:	239c      	movs	r3, #156	; 0x9c
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2201      	movs	r2, #1
 8006f16:	4013      	ands	r3, r2
 8006f18:	d00b      	beq.n	8006f32 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2202      	movs	r2, #2
 8006f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2290      	movs	r2, #144	; 0x90
 8006f26:	589b      	ldr	r3, [r3, r2]
 8006f28:	2204      	movs	r2, #4
 8006f2a:	431a      	orrs	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2190      	movs	r1, #144	; 0x90
 8006f30:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f32:	23a4      	movs	r3, #164	; 0xa4
 8006f34:	18fb      	adds	r3, r7, r3
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d011      	beq.n	8006f62 <HAL_UART_IRQHandler+0x132>
 8006f3e:	239c      	movs	r3, #156	; 0x9c
 8006f40:	18fb      	adds	r3, r7, r3
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2201      	movs	r2, #1
 8006f46:	4013      	ands	r3, r2
 8006f48:	d00b      	beq.n	8006f62 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2290      	movs	r2, #144	; 0x90
 8006f56:	589b      	ldr	r3, [r3, r2]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2190      	movs	r1, #144	; 0x90
 8006f60:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f62:	23a4      	movs	r3, #164	; 0xa4
 8006f64:	18fb      	adds	r3, r7, r3
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2208      	movs	r2, #8
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	d017      	beq.n	8006f9e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f6e:	23a0      	movs	r3, #160	; 0xa0
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2220      	movs	r2, #32
 8006f76:	4013      	ands	r3, r2
 8006f78:	d105      	bne.n	8006f86 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f7a:	239c      	movs	r3, #156	; 0x9c
 8006f7c:	18fb      	adds	r3, r7, r3
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a5b      	ldr	r2, [pc, #364]	; (80070f0 <HAL_UART_IRQHandler+0x2c0>)
 8006f82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f84:	d00b      	beq.n	8006f9e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2208      	movs	r2, #8
 8006f8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2290      	movs	r2, #144	; 0x90
 8006f92:	589b      	ldr	r3, [r3, r2]
 8006f94:	2208      	movs	r2, #8
 8006f96:	431a      	orrs	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2190      	movs	r1, #144	; 0x90
 8006f9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f9e:	23a4      	movs	r3, #164	; 0xa4
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	2380      	movs	r3, #128	; 0x80
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d013      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x1a4>
 8006fac:	23a0      	movs	r3, #160	; 0xa0
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	2380      	movs	r3, #128	; 0x80
 8006fb4:	04db      	lsls	r3, r3, #19
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	d00c      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2280      	movs	r2, #128	; 0x80
 8006fc0:	0112      	lsls	r2, r2, #4
 8006fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2290      	movs	r2, #144	; 0x90
 8006fc8:	589b      	ldr	r3, [r3, r2]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2190      	movs	r1, #144	; 0x90
 8006fd2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2290      	movs	r2, #144	; 0x90
 8006fd8:	589b      	ldr	r3, [r3, r2]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d100      	bne.n	8006fe0 <HAL_UART_IRQHandler+0x1b0>
 8006fde:	e23d      	b.n	800745c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fe0:	23a4      	movs	r3, #164	; 0xa4
 8006fe2:	18fb      	adds	r3, r7, r3
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d015      	beq.n	8007018 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fec:	23a0      	movs	r3, #160	; 0xa0
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	d106      	bne.n	8007006 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ff8:	239c      	movs	r3, #156	; 0x9c
 8006ffa:	18fb      	adds	r3, r7, r3
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	2380      	movs	r3, #128	; 0x80
 8007000:	055b      	lsls	r3, r3, #21
 8007002:	4013      	ands	r3, r2
 8007004:	d008      	beq.n	8007018 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800700a:	2b00      	cmp	r3, #0
 800700c:	d004      	beq.n	8007018 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	0010      	movs	r0, r2
 8007016:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2290      	movs	r2, #144	; 0x90
 800701c:	589b      	ldr	r3, [r3, r2]
 800701e:	2194      	movs	r1, #148	; 0x94
 8007020:	187a      	adds	r2, r7, r1
 8007022:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2240      	movs	r2, #64	; 0x40
 800702c:	4013      	ands	r3, r2
 800702e:	2b40      	cmp	r3, #64	; 0x40
 8007030:	d004      	beq.n	800703c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007032:	187b      	adds	r3, r7, r1
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2228      	movs	r2, #40	; 0x28
 8007038:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800703a:	d04c      	beq.n	80070d6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	0018      	movs	r0, r3
 8007040:	f000 feca 	bl	8007dd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2240      	movs	r2, #64	; 0x40
 800704c:	4013      	ands	r3, r2
 800704e:	2b40      	cmp	r3, #64	; 0x40
 8007050:	d13c      	bne.n	80070cc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007052:	f3ef 8310 	mrs	r3, PRIMASK
 8007056:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007058:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800705a:	2090      	movs	r0, #144	; 0x90
 800705c:	183a      	adds	r2, r7, r0
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	2301      	movs	r3, #1
 8007062:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007066:	f383 8810 	msr	PRIMASK, r3
}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689a      	ldr	r2, [r3, #8]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2140      	movs	r1, #64	; 0x40
 8007078:	438a      	bics	r2, r1
 800707a:	609a      	str	r2, [r3, #8]
 800707c:	183b      	adds	r3, r7, r0
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007084:	f383 8810 	msr	PRIMASK, r3
}
 8007088:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2280      	movs	r2, #128	; 0x80
 800708e:	589b      	ldr	r3, [r3, r2]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d016      	beq.n	80070c2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2280      	movs	r2, #128	; 0x80
 8007098:	589b      	ldr	r3, [r3, r2]
 800709a:	4a17      	ldr	r2, [pc, #92]	; (80070f8 <HAL_UART_IRQHandler+0x2c8>)
 800709c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2280      	movs	r2, #128	; 0x80
 80070a2:	589b      	ldr	r3, [r3, r2]
 80070a4:	0018      	movs	r0, r3
 80070a6:	f7fd f9cf 	bl	8004448 <HAL_DMA_Abort_IT>
 80070aa:	1e03      	subs	r3, r0, #0
 80070ac:	d01c      	beq.n	80070e8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2280      	movs	r2, #128	; 0x80
 80070b2:	589b      	ldr	r3, [r3, r2]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	2180      	movs	r1, #128	; 0x80
 80070ba:	5852      	ldr	r2, [r2, r1]
 80070bc:	0010      	movs	r0, r2
 80070be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c0:	e012      	b.n	80070e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	0018      	movs	r0, r3
 80070c6:	f000 f9e1 	bl	800748c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ca:	e00d      	b.n	80070e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	0018      	movs	r0, r3
 80070d0:	f000 f9dc 	bl	800748c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d4:	e008      	b.n	80070e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	0018      	movs	r0, r3
 80070da:	f000 f9d7 	bl	800748c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2290      	movs	r2, #144	; 0x90
 80070e2:	2100      	movs	r1, #0
 80070e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80070e6:	e1b9      	b.n	800745c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070e8:	46c0      	nop			; (mov r8, r8)
    return;
 80070ea:	e1b7      	b.n	800745c <HAL_UART_IRQHandler+0x62c>
 80070ec:	0000080f 	.word	0x0000080f
 80070f0:	10000001 	.word	0x10000001
 80070f4:	04000120 	.word	0x04000120
 80070f8:	08007ea5 	.word	0x08007ea5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007100:	2b01      	cmp	r3, #1
 8007102:	d000      	beq.n	8007106 <HAL_UART_IRQHandler+0x2d6>
 8007104:	e13e      	b.n	8007384 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007106:	23a4      	movs	r3, #164	; 0xa4
 8007108:	18fb      	adds	r3, r7, r3
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2210      	movs	r2, #16
 800710e:	4013      	ands	r3, r2
 8007110:	d100      	bne.n	8007114 <HAL_UART_IRQHandler+0x2e4>
 8007112:	e137      	b.n	8007384 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007114:	23a0      	movs	r3, #160	; 0xa0
 8007116:	18fb      	adds	r3, r7, r3
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2210      	movs	r2, #16
 800711c:	4013      	ands	r3, r2
 800711e:	d100      	bne.n	8007122 <HAL_UART_IRQHandler+0x2f2>
 8007120:	e130      	b.n	8007384 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2210      	movs	r2, #16
 8007128:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2240      	movs	r2, #64	; 0x40
 8007132:	4013      	ands	r3, r2
 8007134:	2b40      	cmp	r3, #64	; 0x40
 8007136:	d000      	beq.n	800713a <HAL_UART_IRQHandler+0x30a>
 8007138:	e0a4      	b.n	8007284 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2280      	movs	r2, #128	; 0x80
 800713e:	589b      	ldr	r3, [r3, r2]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	217e      	movs	r1, #126	; 0x7e
 8007146:	187b      	adds	r3, r7, r1
 8007148:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800714a:	187b      	adds	r3, r7, r1
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d100      	bne.n	8007154 <HAL_UART_IRQHandler+0x324>
 8007152:	e185      	b.n	8007460 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	225c      	movs	r2, #92	; 0x5c
 8007158:	5a9b      	ldrh	r3, [r3, r2]
 800715a:	187a      	adds	r2, r7, r1
 800715c:	8812      	ldrh	r2, [r2, #0]
 800715e:	429a      	cmp	r2, r3
 8007160:	d300      	bcc.n	8007164 <HAL_UART_IRQHandler+0x334>
 8007162:	e17d      	b.n	8007460 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	187a      	adds	r2, r7, r1
 8007168:	215e      	movs	r1, #94	; 0x5e
 800716a:	8812      	ldrh	r2, [r2, #0]
 800716c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2280      	movs	r2, #128	; 0x80
 8007172:	589b      	ldr	r3, [r3, r2]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2220      	movs	r2, #32
 800717a:	4013      	ands	r3, r2
 800717c:	d170      	bne.n	8007260 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800717e:	f3ef 8310 	mrs	r3, PRIMASK
 8007182:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007186:	67bb      	str	r3, [r7, #120]	; 0x78
 8007188:	2301      	movs	r3, #1
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718e:	f383 8810 	msr	PRIMASK, r3
}
 8007192:	46c0      	nop			; (mov r8, r8)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	49b4      	ldr	r1, [pc, #720]	; (8007470 <HAL_UART_IRQHandler+0x640>)
 80071a0:	400a      	ands	r2, r1
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071aa:	f383 8810 	msr	PRIMASK, r3
}
 80071ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071b0:	f3ef 8310 	mrs	r3, PRIMASK
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b8:	677b      	str	r3, [r7, #116]	; 0x74
 80071ba:	2301      	movs	r3, #1
 80071bc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c0:	f383 8810 	msr	PRIMASK, r3
}
 80071c4:	46c0      	nop			; (mov r8, r8)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2101      	movs	r1, #1
 80071d2:	438a      	bics	r2, r1
 80071d4:	609a      	str	r2, [r3, #8]
 80071d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071d8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071dc:	f383 8810 	msr	PRIMASK, r3
}
 80071e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071e2:	f3ef 8310 	mrs	r3, PRIMASK
 80071e6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80071e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071ea:	673b      	str	r3, [r7, #112]	; 0x70
 80071ec:	2301      	movs	r3, #1
 80071ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071f2:	f383 8810 	msr	PRIMASK, r3
}
 80071f6:	46c0      	nop			; (mov r8, r8)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2140      	movs	r1, #64	; 0x40
 8007204:	438a      	bics	r2, r1
 8007206:	609a      	str	r2, [r3, #8]
 8007208:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800720a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800720c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800720e:	f383 8810 	msr	PRIMASK, r3
}
 8007212:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	228c      	movs	r2, #140	; 0x8c
 8007218:	2120      	movs	r1, #32
 800721a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2200      	movs	r2, #0
 8007220:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007222:	f3ef 8310 	mrs	r3, PRIMASK
 8007226:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007228:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800722c:	2301      	movs	r3, #1
 800722e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007230:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007232:	f383 8810 	msr	PRIMASK, r3
}
 8007236:	46c0      	nop			; (mov r8, r8)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2110      	movs	r1, #16
 8007244:	438a      	bics	r2, r1
 8007246:	601a      	str	r2, [r3, #0]
 8007248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800724a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800724c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800724e:	f383 8810 	msr	PRIMASK, r3
}
 8007252:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2280      	movs	r2, #128	; 0x80
 8007258:	589b      	ldr	r3, [r3, r2]
 800725a:	0018      	movs	r0, r3
 800725c:	f7fd f892 	bl	8004384 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	225c      	movs	r2, #92	; 0x5c
 800726a:	5a9a      	ldrh	r2, [r3, r2]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	215e      	movs	r1, #94	; 0x5e
 8007270:	5a5b      	ldrh	r3, [r3, r1]
 8007272:	b29b      	uxth	r3, r3
 8007274:	1ad3      	subs	r3, r2, r3
 8007276:	b29a      	uxth	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	0011      	movs	r1, r2
 800727c:	0018      	movs	r0, r3
 800727e:	f000 f90d 	bl	800749c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007282:	e0ed      	b.n	8007460 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	225c      	movs	r2, #92	; 0x5c
 8007288:	5a99      	ldrh	r1, [r3, r2]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	225e      	movs	r2, #94	; 0x5e
 800728e:	5a9b      	ldrh	r3, [r3, r2]
 8007290:	b29a      	uxth	r2, r3
 8007292:	208e      	movs	r0, #142	; 0x8e
 8007294:	183b      	adds	r3, r7, r0
 8007296:	1a8a      	subs	r2, r1, r2
 8007298:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	225e      	movs	r2, #94	; 0x5e
 800729e:	5a9b      	ldrh	r3, [r3, r2]
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d100      	bne.n	80072a8 <HAL_UART_IRQHandler+0x478>
 80072a6:	e0dd      	b.n	8007464 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80072a8:	183b      	adds	r3, r7, r0
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d100      	bne.n	80072b2 <HAL_UART_IRQHandler+0x482>
 80072b0:	e0d8      	b.n	8007464 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072b2:	f3ef 8310 	mrs	r3, PRIMASK
 80072b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80072b8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072ba:	2488      	movs	r4, #136	; 0x88
 80072bc:	193a      	adds	r2, r7, r4
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	2301      	movs	r3, #1
 80072c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f383 8810 	msr	PRIMASK, r3
}
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4967      	ldr	r1, [pc, #412]	; (8007474 <HAL_UART_IRQHandler+0x644>)
 80072d8:	400a      	ands	r2, r1
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	193b      	adds	r3, r7, r4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f383 8810 	msr	PRIMASK, r3
}
 80072e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072ea:	f3ef 8310 	mrs	r3, PRIMASK
 80072ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80072f0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072f2:	2484      	movs	r4, #132	; 0x84
 80072f4:	193a      	adds	r2, r7, r4
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	2301      	movs	r3, #1
 80072fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f383 8810 	msr	PRIMASK, r3
}
 8007302:	46c0      	nop			; (mov r8, r8)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	495a      	ldr	r1, [pc, #360]	; (8007478 <HAL_UART_IRQHandler+0x648>)
 8007310:	400a      	ands	r2, r1
 8007312:	609a      	str	r2, [r3, #8]
 8007314:	193b      	adds	r3, r7, r4
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	f383 8810 	msr	PRIMASK, r3
}
 8007320:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	228c      	movs	r2, #140	; 0x8c
 8007326:	2120      	movs	r1, #32
 8007328:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007336:	f3ef 8310 	mrs	r3, PRIMASK
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800733e:	2480      	movs	r4, #128	; 0x80
 8007340:	193a      	adds	r2, r7, r4
 8007342:	6013      	str	r3, [r2, #0]
 8007344:	2301      	movs	r3, #1
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	f383 8810 	msr	PRIMASK, r3
}
 800734e:	46c0      	nop			; (mov r8, r8)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	2110      	movs	r1, #16
 800735c:	438a      	bics	r2, r1
 800735e:	601a      	str	r2, [r3, #0]
 8007360:	193b      	adds	r3, r7, r4
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007368:	f383 8810 	msr	PRIMASK, r3
}
 800736c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2202      	movs	r2, #2
 8007372:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007374:	183b      	adds	r3, r7, r0
 8007376:	881a      	ldrh	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	0011      	movs	r1, r2
 800737c:	0018      	movs	r0, r3
 800737e:	f000 f88d 	bl	800749c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007382:	e06f      	b.n	8007464 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007384:	23a4      	movs	r3, #164	; 0xa4
 8007386:	18fb      	adds	r3, r7, r3
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	2380      	movs	r3, #128	; 0x80
 800738c:	035b      	lsls	r3, r3, #13
 800738e:	4013      	ands	r3, r2
 8007390:	d010      	beq.n	80073b4 <HAL_UART_IRQHandler+0x584>
 8007392:	239c      	movs	r3, #156	; 0x9c
 8007394:	18fb      	adds	r3, r7, r3
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	03db      	lsls	r3, r3, #15
 800739c:	4013      	ands	r3, r2
 800739e:	d009      	beq.n	80073b4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2280      	movs	r2, #128	; 0x80
 80073a6:	0352      	lsls	r2, r2, #13
 80073a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	0018      	movs	r0, r3
 80073ae:	f001 fa1d 	bl	80087ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80073b2:	e05a      	b.n	800746a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80073b4:	23a4      	movs	r3, #164	; 0xa4
 80073b6:	18fb      	adds	r3, r7, r3
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	2280      	movs	r2, #128	; 0x80
 80073bc:	4013      	ands	r3, r2
 80073be:	d016      	beq.n	80073ee <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80073c0:	23a0      	movs	r3, #160	; 0xa0
 80073c2:	18fb      	adds	r3, r7, r3
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2280      	movs	r2, #128	; 0x80
 80073c8:	4013      	ands	r3, r2
 80073ca:	d106      	bne.n	80073da <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80073cc:	239c      	movs	r3, #156	; 0x9c
 80073ce:	18fb      	adds	r3, r7, r3
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	2380      	movs	r3, #128	; 0x80
 80073d4:	041b      	lsls	r3, r3, #16
 80073d6:	4013      	ands	r3, r2
 80073d8:	d009      	beq.n	80073ee <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d042      	beq.n	8007468 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	0010      	movs	r0, r2
 80073ea:	4798      	blx	r3
    }
    return;
 80073ec:	e03c      	b.n	8007468 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80073ee:	23a4      	movs	r3, #164	; 0xa4
 80073f0:	18fb      	adds	r3, r7, r3
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2240      	movs	r2, #64	; 0x40
 80073f6:	4013      	ands	r3, r2
 80073f8:	d00a      	beq.n	8007410 <HAL_UART_IRQHandler+0x5e0>
 80073fa:	23a0      	movs	r3, #160	; 0xa0
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2240      	movs	r2, #64	; 0x40
 8007402:	4013      	ands	r3, r2
 8007404:	d004      	beq.n	8007410 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	0018      	movs	r0, r3
 800740a:	f000 fd62 	bl	8007ed2 <UART_EndTransmit_IT>
    return;
 800740e:	e02c      	b.n	800746a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007410:	23a4      	movs	r3, #164	; 0xa4
 8007412:	18fb      	adds	r3, r7, r3
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	2380      	movs	r3, #128	; 0x80
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	4013      	ands	r3, r2
 800741c:	d00b      	beq.n	8007436 <HAL_UART_IRQHandler+0x606>
 800741e:	23a0      	movs	r3, #160	; 0xa0
 8007420:	18fb      	adds	r3, r7, r3
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	2380      	movs	r3, #128	; 0x80
 8007426:	05db      	lsls	r3, r3, #23
 8007428:	4013      	ands	r3, r2
 800742a:	d004      	beq.n	8007436 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	0018      	movs	r0, r3
 8007430:	f001 f9ec 	bl	800880c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007434:	e019      	b.n	800746a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007436:	23a4      	movs	r3, #164	; 0xa4
 8007438:	18fb      	adds	r3, r7, r3
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	2380      	movs	r3, #128	; 0x80
 800743e:	045b      	lsls	r3, r3, #17
 8007440:	4013      	ands	r3, r2
 8007442:	d012      	beq.n	800746a <HAL_UART_IRQHandler+0x63a>
 8007444:	23a0      	movs	r3, #160	; 0xa0
 8007446:	18fb      	adds	r3, r7, r3
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	da0d      	bge.n	800746a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	0018      	movs	r0, r3
 8007452:	f001 f9d3 	bl	80087fc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007456:	e008      	b.n	800746a <HAL_UART_IRQHandler+0x63a>
      return;
 8007458:	46c0      	nop			; (mov r8, r8)
 800745a:	e006      	b.n	800746a <HAL_UART_IRQHandler+0x63a>
    return;
 800745c:	46c0      	nop			; (mov r8, r8)
 800745e:	e004      	b.n	800746a <HAL_UART_IRQHandler+0x63a>
      return;
 8007460:	46c0      	nop			; (mov r8, r8)
 8007462:	e002      	b.n	800746a <HAL_UART_IRQHandler+0x63a>
      return;
 8007464:	46c0      	nop			; (mov r8, r8)
 8007466:	e000      	b.n	800746a <HAL_UART_IRQHandler+0x63a>
    return;
 8007468:	46c0      	nop			; (mov r8, r8)
  }
}
 800746a:	46bd      	mov	sp, r7
 800746c:	b02a      	add	sp, #168	; 0xa8
 800746e:	bdb0      	pop	{r4, r5, r7, pc}
 8007470:	fffffeff 	.word	0xfffffeff
 8007474:	fffffedf 	.word	0xfffffedf
 8007478:	effffffe 	.word	0xeffffffe

0800747c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007484:	46c0      	nop			; (mov r8, r8)
 8007486:	46bd      	mov	sp, r7
 8007488:	b002      	add	sp, #8
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007494:	46c0      	nop			; (mov r8, r8)
 8007496:	46bd      	mov	sp, r7
 8007498:	b002      	add	sp, #8
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	000a      	movs	r2, r1
 80074a6:	1cbb      	adds	r3, r7, #2
 80074a8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80074aa:	46c0      	nop			; (mov r8, r8)
 80074ac:	46bd      	mov	sp, r7
 80074ae:	b002      	add	sp, #8
 80074b0:	bd80      	pop	{r7, pc}
	...

080074b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b088      	sub	sp, #32
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074bc:	231a      	movs	r3, #26
 80074be:	18fb      	adds	r3, r7, r3
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689a      	ldr	r2, [r3, #8]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	4313      	orrs	r3, r2
 80074da:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4abc      	ldr	r2, [pc, #752]	; (80077d4 <UART_SetConfig+0x320>)
 80074e4:	4013      	ands	r3, r2
 80074e6:	0019      	movs	r1, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69fa      	ldr	r2, [r7, #28]
 80074ee:	430a      	orrs	r2, r1
 80074f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	4ab7      	ldr	r2, [pc, #732]	; (80077d8 <UART_SetConfig+0x324>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	0019      	movs	r1, r3
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	430a      	orrs	r2, r1
 8007508:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	699b      	ldr	r3, [r3, #24]
 800750e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	4313      	orrs	r3, r2
 8007518:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4aae      	ldr	r2, [pc, #696]	; (80077dc <UART_SetConfig+0x328>)
 8007522:	4013      	ands	r3, r2
 8007524:	0019      	movs	r1, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	69fa      	ldr	r2, [r7, #28]
 800752c:	430a      	orrs	r2, r1
 800752e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007536:	220f      	movs	r2, #15
 8007538:	4393      	bics	r3, r2
 800753a:	0019      	movs	r1, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4aa4      	ldr	r2, [pc, #656]	; (80077e0 <UART_SetConfig+0x32c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d127      	bne.n	80075a2 <UART_SetConfig+0xee>
 8007552:	4ba4      	ldr	r3, [pc, #656]	; (80077e4 <UART_SetConfig+0x330>)
 8007554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007556:	2203      	movs	r2, #3
 8007558:	4013      	ands	r3, r2
 800755a:	2b03      	cmp	r3, #3
 800755c:	d017      	beq.n	800758e <UART_SetConfig+0xda>
 800755e:	d81b      	bhi.n	8007598 <UART_SetConfig+0xe4>
 8007560:	2b02      	cmp	r3, #2
 8007562:	d00a      	beq.n	800757a <UART_SetConfig+0xc6>
 8007564:	d818      	bhi.n	8007598 <UART_SetConfig+0xe4>
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <UART_SetConfig+0xbc>
 800756a:	2b01      	cmp	r3, #1
 800756c:	d00a      	beq.n	8007584 <UART_SetConfig+0xd0>
 800756e:	e013      	b.n	8007598 <UART_SetConfig+0xe4>
 8007570:	231b      	movs	r3, #27
 8007572:	18fb      	adds	r3, r7, r3
 8007574:	2200      	movs	r2, #0
 8007576:	701a      	strb	r2, [r3, #0]
 8007578:	e058      	b.n	800762c <UART_SetConfig+0x178>
 800757a:	231b      	movs	r3, #27
 800757c:	18fb      	adds	r3, r7, r3
 800757e:	2202      	movs	r2, #2
 8007580:	701a      	strb	r2, [r3, #0]
 8007582:	e053      	b.n	800762c <UART_SetConfig+0x178>
 8007584:	231b      	movs	r3, #27
 8007586:	18fb      	adds	r3, r7, r3
 8007588:	2204      	movs	r2, #4
 800758a:	701a      	strb	r2, [r3, #0]
 800758c:	e04e      	b.n	800762c <UART_SetConfig+0x178>
 800758e:	231b      	movs	r3, #27
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	2208      	movs	r2, #8
 8007594:	701a      	strb	r2, [r3, #0]
 8007596:	e049      	b.n	800762c <UART_SetConfig+0x178>
 8007598:	231b      	movs	r3, #27
 800759a:	18fb      	adds	r3, r7, r3
 800759c:	2210      	movs	r2, #16
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	e044      	b.n	800762c <UART_SetConfig+0x178>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a90      	ldr	r2, [pc, #576]	; (80077e8 <UART_SetConfig+0x334>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d127      	bne.n	80075fc <UART_SetConfig+0x148>
 80075ac:	4b8d      	ldr	r3, [pc, #564]	; (80077e4 <UART_SetConfig+0x330>)
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	220c      	movs	r2, #12
 80075b2:	4013      	ands	r3, r2
 80075b4:	2b0c      	cmp	r3, #12
 80075b6:	d017      	beq.n	80075e8 <UART_SetConfig+0x134>
 80075b8:	d81b      	bhi.n	80075f2 <UART_SetConfig+0x13e>
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d00a      	beq.n	80075d4 <UART_SetConfig+0x120>
 80075be:	d818      	bhi.n	80075f2 <UART_SetConfig+0x13e>
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d002      	beq.n	80075ca <UART_SetConfig+0x116>
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d00a      	beq.n	80075de <UART_SetConfig+0x12a>
 80075c8:	e013      	b.n	80075f2 <UART_SetConfig+0x13e>
 80075ca:	231b      	movs	r3, #27
 80075cc:	18fb      	adds	r3, r7, r3
 80075ce:	2200      	movs	r2, #0
 80075d0:	701a      	strb	r2, [r3, #0]
 80075d2:	e02b      	b.n	800762c <UART_SetConfig+0x178>
 80075d4:	231b      	movs	r3, #27
 80075d6:	18fb      	adds	r3, r7, r3
 80075d8:	2202      	movs	r2, #2
 80075da:	701a      	strb	r2, [r3, #0]
 80075dc:	e026      	b.n	800762c <UART_SetConfig+0x178>
 80075de:	231b      	movs	r3, #27
 80075e0:	18fb      	adds	r3, r7, r3
 80075e2:	2204      	movs	r2, #4
 80075e4:	701a      	strb	r2, [r3, #0]
 80075e6:	e021      	b.n	800762c <UART_SetConfig+0x178>
 80075e8:	231b      	movs	r3, #27
 80075ea:	18fb      	adds	r3, r7, r3
 80075ec:	2208      	movs	r2, #8
 80075ee:	701a      	strb	r2, [r3, #0]
 80075f0:	e01c      	b.n	800762c <UART_SetConfig+0x178>
 80075f2:	231b      	movs	r3, #27
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	2210      	movs	r2, #16
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	e017      	b.n	800762c <UART_SetConfig+0x178>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a7a      	ldr	r2, [pc, #488]	; (80077ec <UART_SetConfig+0x338>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d104      	bne.n	8007610 <UART_SetConfig+0x15c>
 8007606:	231b      	movs	r3, #27
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	2200      	movs	r2, #0
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	e00d      	b.n	800762c <UART_SetConfig+0x178>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a76      	ldr	r2, [pc, #472]	; (80077f0 <UART_SetConfig+0x33c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d104      	bne.n	8007624 <UART_SetConfig+0x170>
 800761a:	231b      	movs	r3, #27
 800761c:	18fb      	adds	r3, r7, r3
 800761e:	2200      	movs	r2, #0
 8007620:	701a      	strb	r2, [r3, #0]
 8007622:	e003      	b.n	800762c <UART_SetConfig+0x178>
 8007624:	231b      	movs	r3, #27
 8007626:	18fb      	adds	r3, r7, r3
 8007628:	2210      	movs	r2, #16
 800762a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	2380      	movs	r3, #128	; 0x80
 8007632:	021b      	lsls	r3, r3, #8
 8007634:	429a      	cmp	r2, r3
 8007636:	d000      	beq.n	800763a <UART_SetConfig+0x186>
 8007638:	e065      	b.n	8007706 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800763a:	231b      	movs	r3, #27
 800763c:	18fb      	adds	r3, r7, r3
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b08      	cmp	r3, #8
 8007642:	d015      	beq.n	8007670 <UART_SetConfig+0x1bc>
 8007644:	dc18      	bgt.n	8007678 <UART_SetConfig+0x1c4>
 8007646:	2b04      	cmp	r3, #4
 8007648:	d00d      	beq.n	8007666 <UART_SetConfig+0x1b2>
 800764a:	dc15      	bgt.n	8007678 <UART_SetConfig+0x1c4>
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <UART_SetConfig+0x1a2>
 8007650:	2b02      	cmp	r3, #2
 8007652:	d005      	beq.n	8007660 <UART_SetConfig+0x1ac>
 8007654:	e010      	b.n	8007678 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007656:	f7fd fdd1 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 800765a:	0003      	movs	r3, r0
 800765c:	617b      	str	r3, [r7, #20]
        break;
 800765e:	e012      	b.n	8007686 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007660:	4b64      	ldr	r3, [pc, #400]	; (80077f4 <UART_SetConfig+0x340>)
 8007662:	617b      	str	r3, [r7, #20]
        break;
 8007664:	e00f      	b.n	8007686 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007666:	f7fd fd3f 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 800766a:	0003      	movs	r3, r0
 800766c:	617b      	str	r3, [r7, #20]
        break;
 800766e:	e00a      	b.n	8007686 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007670:	2380      	movs	r3, #128	; 0x80
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	617b      	str	r3, [r7, #20]
        break;
 8007676:	e006      	b.n	8007686 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007678:	2300      	movs	r3, #0
 800767a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800767c:	231a      	movs	r3, #26
 800767e:	18fb      	adds	r3, r7, r3
 8007680:	2201      	movs	r2, #1
 8007682:	701a      	strb	r2, [r3, #0]
        break;
 8007684:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d100      	bne.n	800768e <UART_SetConfig+0x1da>
 800768c:	e08d      	b.n	80077aa <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007692:	4b59      	ldr	r3, [pc, #356]	; (80077f8 <UART_SetConfig+0x344>)
 8007694:	0052      	lsls	r2, r2, #1
 8007696:	5ad3      	ldrh	r3, [r2, r3]
 8007698:	0019      	movs	r1, r3
 800769a:	6978      	ldr	r0, [r7, #20]
 800769c:	f7f8 fd4c 	bl	8000138 <__udivsi3>
 80076a0:	0003      	movs	r3, r0
 80076a2:	005a      	lsls	r2, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	085b      	lsrs	r3, r3, #1
 80076aa:	18d2      	adds	r2, r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	0019      	movs	r1, r3
 80076b2:	0010      	movs	r0, r2
 80076b4:	f7f8 fd40 	bl	8000138 <__udivsi3>
 80076b8:	0003      	movs	r3, r0
 80076ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	2b0f      	cmp	r3, #15
 80076c0:	d91c      	bls.n	80076fc <UART_SetConfig+0x248>
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	2380      	movs	r3, #128	; 0x80
 80076c6:	025b      	lsls	r3, r3, #9
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d217      	bcs.n	80076fc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	200e      	movs	r0, #14
 80076d2:	183b      	adds	r3, r7, r0
 80076d4:	210f      	movs	r1, #15
 80076d6:	438a      	bics	r2, r1
 80076d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	085b      	lsrs	r3, r3, #1
 80076de:	b29b      	uxth	r3, r3
 80076e0:	2207      	movs	r2, #7
 80076e2:	4013      	ands	r3, r2
 80076e4:	b299      	uxth	r1, r3
 80076e6:	183b      	adds	r3, r7, r0
 80076e8:	183a      	adds	r2, r7, r0
 80076ea:	8812      	ldrh	r2, [r2, #0]
 80076ec:	430a      	orrs	r2, r1
 80076ee:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	183a      	adds	r2, r7, r0
 80076f6:	8812      	ldrh	r2, [r2, #0]
 80076f8:	60da      	str	r2, [r3, #12]
 80076fa:	e056      	b.n	80077aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80076fc:	231a      	movs	r3, #26
 80076fe:	18fb      	adds	r3, r7, r3
 8007700:	2201      	movs	r2, #1
 8007702:	701a      	strb	r2, [r3, #0]
 8007704:	e051      	b.n	80077aa <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007706:	231b      	movs	r3, #27
 8007708:	18fb      	adds	r3, r7, r3
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	2b08      	cmp	r3, #8
 800770e:	d015      	beq.n	800773c <UART_SetConfig+0x288>
 8007710:	dc18      	bgt.n	8007744 <UART_SetConfig+0x290>
 8007712:	2b04      	cmp	r3, #4
 8007714:	d00d      	beq.n	8007732 <UART_SetConfig+0x27e>
 8007716:	dc15      	bgt.n	8007744 <UART_SetConfig+0x290>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d002      	beq.n	8007722 <UART_SetConfig+0x26e>
 800771c:	2b02      	cmp	r3, #2
 800771e:	d005      	beq.n	800772c <UART_SetConfig+0x278>
 8007720:	e010      	b.n	8007744 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007722:	f7fd fd6b 	bl	80051fc <HAL_RCC_GetPCLK1Freq>
 8007726:	0003      	movs	r3, r0
 8007728:	617b      	str	r3, [r7, #20]
        break;
 800772a:	e012      	b.n	8007752 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800772c:	4b31      	ldr	r3, [pc, #196]	; (80077f4 <UART_SetConfig+0x340>)
 800772e:	617b      	str	r3, [r7, #20]
        break;
 8007730:	e00f      	b.n	8007752 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007732:	f7fd fcd9 	bl	80050e8 <HAL_RCC_GetSysClockFreq>
 8007736:	0003      	movs	r3, r0
 8007738:	617b      	str	r3, [r7, #20]
        break;
 800773a:	e00a      	b.n	8007752 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800773c:	2380      	movs	r3, #128	; 0x80
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	617b      	str	r3, [r7, #20]
        break;
 8007742:	e006      	b.n	8007752 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007748:	231a      	movs	r3, #26
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	2201      	movs	r2, #1
 800774e:	701a      	strb	r2, [r3, #0]
        break;
 8007750:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d028      	beq.n	80077aa <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800775c:	4b26      	ldr	r3, [pc, #152]	; (80077f8 <UART_SetConfig+0x344>)
 800775e:	0052      	lsls	r2, r2, #1
 8007760:	5ad3      	ldrh	r3, [r2, r3]
 8007762:	0019      	movs	r1, r3
 8007764:	6978      	ldr	r0, [r7, #20]
 8007766:	f7f8 fce7 	bl	8000138 <__udivsi3>
 800776a:	0003      	movs	r3, r0
 800776c:	001a      	movs	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	18d2      	adds	r2, r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	0019      	movs	r1, r3
 800777c:	0010      	movs	r0, r2
 800777e:	f7f8 fcdb 	bl	8000138 <__udivsi3>
 8007782:	0003      	movs	r3, r0
 8007784:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	2b0f      	cmp	r3, #15
 800778a:	d90a      	bls.n	80077a2 <UART_SetConfig+0x2ee>
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	2380      	movs	r3, #128	; 0x80
 8007790:	025b      	lsls	r3, r3, #9
 8007792:	429a      	cmp	r2, r3
 8007794:	d205      	bcs.n	80077a2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	b29a      	uxth	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	60da      	str	r2, [r3, #12]
 80077a0:	e003      	b.n	80077aa <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80077a2:	231a      	movs	r3, #26
 80077a4:	18fb      	adds	r3, r7, r3
 80077a6:	2201      	movs	r2, #1
 80077a8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	226a      	movs	r2, #106	; 0x6a
 80077ae:	2101      	movs	r1, #1
 80077b0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2268      	movs	r2, #104	; 0x68
 80077b6:	2101      	movs	r1, #1
 80077b8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80077c6:	231a      	movs	r3, #26
 80077c8:	18fb      	adds	r3, r7, r3
 80077ca:	781b      	ldrb	r3, [r3, #0]
}
 80077cc:	0018      	movs	r0, r3
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b008      	add	sp, #32
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	cfff69f3 	.word	0xcfff69f3
 80077d8:	ffffcfff 	.word	0xffffcfff
 80077dc:	11fff4ff 	.word	0x11fff4ff
 80077e0:	40013800 	.word	0x40013800
 80077e4:	40021000 	.word	0x40021000
 80077e8:	40004400 	.word	0x40004400
 80077ec:	40004800 	.word	0x40004800
 80077f0:	40004c00 	.word	0x40004c00
 80077f4:	00f42400 	.word	0x00f42400
 80077f8:	0800c220 	.word	0x0800c220

080077fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b082      	sub	sp, #8
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	2201      	movs	r2, #1
 800780a:	4013      	ands	r3, r2
 800780c:	d00b      	beq.n	8007826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	4a4a      	ldr	r2, [pc, #296]	; (8007940 <UART_AdvFeatureConfig+0x144>)
 8007816:	4013      	ands	r3, r2
 8007818:	0019      	movs	r1, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782a:	2202      	movs	r2, #2
 800782c:	4013      	ands	r3, r2
 800782e:	d00b      	beq.n	8007848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	4a43      	ldr	r2, [pc, #268]	; (8007944 <UART_AdvFeatureConfig+0x148>)
 8007838:	4013      	ands	r3, r2
 800783a:	0019      	movs	r1, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784c:	2204      	movs	r2, #4
 800784e:	4013      	ands	r3, r2
 8007850:	d00b      	beq.n	800786a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	4a3b      	ldr	r2, [pc, #236]	; (8007948 <UART_AdvFeatureConfig+0x14c>)
 800785a:	4013      	ands	r3, r2
 800785c:	0019      	movs	r1, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	430a      	orrs	r2, r1
 8007868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786e:	2208      	movs	r2, #8
 8007870:	4013      	ands	r3, r2
 8007872:	d00b      	beq.n	800788c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	4a34      	ldr	r2, [pc, #208]	; (800794c <UART_AdvFeatureConfig+0x150>)
 800787c:	4013      	ands	r3, r2
 800787e:	0019      	movs	r1, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	430a      	orrs	r2, r1
 800788a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007890:	2210      	movs	r2, #16
 8007892:	4013      	ands	r3, r2
 8007894:	d00b      	beq.n	80078ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	689b      	ldr	r3, [r3, #8]
 800789c:	4a2c      	ldr	r2, [pc, #176]	; (8007950 <UART_AdvFeatureConfig+0x154>)
 800789e:	4013      	ands	r3, r2
 80078a0:	0019      	movs	r1, r3
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	430a      	orrs	r2, r1
 80078ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b2:	2220      	movs	r2, #32
 80078b4:	4013      	ands	r3, r2
 80078b6:	d00b      	beq.n	80078d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	4a25      	ldr	r2, [pc, #148]	; (8007954 <UART_AdvFeatureConfig+0x158>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	0019      	movs	r1, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	430a      	orrs	r2, r1
 80078ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d4:	2240      	movs	r2, #64	; 0x40
 80078d6:	4013      	ands	r3, r2
 80078d8:	d01d      	beq.n	8007916 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4a1d      	ldr	r2, [pc, #116]	; (8007958 <UART_AdvFeatureConfig+0x15c>)
 80078e2:	4013      	ands	r3, r2
 80078e4:	0019      	movs	r1, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078f6:	2380      	movs	r3, #128	; 0x80
 80078f8:	035b      	lsls	r3, r3, #13
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d10b      	bne.n	8007916 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	4a15      	ldr	r2, [pc, #84]	; (800795c <UART_AdvFeatureConfig+0x160>)
 8007906:	4013      	ands	r3, r2
 8007908:	0019      	movs	r1, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	2280      	movs	r2, #128	; 0x80
 800791c:	4013      	ands	r3, r2
 800791e:	d00b      	beq.n	8007938 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	4a0e      	ldr	r2, [pc, #56]	; (8007960 <UART_AdvFeatureConfig+0x164>)
 8007928:	4013      	ands	r3, r2
 800792a:	0019      	movs	r1, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	605a      	str	r2, [r3, #4]
  }
}
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	46bd      	mov	sp, r7
 800793c:	b002      	add	sp, #8
 800793e:	bd80      	pop	{r7, pc}
 8007940:	fffdffff 	.word	0xfffdffff
 8007944:	fffeffff 	.word	0xfffeffff
 8007948:	fffbffff 	.word	0xfffbffff
 800794c:	ffff7fff 	.word	0xffff7fff
 8007950:	ffffefff 	.word	0xffffefff
 8007954:	ffffdfff 	.word	0xffffdfff
 8007958:	ffefffff 	.word	0xffefffff
 800795c:	ff9fffff 	.word	0xff9fffff
 8007960:	fff7ffff 	.word	0xfff7ffff

08007964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b086      	sub	sp, #24
 8007968:	af02      	add	r7, sp, #8
 800796a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2290      	movs	r2, #144	; 0x90
 8007970:	2100      	movs	r1, #0
 8007972:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007974:	f7fc fc1e 	bl	80041b4 <HAL_GetTick>
 8007978:	0003      	movs	r3, r0
 800797a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2208      	movs	r2, #8
 8007984:	4013      	ands	r3, r2
 8007986:	2b08      	cmp	r3, #8
 8007988:	d10c      	bne.n	80079a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2280      	movs	r2, #128	; 0x80
 800798e:	0391      	lsls	r1, r2, #14
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	4a1a      	ldr	r2, [pc, #104]	; (80079fc <UART_CheckIdleState+0x98>)
 8007994:	9200      	str	r2, [sp, #0]
 8007996:	2200      	movs	r2, #0
 8007998:	f000 f832 	bl	8007a00 <UART_WaitOnFlagUntilTimeout>
 800799c:	1e03      	subs	r3, r0, #0
 800799e:	d001      	beq.n	80079a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e026      	b.n	80079f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2204      	movs	r2, #4
 80079ac:	4013      	ands	r3, r2
 80079ae:	2b04      	cmp	r3, #4
 80079b0:	d10c      	bne.n	80079cc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2280      	movs	r2, #128	; 0x80
 80079b6:	03d1      	lsls	r1, r2, #15
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	4a10      	ldr	r2, [pc, #64]	; (80079fc <UART_CheckIdleState+0x98>)
 80079bc:	9200      	str	r2, [sp, #0]
 80079be:	2200      	movs	r2, #0
 80079c0:	f000 f81e 	bl	8007a00 <UART_WaitOnFlagUntilTimeout>
 80079c4:	1e03      	subs	r3, r0, #0
 80079c6:	d001      	beq.n	80079cc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e012      	b.n	80079f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2288      	movs	r2, #136	; 0x88
 80079d0:	2120      	movs	r1, #32
 80079d2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	228c      	movs	r2, #140	; 0x8c
 80079d8:	2120      	movs	r1, #32
 80079da:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2284      	movs	r2, #132	; 0x84
 80079ec:	2100      	movs	r1, #0
 80079ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079f0:	2300      	movs	r3, #0
}
 80079f2:	0018      	movs	r0, r3
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b004      	add	sp, #16
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	46c0      	nop			; (mov r8, r8)
 80079fc:	01ffffff 	.word	0x01ffffff

08007a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b094      	sub	sp, #80	; 0x50
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	1dfb      	adds	r3, r7, #7
 8007a0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a10:	e0a7      	b.n	8007b62 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a14:	3301      	adds	r3, #1
 8007a16:	d100      	bne.n	8007a1a <UART_WaitOnFlagUntilTimeout+0x1a>
 8007a18:	e0a3      	b.n	8007b62 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a1a:	f7fc fbcb 	bl	80041b4 <HAL_GetTick>
 8007a1e:	0002      	movs	r2, r0
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	1ad3      	subs	r3, r2, r3
 8007a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d302      	bcc.n	8007a30 <UART_WaitOnFlagUntilTimeout+0x30>
 8007a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d13f      	bne.n	8007ab0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a30:	f3ef 8310 	mrs	r3, PRIMASK
 8007a34:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007a38:	647b      	str	r3, [r7, #68]	; 0x44
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a40:	f383 8810 	msr	PRIMASK, r3
}
 8007a44:	46c0      	nop			; (mov r8, r8)
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	494e      	ldr	r1, [pc, #312]	; (8007b8c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007a52:	400a      	ands	r2, r1
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a58:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	f383 8810 	msr	PRIMASK, r3
}
 8007a60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a62:	f3ef 8310 	mrs	r3, PRIMASK
 8007a66:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a72:	f383 8810 	msr	PRIMASK, r3
}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689a      	ldr	r2, [r3, #8]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2101      	movs	r1, #1
 8007a84:	438a      	bics	r2, r1
 8007a86:	609a      	str	r2, [r3, #8]
 8007a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a8e:	f383 8810 	msr	PRIMASK, r3
}
 8007a92:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2288      	movs	r2, #136	; 0x88
 8007a98:	2120      	movs	r1, #32
 8007a9a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	228c      	movs	r2, #140	; 0x8c
 8007aa0:	2120      	movs	r1, #32
 8007aa2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2284      	movs	r2, #132	; 0x84
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e069      	b.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2204      	movs	r2, #4
 8007ab8:	4013      	ands	r3, r2
 8007aba:	d052      	beq.n	8007b62 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	69da      	ldr	r2, [r3, #28]
 8007ac2:	2380      	movs	r3, #128	; 0x80
 8007ac4:	011b      	lsls	r3, r3, #4
 8007ac6:	401a      	ands	r2, r3
 8007ac8:	2380      	movs	r3, #128	; 0x80
 8007aca:	011b      	lsls	r3, r3, #4
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d148      	bne.n	8007b62 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2280      	movs	r2, #128	; 0x80
 8007ad6:	0112      	lsls	r2, r2, #4
 8007ad8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ada:	f3ef 8310 	mrs	r3, PRIMASK
 8007ade:	613b      	str	r3, [r7, #16]
  return(result);
 8007ae0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f383 8810 	msr	PRIMASK, r3
}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4924      	ldr	r1, [pc, #144]	; (8007b8c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007afc:	400a      	ands	r2, r1
 8007afe:	601a      	str	r2, [r3, #0]
 8007b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	f383 8810 	msr	PRIMASK, r3
}
 8007b0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8007b10:	61fb      	str	r3, [r7, #28]
  return(result);
 8007b12:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b16:	2301      	movs	r3, #1
 8007b18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	f383 8810 	msr	PRIMASK, r3
}
 8007b20:	46c0      	nop			; (mov r8, r8)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	438a      	bics	r2, r1
 8007b30:	609a      	str	r2, [r3, #8]
 8007b32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b38:	f383 8810 	msr	PRIMASK, r3
}
 8007b3c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2288      	movs	r2, #136	; 0x88
 8007b42:	2120      	movs	r1, #32
 8007b44:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	228c      	movs	r2, #140	; 0x8c
 8007b4a:	2120      	movs	r1, #32
 8007b4c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2290      	movs	r2, #144	; 0x90
 8007b52:	2120      	movs	r1, #32
 8007b54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2284      	movs	r2, #132	; 0x84
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	e010      	b.n	8007b84 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	1ad3      	subs	r3, r2, r3
 8007b70:	425a      	negs	r2, r3
 8007b72:	4153      	adcs	r3, r2
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	001a      	movs	r2, r3
 8007b78:	1dfb      	adds	r3, r7, #7
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d100      	bne.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x182>
 8007b80:	e747      	b.n	8007a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b82:	2300      	movs	r3, #0
}
 8007b84:	0018      	movs	r0, r3
 8007b86:	46bd      	mov	sp, r7
 8007b88:	b014      	add	sp, #80	; 0x50
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	fffffe5f 	.word	0xfffffe5f

08007b90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b098      	sub	sp, #96	; 0x60
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	1dbb      	adds	r3, r7, #6
 8007b9c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	1dba      	adds	r2, r7, #6
 8007ba8:	215c      	movs	r1, #92	; 0x5c
 8007baa:	8812      	ldrh	r2, [r2, #0]
 8007bac:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1dba      	adds	r2, r7, #6
 8007bb2:	215e      	movs	r1, #94	; 0x5e
 8007bb4:	8812      	ldrh	r2, [r2, #0]
 8007bb6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	2380      	movs	r3, #128	; 0x80
 8007bc4:	015b      	lsls	r3, r3, #5
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d10d      	bne.n	8007be6 <UART_Start_Receive_IT+0x56>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d104      	bne.n	8007bdc <UART_Start_Receive_IT+0x4c>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2260      	movs	r2, #96	; 0x60
 8007bd6:	497b      	ldr	r1, [pc, #492]	; (8007dc4 <UART_Start_Receive_IT+0x234>)
 8007bd8:	5299      	strh	r1, [r3, r2]
 8007bda:	e02e      	b.n	8007c3a <UART_Start_Receive_IT+0xaa>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2260      	movs	r2, #96	; 0x60
 8007be0:	21ff      	movs	r1, #255	; 0xff
 8007be2:	5299      	strh	r1, [r3, r2]
 8007be4:	e029      	b.n	8007c3a <UART_Start_Receive_IT+0xaa>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10d      	bne.n	8007c0a <UART_Start_Receive_IT+0x7a>
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d104      	bne.n	8007c00 <UART_Start_Receive_IT+0x70>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2260      	movs	r2, #96	; 0x60
 8007bfa:	21ff      	movs	r1, #255	; 0xff
 8007bfc:	5299      	strh	r1, [r3, r2]
 8007bfe:	e01c      	b.n	8007c3a <UART_Start_Receive_IT+0xaa>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2260      	movs	r2, #96	; 0x60
 8007c04:	217f      	movs	r1, #127	; 0x7f
 8007c06:	5299      	strh	r1, [r3, r2]
 8007c08:	e017      	b.n	8007c3a <UART_Start_Receive_IT+0xaa>
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	689a      	ldr	r2, [r3, #8]
 8007c0e:	2380      	movs	r3, #128	; 0x80
 8007c10:	055b      	lsls	r3, r3, #21
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d10d      	bne.n	8007c32 <UART_Start_Receive_IT+0xa2>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d104      	bne.n	8007c28 <UART_Start_Receive_IT+0x98>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2260      	movs	r2, #96	; 0x60
 8007c22:	217f      	movs	r1, #127	; 0x7f
 8007c24:	5299      	strh	r1, [r3, r2]
 8007c26:	e008      	b.n	8007c3a <UART_Start_Receive_IT+0xaa>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2260      	movs	r2, #96	; 0x60
 8007c2c:	213f      	movs	r1, #63	; 0x3f
 8007c2e:	5299      	strh	r1, [r3, r2]
 8007c30:	e003      	b.n	8007c3a <UART_Start_Receive_IT+0xaa>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2260      	movs	r2, #96	; 0x60
 8007c36:	2100      	movs	r1, #0
 8007c38:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2290      	movs	r2, #144	; 0x90
 8007c3e:	2100      	movs	r1, #0
 8007c40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	228c      	movs	r2, #140	; 0x8c
 8007c46:	2122      	movs	r1, #34	; 0x22
 8007c48:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007c4e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007c50:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c54:	2301      	movs	r3, #1
 8007c56:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c5a:	f383 8810 	msr	PRIMASK, r3
}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	689a      	ldr	r2, [r3, #8]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2101      	movs	r1, #1
 8007c6c:	430a      	orrs	r2, r1
 8007c6e:	609a      	str	r2, [r3, #8]
 8007c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c72:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c76:	f383 8810 	msr	PRIMASK, r3
}
 8007c7a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c80:	2380      	movs	r3, #128	; 0x80
 8007c82:	059b      	lsls	r3, r3, #22
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d150      	bne.n	8007d2a <UART_Start_Receive_IT+0x19a>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2268      	movs	r2, #104	; 0x68
 8007c8c:	5a9b      	ldrh	r3, [r3, r2]
 8007c8e:	1dba      	adds	r2, r7, #6
 8007c90:	8812      	ldrh	r2, [r2, #0]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d349      	bcc.n	8007d2a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689a      	ldr	r2, [r3, #8]
 8007c9a:	2380      	movs	r3, #128	; 0x80
 8007c9c:	015b      	lsls	r3, r3, #5
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d107      	bne.n	8007cb2 <UART_Start_Receive_IT+0x122>
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d103      	bne.n	8007cb2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	4a46      	ldr	r2, [pc, #280]	; (8007dc8 <UART_Start_Receive_IT+0x238>)
 8007cae:	675a      	str	r2, [r3, #116]	; 0x74
 8007cb0:	e002      	b.n	8007cb8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4a45      	ldr	r2, [pc, #276]	; (8007dcc <UART_Start_Receive_IT+0x23c>)
 8007cb6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	691b      	ldr	r3, [r3, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d019      	beq.n	8007cf4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cc4:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cca:	2301      	movs	r3, #1
 8007ccc:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd0:	f383 8810 	msr	PRIMASK, r3
}
 8007cd4:	46c0      	nop			; (mov r8, r8)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2180      	movs	r1, #128	; 0x80
 8007ce2:	0049      	lsls	r1, r1, #1
 8007ce4:	430a      	orrs	r2, r1
 8007ce6:	601a      	str	r2, [r3, #0]
 8007ce8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cee:	f383 8810 	msr	PRIMASK, r3
}
 8007cf2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007cfc:	657b      	str	r3, [r7, #84]	; 0x54
 8007cfe:	2301      	movs	r3, #1
 8007d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	f383 8810 	msr	PRIMASK, r3
}
 8007d08:	46c0      	nop			; (mov r8, r8)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2180      	movs	r1, #128	; 0x80
 8007d16:	0549      	lsls	r1, r1, #21
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
 8007d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d1e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	f383 8810 	msr	PRIMASK, r3
}
 8007d26:	46c0      	nop			; (mov r8, r8)
 8007d28:	e047      	b.n	8007dba <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	689a      	ldr	r2, [r3, #8]
 8007d2e:	2380      	movs	r3, #128	; 0x80
 8007d30:	015b      	lsls	r3, r3, #5
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d107      	bne.n	8007d46 <UART_Start_Receive_IT+0x1b6>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d103      	bne.n	8007d46 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	4a23      	ldr	r2, [pc, #140]	; (8007dd0 <UART_Start_Receive_IT+0x240>)
 8007d42:	675a      	str	r2, [r3, #116]	; 0x74
 8007d44:	e002      	b.n	8007d4c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4a22      	ldr	r2, [pc, #136]	; (8007dd4 <UART_Start_Receive_IT+0x244>)
 8007d4a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d019      	beq.n	8007d88 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d54:	f3ef 8310 	mrs	r3, PRIMASK
 8007d58:	61fb      	str	r3, [r7, #28]
  return(result);
 8007d5a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d5e:	2301      	movs	r3, #1
 8007d60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	f383 8810 	msr	PRIMASK, r3
}
 8007d68:	46c0      	nop			; (mov r8, r8)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2190      	movs	r1, #144	; 0x90
 8007d76:	0049      	lsls	r1, r1, #1
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	f383 8810 	msr	PRIMASK, r3
}
 8007d86:	e018      	b.n	8007dba <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d88:	f3ef 8310 	mrs	r3, PRIMASK
 8007d8c:	613b      	str	r3, [r7, #16]
  return(result);
 8007d8e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d90:	653b      	str	r3, [r7, #80]	; 0x50
 8007d92:	2301      	movs	r3, #1
 8007d94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	f383 8810 	msr	PRIMASK, r3
}
 8007d9c:	46c0      	nop			; (mov r8, r8)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2120      	movs	r1, #32
 8007daa:	430a      	orrs	r2, r1
 8007dac:	601a      	str	r2, [r3, #0]
 8007dae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007db0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	f383 8810 	msr	PRIMASK, r3
}
 8007db8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	b018      	add	sp, #96	; 0x60
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	000001ff 	.word	0x000001ff
 8007dc8:	08008501 	.word	0x08008501
 8007dcc:	08008215 	.word	0x08008215
 8007dd0:	080080a1 	.word	0x080080a1
 8007dd4:	08007f2d 	.word	0x08007f2d

08007dd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08e      	sub	sp, #56	; 0x38
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de0:	f3ef 8310 	mrs	r3, PRIMASK
 8007de4:	617b      	str	r3, [r7, #20]
  return(result);
 8007de6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007de8:	637b      	str	r3, [r7, #52]	; 0x34
 8007dea:	2301      	movs	r3, #1
 8007dec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	f383 8810 	msr	PRIMASK, r3
}
 8007df4:	46c0      	nop			; (mov r8, r8)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4926      	ldr	r1, [pc, #152]	; (8007e9c <UART_EndRxTransfer+0xc4>)
 8007e02:	400a      	ands	r2, r1
 8007e04:	601a      	str	r2, [r3, #0]
 8007e06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	f383 8810 	msr	PRIMASK, r3
}
 8007e10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e12:	f3ef 8310 	mrs	r3, PRIMASK
 8007e16:	623b      	str	r3, [r7, #32]
  return(result);
 8007e18:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e1a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	f383 8810 	msr	PRIMASK, r3
}
 8007e26:	46c0      	nop			; (mov r8, r8)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	689a      	ldr	r2, [r3, #8]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	491b      	ldr	r1, [pc, #108]	; (8007ea0 <UART_EndRxTransfer+0xc8>)
 8007e34:	400a      	ands	r2, r1
 8007e36:	609a      	str	r2, [r3, #8]
 8007e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	f383 8810 	msr	PRIMASK, r3
}
 8007e42:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d118      	bne.n	8007e7e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e50:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e52:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e56:	2301      	movs	r3, #1
 8007e58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f383 8810 	msr	PRIMASK, r3
}
 8007e60:	46c0      	nop			; (mov r8, r8)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2110      	movs	r1, #16
 8007e6e:	438a      	bics	r2, r1
 8007e70:	601a      	str	r2, [r3, #0]
 8007e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e74:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f383 8810 	msr	PRIMASK, r3
}
 8007e7c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	228c      	movs	r2, #140	; 0x8c
 8007e82:	2120      	movs	r1, #32
 8007e84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007e92:	46c0      	nop			; (mov r8, r8)
 8007e94:	46bd      	mov	sp, r7
 8007e96:	b00e      	add	sp, #56	; 0x38
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	46c0      	nop			; (mov r8, r8)
 8007e9c:	fffffedf 	.word	0xfffffedf
 8007ea0:	effffffe 	.word	0xeffffffe

08007ea4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	225e      	movs	r2, #94	; 0x5e
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2256      	movs	r2, #86	; 0x56
 8007ebe:	2100      	movs	r1, #0
 8007ec0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	f7ff fae1 	bl	800748c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eca:	46c0      	nop			; (mov r8, r8)
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	b004      	add	sp, #16
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b086      	sub	sp, #24
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eda:	f3ef 8310 	mrs	r3, PRIMASK
 8007ede:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ee2:	617b      	str	r3, [r7, #20]
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f383 8810 	msr	PRIMASK, r3
}
 8007eee:	46c0      	nop			; (mov r8, r8)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2140      	movs	r1, #64	; 0x40
 8007efc:	438a      	bics	r2, r1
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f383 8810 	msr	PRIMASK, r3
}
 8007f0a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2288      	movs	r2, #136	; 0x88
 8007f10:	2120      	movs	r1, #32
 8007f12:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	f7ff faad 	bl	800747c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f22:	46c0      	nop			; (mov r8, r8)
 8007f24:	46bd      	mov	sp, r7
 8007f26:	b006      	add	sp, #24
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b090      	sub	sp, #64	; 0x40
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f34:	203e      	movs	r0, #62	; 0x3e
 8007f36:	183b      	adds	r3, r7, r0
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	2160      	movs	r1, #96	; 0x60
 8007f3c:	5a52      	ldrh	r2, [r2, r1]
 8007f3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	228c      	movs	r2, #140	; 0x8c
 8007f44:	589b      	ldr	r3, [r3, r2]
 8007f46:	2b22      	cmp	r3, #34	; 0x22
 8007f48:	d000      	beq.n	8007f4c <UART_RxISR_8BIT+0x20>
 8007f4a:	e09a      	b.n	8008082 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f52:	213c      	movs	r1, #60	; 0x3c
 8007f54:	187b      	adds	r3, r7, r1
 8007f56:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f58:	187b      	adds	r3, r7, r1
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	183b      	adds	r3, r7, r0
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b2d9      	uxtb	r1, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f68:	400a      	ands	r2, r1
 8007f6a:	b2d2      	uxtb	r2, r2
 8007f6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	225e      	movs	r2, #94	; 0x5e
 8007f7c:	5a9b      	ldrh	r3, [r3, r2]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	3b01      	subs	r3, #1
 8007f82:	b299      	uxth	r1, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	225e      	movs	r2, #94	; 0x5e
 8007f88:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	225e      	movs	r2, #94	; 0x5e
 8007f8e:	5a9b      	ldrh	r3, [r3, r2]
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d000      	beq.n	8007f98 <UART_RxISR_8BIT+0x6c>
 8007f96:	e07c      	b.n	8008092 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f98:	f3ef 8310 	mrs	r3, PRIMASK
 8007f9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f9e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa6:	69fb      	ldr	r3, [r7, #28]
 8007fa8:	f383 8810 	msr	PRIMASK, r3
}
 8007fac:	46c0      	nop			; (mov r8, r8)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4938      	ldr	r1, [pc, #224]	; (800809c <UART_RxISR_8BIT+0x170>)
 8007fba:	400a      	ands	r2, r1
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc2:	6a3b      	ldr	r3, [r7, #32]
 8007fc4:	f383 8810 	msr	PRIMASK, r3
}
 8007fc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fca:	f3ef 8310 	mrs	r3, PRIMASK
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fda:	f383 8810 	msr	PRIMASK, r3
}
 8007fde:	46c0      	nop			; (mov r8, r8)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689a      	ldr	r2, [r3, #8]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2101      	movs	r1, #1
 8007fec:	438a      	bics	r2, r1
 8007fee:	609a      	str	r2, [r3, #8]
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	f383 8810 	msr	PRIMASK, r3
}
 8007ffa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	228c      	movs	r2, #140	; 0x8c
 8008000:	2120      	movs	r1, #32
 8008002:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008014:	2b01      	cmp	r3, #1
 8008016:	d12f      	bne.n	8008078 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800801e:	f3ef 8310 	mrs	r3, PRIMASK
 8008022:	60fb      	str	r3, [r7, #12]
  return(result);
 8008024:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008026:	633b      	str	r3, [r7, #48]	; 0x30
 8008028:	2301      	movs	r3, #1
 800802a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f383 8810 	msr	PRIMASK, r3
}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2110      	movs	r1, #16
 8008040:	438a      	bics	r2, r1
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008046:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	f383 8810 	msr	PRIMASK, r3
}
 800804e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	2210      	movs	r2, #16
 8008058:	4013      	ands	r3, r2
 800805a:	2b10      	cmp	r3, #16
 800805c:	d103      	bne.n	8008066 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2210      	movs	r2, #16
 8008064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	225c      	movs	r2, #92	; 0x5c
 800806a:	5a9a      	ldrh	r2, [r3, r2]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	0011      	movs	r1, r2
 8008070:	0018      	movs	r0, r3
 8008072:	f7ff fa13 	bl	800749c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008076:	e00c      	b.n	8008092 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	0018      	movs	r0, r3
 800807c:	f000 ff9e 	bl	8008fbc <HAL_UART_RxCpltCallback>
}
 8008080:	e007      	b.n	8008092 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2108      	movs	r1, #8
 800808e:	430a      	orrs	r2, r1
 8008090:	619a      	str	r2, [r3, #24]
}
 8008092:	46c0      	nop			; (mov r8, r8)
 8008094:	46bd      	mov	sp, r7
 8008096:	b010      	add	sp, #64	; 0x40
 8008098:	bd80      	pop	{r7, pc}
 800809a:	46c0      	nop			; (mov r8, r8)
 800809c:	fffffedf 	.word	0xfffffedf

080080a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b090      	sub	sp, #64	; 0x40
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80080a8:	203e      	movs	r0, #62	; 0x3e
 80080aa:	183b      	adds	r3, r7, r0
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	2160      	movs	r1, #96	; 0x60
 80080b0:	5a52      	ldrh	r2, [r2, r1]
 80080b2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	228c      	movs	r2, #140	; 0x8c
 80080b8:	589b      	ldr	r3, [r3, r2]
 80080ba:	2b22      	cmp	r3, #34	; 0x22
 80080bc:	d000      	beq.n	80080c0 <UART_RxISR_16BIT+0x20>
 80080be:	e09a      	b.n	80081f6 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080c6:	213c      	movs	r1, #60	; 0x3c
 80080c8:	187b      	adds	r3, r7, r1
 80080ca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80080d2:	187b      	adds	r3, r7, r1
 80080d4:	183a      	adds	r2, r7, r0
 80080d6:	881b      	ldrh	r3, [r3, #0]
 80080d8:	8812      	ldrh	r2, [r2, #0]
 80080da:	4013      	ands	r3, r2
 80080dc:	b29a      	uxth	r2, r3
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e6:	1c9a      	adds	r2, r3, #2
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	225e      	movs	r2, #94	; 0x5e
 80080f0:	5a9b      	ldrh	r3, [r3, r2]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	3b01      	subs	r3, #1
 80080f6:	b299      	uxth	r1, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	225e      	movs	r2, #94	; 0x5e
 80080fc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	225e      	movs	r2, #94	; 0x5e
 8008102:	5a9b      	ldrh	r3, [r3, r2]
 8008104:	b29b      	uxth	r3, r3
 8008106:	2b00      	cmp	r3, #0
 8008108:	d000      	beq.n	800810c <UART_RxISR_16BIT+0x6c>
 800810a:	e07c      	b.n	8008206 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800810c:	f3ef 8310 	mrs	r3, PRIMASK
 8008110:	617b      	str	r3, [r7, #20]
  return(result);
 8008112:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008114:	637b      	str	r3, [r7, #52]	; 0x34
 8008116:	2301      	movs	r3, #1
 8008118:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	f383 8810 	msr	PRIMASK, r3
}
 8008120:	46c0      	nop			; (mov r8, r8)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4938      	ldr	r1, [pc, #224]	; (8008210 <UART_RxISR_16BIT+0x170>)
 800812e:	400a      	ands	r2, r1
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008134:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	f383 8810 	msr	PRIMASK, r3
}
 800813c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800813e:	f3ef 8310 	mrs	r3, PRIMASK
 8008142:	623b      	str	r3, [r7, #32]
  return(result);
 8008144:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008146:	633b      	str	r3, [r7, #48]	; 0x30
 8008148:	2301      	movs	r3, #1
 800814a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	f383 8810 	msr	PRIMASK, r3
}
 8008152:	46c0      	nop			; (mov r8, r8)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689a      	ldr	r2, [r3, #8]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2101      	movs	r1, #1
 8008160:	438a      	bics	r2, r1
 8008162:	609a      	str	r2, [r3, #8]
 8008164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816a:	f383 8810 	msr	PRIMASK, r3
}
 800816e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	228c      	movs	r2, #140	; 0x8c
 8008174:	2120      	movs	r1, #32
 8008176:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008188:	2b01      	cmp	r3, #1
 800818a:	d12f      	bne.n	80081ec <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008192:	f3ef 8310 	mrs	r3, PRIMASK
 8008196:	60bb      	str	r3, [r7, #8]
  return(result);
 8008198:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800819a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800819c:	2301      	movs	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f383 8810 	msr	PRIMASK, r3
}
 80081a6:	46c0      	nop			; (mov r8, r8)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2110      	movs	r1, #16
 80081b4:	438a      	bics	r2, r1
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f383 8810 	msr	PRIMASK, r3
}
 80081c2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	2210      	movs	r2, #16
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b10      	cmp	r3, #16
 80081d0:	d103      	bne.n	80081da <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2210      	movs	r2, #16
 80081d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	225c      	movs	r2, #92	; 0x5c
 80081de:	5a9a      	ldrh	r2, [r3, r2]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	0011      	movs	r1, r2
 80081e4:	0018      	movs	r0, r3
 80081e6:	f7ff f959 	bl	800749c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081ea:	e00c      	b.n	8008206 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	0018      	movs	r0, r3
 80081f0:	f000 fee4 	bl	8008fbc <HAL_UART_RxCpltCallback>
}
 80081f4:	e007      	b.n	8008206 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	699a      	ldr	r2, [r3, #24]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2108      	movs	r1, #8
 8008202:	430a      	orrs	r2, r1
 8008204:	619a      	str	r2, [r3, #24]
}
 8008206:	46c0      	nop			; (mov r8, r8)
 8008208:	46bd      	mov	sp, r7
 800820a:	b010      	add	sp, #64	; 0x40
 800820c:	bd80      	pop	{r7, pc}
 800820e:	46c0      	nop			; (mov r8, r8)
 8008210:	fffffedf 	.word	0xfffffedf

08008214 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b09c      	sub	sp, #112	; 0x70
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800821c:	236a      	movs	r3, #106	; 0x6a
 800821e:	18fb      	adds	r3, r7, r3
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	2160      	movs	r1, #96	; 0x60
 8008224:	5a52      	ldrh	r2, [r2, r1]
 8008226:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	69db      	ldr	r3, [r3, #28]
 800822e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	689b      	ldr	r3, [r3, #8]
 800823e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	228c      	movs	r2, #140	; 0x8c
 8008244:	589b      	ldr	r3, [r3, r2]
 8008246:	2b22      	cmp	r3, #34	; 0x22
 8008248:	d000      	beq.n	800824c <UART_RxISR_8BIT_FIFOEN+0x38>
 800824a:	e144      	b.n	80084d6 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800824c:	235e      	movs	r3, #94	; 0x5e
 800824e:	18fb      	adds	r3, r7, r3
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	2168      	movs	r1, #104	; 0x68
 8008254:	5a52      	ldrh	r2, [r2, r1]
 8008256:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008258:	e0eb      	b.n	8008432 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008260:	215c      	movs	r1, #92	; 0x5c
 8008262:	187b      	adds	r3, r7, r1
 8008264:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008266:	187b      	adds	r3, r7, r1
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	b2da      	uxtb	r2, r3
 800826c:	236a      	movs	r3, #106	; 0x6a
 800826e:	18fb      	adds	r3, r7, r3
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b2d9      	uxtb	r1, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008278:	400a      	ands	r2, r1
 800827a:	b2d2      	uxtb	r2, r2
 800827c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	225e      	movs	r2, #94	; 0x5e
 800828c:	5a9b      	ldrh	r3, [r3, r2]
 800828e:	b29b      	uxth	r3, r3
 8008290:	3b01      	subs	r3, #1
 8008292:	b299      	uxth	r1, r3
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	225e      	movs	r2, #94	; 0x5e
 8008298:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	69db      	ldr	r3, [r3, #28]
 80082a0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80082a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a4:	2207      	movs	r2, #7
 80082a6:	4013      	ands	r3, r2
 80082a8:	d049      	beq.n	800833e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80082aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ac:	2201      	movs	r2, #1
 80082ae:	4013      	ands	r3, r2
 80082b0:	d010      	beq.n	80082d4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80082b2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80082b4:	2380      	movs	r3, #128	; 0x80
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	4013      	ands	r3, r2
 80082ba:	d00b      	beq.n	80082d4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2201      	movs	r2, #1
 80082c2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2290      	movs	r2, #144	; 0x90
 80082c8:	589b      	ldr	r3, [r3, r2]
 80082ca:	2201      	movs	r2, #1
 80082cc:	431a      	orrs	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2190      	movs	r1, #144	; 0x90
 80082d2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d6:	2202      	movs	r2, #2
 80082d8:	4013      	ands	r3, r2
 80082da:	d00f      	beq.n	80082fc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80082dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082de:	2201      	movs	r2, #1
 80082e0:	4013      	ands	r3, r2
 80082e2:	d00b      	beq.n	80082fc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2202      	movs	r2, #2
 80082ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2290      	movs	r2, #144	; 0x90
 80082f0:	589b      	ldr	r3, [r3, r2]
 80082f2:	2204      	movs	r2, #4
 80082f4:	431a      	orrs	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2190      	movs	r1, #144	; 0x90
 80082fa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fe:	2204      	movs	r2, #4
 8008300:	4013      	ands	r3, r2
 8008302:	d00f      	beq.n	8008324 <UART_RxISR_8BIT_FIFOEN+0x110>
 8008304:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008306:	2201      	movs	r2, #1
 8008308:	4013      	ands	r3, r2
 800830a:	d00b      	beq.n	8008324 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2204      	movs	r2, #4
 8008312:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2290      	movs	r2, #144	; 0x90
 8008318:	589b      	ldr	r3, [r3, r2]
 800831a:	2202      	movs	r2, #2
 800831c:	431a      	orrs	r2, r3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2190      	movs	r1, #144	; 0x90
 8008322:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2290      	movs	r2, #144	; 0x90
 8008328:	589b      	ldr	r3, [r3, r2]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d007      	beq.n	800833e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	0018      	movs	r0, r3
 8008332:	f7ff f8ab 	bl	800748c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2290      	movs	r2, #144	; 0x90
 800833a:	2100      	movs	r1, #0
 800833c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	225e      	movs	r2, #94	; 0x5e
 8008342:	5a9b      	ldrh	r3, [r3, r2]
 8008344:	b29b      	uxth	r3, r3
 8008346:	2b00      	cmp	r3, #0
 8008348:	d173      	bne.n	8008432 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800834a:	f3ef 8310 	mrs	r3, PRIMASK
 800834e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8008350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008352:	65bb      	str	r3, [r7, #88]	; 0x58
 8008354:	2301      	movs	r3, #1
 8008356:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835a:	f383 8810 	msr	PRIMASK, r3
}
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4961      	ldr	r1, [pc, #388]	; (80084f0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 800836c:	400a      	ands	r2, r1
 800836e:	601a      	str	r2, [r3, #0]
 8008370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008372:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008376:	f383 8810 	msr	PRIMASK, r3
}
 800837a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800837c:	f3ef 8310 	mrs	r3, PRIMASK
 8008380:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8008382:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008384:	657b      	str	r3, [r7, #84]	; 0x54
 8008386:	2301      	movs	r3, #1
 8008388:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800838a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800838c:	f383 8810 	msr	PRIMASK, r3
}
 8008390:	46c0      	nop			; (mov r8, r8)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	689a      	ldr	r2, [r3, #8]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4955      	ldr	r1, [pc, #340]	; (80084f4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 800839e:	400a      	ands	r2, r1
 80083a0:	609a      	str	r2, [r3, #8]
 80083a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80083a4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80083a8:	f383 8810 	msr	PRIMASK, r3
}
 80083ac:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	228c      	movs	r2, #140	; 0x8c
 80083b2:	2120      	movs	r1, #32
 80083b4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d12f      	bne.n	800842a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d0:	f3ef 8310 	mrs	r3, PRIMASK
 80083d4:	623b      	str	r3, [r7, #32]
  return(result);
 80083d6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d8:	653b      	str	r3, [r7, #80]	; 0x50
 80083da:	2301      	movs	r3, #1
 80083dc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	f383 8810 	msr	PRIMASK, r3
}
 80083e4:	46c0      	nop			; (mov r8, r8)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2110      	movs	r1, #16
 80083f2:	438a      	bics	r2, r1
 80083f4:	601a      	str	r2, [r3, #0]
 80083f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083f8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	f383 8810 	msr	PRIMASK, r3
}
 8008400:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	2210      	movs	r2, #16
 800840a:	4013      	ands	r3, r2
 800840c:	2b10      	cmp	r3, #16
 800840e:	d103      	bne.n	8008418 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2210      	movs	r2, #16
 8008416:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	225c      	movs	r2, #92	; 0x5c
 800841c:	5a9a      	ldrh	r2, [r3, r2]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	0011      	movs	r1, r2
 8008422:	0018      	movs	r0, r3
 8008424:	f7ff f83a 	bl	800749c <HAL_UARTEx_RxEventCallback>
 8008428:	e003      	b.n	8008432 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	0018      	movs	r0, r3
 800842e:	f000 fdc5 	bl	8008fbc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008432:	235e      	movs	r3, #94	; 0x5e
 8008434:	18fb      	adds	r3, r7, r3
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d004      	beq.n	8008446 <UART_RxISR_8BIT_FIFOEN+0x232>
 800843c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800843e:	2220      	movs	r2, #32
 8008440:	4013      	ands	r3, r2
 8008442:	d000      	beq.n	8008446 <UART_RxISR_8BIT_FIFOEN+0x232>
 8008444:	e709      	b.n	800825a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008446:	204e      	movs	r0, #78	; 0x4e
 8008448:	183b      	adds	r3, r7, r0
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	215e      	movs	r1, #94	; 0x5e
 800844e:	5a52      	ldrh	r2, [r2, r1]
 8008450:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008452:	0001      	movs	r1, r0
 8008454:	187b      	adds	r3, r7, r1
 8008456:	881b      	ldrh	r3, [r3, #0]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d044      	beq.n	80084e6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2268      	movs	r2, #104	; 0x68
 8008460:	5a9b      	ldrh	r3, [r3, r2]
 8008462:	187a      	adds	r2, r7, r1
 8008464:	8812      	ldrh	r2, [r2, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d23d      	bcs.n	80084e6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800846a:	f3ef 8310 	mrs	r3, PRIMASK
 800846e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008470:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008472:	64bb      	str	r3, [r7, #72]	; 0x48
 8008474:	2301      	movs	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f383 8810 	msr	PRIMASK, r3
}
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	689a      	ldr	r2, [r3, #8]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	491b      	ldr	r1, [pc, #108]	; (80084f8 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 800848c:	400a      	ands	r2, r1
 800848e:	609a      	str	r2, [r3, #8]
 8008490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f383 8810 	msr	PRIMASK, r3
}
 800849a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a17      	ldr	r2, [pc, #92]	; (80084fc <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80084a0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084a2:	f3ef 8310 	mrs	r3, PRIMASK
 80084a6:	617b      	str	r3, [r7, #20]
  return(result);
 80084a8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084aa:	647b      	str	r3, [r7, #68]	; 0x44
 80084ac:	2301      	movs	r3, #1
 80084ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f383 8810 	msr	PRIMASK, r3
}
 80084b6:	46c0      	nop			; (mov r8, r8)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2120      	movs	r1, #32
 80084c4:	430a      	orrs	r2, r1
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	f383 8810 	msr	PRIMASK, r3
}
 80084d2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084d4:	e007      	b.n	80084e6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	699a      	ldr	r2, [r3, #24]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2108      	movs	r1, #8
 80084e2:	430a      	orrs	r2, r1
 80084e4:	619a      	str	r2, [r3, #24]
}
 80084e6:	46c0      	nop			; (mov r8, r8)
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b01c      	add	sp, #112	; 0x70
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	46c0      	nop			; (mov r8, r8)
 80084f0:	fffffeff 	.word	0xfffffeff
 80084f4:	effffffe 	.word	0xeffffffe
 80084f8:	efffffff 	.word	0xefffffff
 80084fc:	08007f2d 	.word	0x08007f2d

08008500 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b09e      	sub	sp, #120	; 0x78
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008508:	2372      	movs	r3, #114	; 0x72
 800850a:	18fb      	adds	r3, r7, r3
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	2160      	movs	r1, #96	; 0x60
 8008510:	5a52      	ldrh	r2, [r2, r1]
 8008512:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	228c      	movs	r2, #140	; 0x8c
 8008530:	589b      	ldr	r3, [r3, r2]
 8008532:	2b22      	cmp	r3, #34	; 0x22
 8008534:	d000      	beq.n	8008538 <UART_RxISR_16BIT_FIFOEN+0x38>
 8008536:	e144      	b.n	80087c2 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008538:	2366      	movs	r3, #102	; 0x66
 800853a:	18fb      	adds	r3, r7, r3
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	2168      	movs	r1, #104	; 0x68
 8008540:	5a52      	ldrh	r2, [r2, r1]
 8008542:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008544:	e0eb      	b.n	800871e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800854c:	2164      	movs	r1, #100	; 0x64
 800854e:	187b      	adds	r3, r7, r1
 8008550:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008556:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8008558:	187b      	adds	r3, r7, r1
 800855a:	2272      	movs	r2, #114	; 0x72
 800855c:	18ba      	adds	r2, r7, r2
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	8812      	ldrh	r2, [r2, #0]
 8008562:	4013      	ands	r3, r2
 8008564:	b29a      	uxth	r2, r3
 8008566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008568:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856e:	1c9a      	adds	r2, r3, #2
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	225e      	movs	r2, #94	; 0x5e
 8008578:	5a9b      	ldrh	r3, [r3, r2]
 800857a:	b29b      	uxth	r3, r3
 800857c:	3b01      	subs	r3, #1
 800857e:	b299      	uxth	r1, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	225e      	movs	r2, #94	; 0x5e
 8008584:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	69db      	ldr	r3, [r3, #28]
 800858c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800858e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008590:	2207      	movs	r2, #7
 8008592:	4013      	ands	r3, r2
 8008594:	d049      	beq.n	800862a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008596:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008598:	2201      	movs	r2, #1
 800859a:	4013      	ands	r3, r2
 800859c:	d010      	beq.n	80085c0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800859e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085a0:	2380      	movs	r3, #128	; 0x80
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	4013      	ands	r3, r2
 80085a6:	d00b      	beq.n	80085c0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2201      	movs	r2, #1
 80085ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2290      	movs	r2, #144	; 0x90
 80085b4:	589b      	ldr	r3, [r3, r2]
 80085b6:	2201      	movs	r2, #1
 80085b8:	431a      	orrs	r2, r3
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2190      	movs	r1, #144	; 0x90
 80085be:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c2:	2202      	movs	r2, #2
 80085c4:	4013      	ands	r3, r2
 80085c6:	d00f      	beq.n	80085e8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80085c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085ca:	2201      	movs	r2, #1
 80085cc:	4013      	ands	r3, r2
 80085ce:	d00b      	beq.n	80085e8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2202      	movs	r2, #2
 80085d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2290      	movs	r2, #144	; 0x90
 80085dc:	589b      	ldr	r3, [r3, r2]
 80085de:	2204      	movs	r2, #4
 80085e0:	431a      	orrs	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2190      	movs	r1, #144	; 0x90
 80085e6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085ea:	2204      	movs	r2, #4
 80085ec:	4013      	ands	r3, r2
 80085ee:	d00f      	beq.n	8008610 <UART_RxISR_16BIT_FIFOEN+0x110>
 80085f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80085f2:	2201      	movs	r2, #1
 80085f4:	4013      	ands	r3, r2
 80085f6:	d00b      	beq.n	8008610 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2204      	movs	r2, #4
 80085fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2290      	movs	r2, #144	; 0x90
 8008604:	589b      	ldr	r3, [r3, r2]
 8008606:	2202      	movs	r2, #2
 8008608:	431a      	orrs	r2, r3
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2190      	movs	r1, #144	; 0x90
 800860e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2290      	movs	r2, #144	; 0x90
 8008614:	589b      	ldr	r3, [r3, r2]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d007      	beq.n	800862a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	0018      	movs	r0, r3
 800861e:	f7fe ff35 	bl	800748c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2290      	movs	r2, #144	; 0x90
 8008626:	2100      	movs	r1, #0
 8008628:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	225e      	movs	r2, #94	; 0x5e
 800862e:	5a9b      	ldrh	r3, [r3, r2]
 8008630:	b29b      	uxth	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d173      	bne.n	800871e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008636:	f3ef 8310 	mrs	r3, PRIMASK
 800863a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800863e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008640:	2301      	movs	r3, #1
 8008642:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008646:	f383 8810 	msr	PRIMASK, r3
}
 800864a:	46c0      	nop			; (mov r8, r8)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4961      	ldr	r1, [pc, #388]	; (80087dc <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8008658:	400a      	ands	r2, r1
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800865e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	f383 8810 	msr	PRIMASK, r3
}
 8008666:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008668:	f3ef 8310 	mrs	r3, PRIMASK
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800866e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008670:	65bb      	str	r3, [r7, #88]	; 0x58
 8008672:	2301      	movs	r3, #1
 8008674:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008678:	f383 8810 	msr	PRIMASK, r3
}
 800867c:	46c0      	nop			; (mov r8, r8)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	689a      	ldr	r2, [r3, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4955      	ldr	r1, [pc, #340]	; (80087e0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800868a:	400a      	ands	r2, r1
 800868c:	609a      	str	r2, [r3, #8]
 800868e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008690:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008692:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008694:	f383 8810 	msr	PRIMASK, r3
}
 8008698:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	228c      	movs	r2, #140	; 0x8c
 800869e:	2120      	movs	r1, #32
 80086a0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d12f      	bne.n	8008716 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086bc:	f3ef 8310 	mrs	r3, PRIMASK
 80086c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086c4:	657b      	str	r3, [r7, #84]	; 0x54
 80086c6:	2301      	movs	r3, #1
 80086c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	f383 8810 	msr	PRIMASK, r3
}
 80086d0:	46c0      	nop			; (mov r8, r8)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2110      	movs	r1, #16
 80086de:	438a      	bics	r2, r1
 80086e0:	601a      	str	r2, [r3, #0]
 80086e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086e8:	f383 8810 	msr	PRIMASK, r3
}
 80086ec:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	2210      	movs	r2, #16
 80086f6:	4013      	ands	r3, r2
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d103      	bne.n	8008704 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2210      	movs	r2, #16
 8008702:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	225c      	movs	r2, #92	; 0x5c
 8008708:	5a9a      	ldrh	r2, [r3, r2]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	0011      	movs	r1, r2
 800870e:	0018      	movs	r0, r3
 8008710:	f7fe fec4 	bl	800749c <HAL_UARTEx_RxEventCallback>
 8008714:	e003      	b.n	800871e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	0018      	movs	r0, r3
 800871a:	f000 fc4f 	bl	8008fbc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800871e:	2366      	movs	r3, #102	; 0x66
 8008720:	18fb      	adds	r3, r7, r3
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d004      	beq.n	8008732 <UART_RxISR_16BIT_FIFOEN+0x232>
 8008728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800872a:	2220      	movs	r2, #32
 800872c:	4013      	ands	r3, r2
 800872e:	d000      	beq.n	8008732 <UART_RxISR_16BIT_FIFOEN+0x232>
 8008730:	e709      	b.n	8008546 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008732:	2052      	movs	r0, #82	; 0x52
 8008734:	183b      	adds	r3, r7, r0
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	215e      	movs	r1, #94	; 0x5e
 800873a:	5a52      	ldrh	r2, [r2, r1]
 800873c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800873e:	0001      	movs	r1, r0
 8008740:	187b      	adds	r3, r7, r1
 8008742:	881b      	ldrh	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d044      	beq.n	80087d2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2268      	movs	r2, #104	; 0x68
 800874c:	5a9b      	ldrh	r3, [r3, r2]
 800874e:	187a      	adds	r2, r7, r1
 8008750:	8812      	ldrh	r2, [r2, #0]
 8008752:	429a      	cmp	r2, r3
 8008754:	d23d      	bcs.n	80087d2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008756:	f3ef 8310 	mrs	r3, PRIMASK
 800875a:	60fb      	str	r3, [r7, #12]
  return(result);
 800875c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800875e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008760:	2301      	movs	r3, #1
 8008762:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f383 8810 	msr	PRIMASK, r3
}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	689a      	ldr	r2, [r3, #8]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	491b      	ldr	r1, [pc, #108]	; (80087e4 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8008778:	400a      	ands	r2, r1
 800877a:	609a      	str	r2, [r3, #8]
 800877c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800877e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f383 8810 	msr	PRIMASK, r3
}
 8008786:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a17      	ldr	r2, [pc, #92]	; (80087e8 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800878c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800878e:	f3ef 8310 	mrs	r3, PRIMASK
 8008792:	61bb      	str	r3, [r7, #24]
  return(result);
 8008794:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008796:	64bb      	str	r3, [r7, #72]	; 0x48
 8008798:	2301      	movs	r3, #1
 800879a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	f383 8810 	msr	PRIMASK, r3
}
 80087a2:	46c0      	nop			; (mov r8, r8)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2120      	movs	r1, #32
 80087b0:	430a      	orrs	r2, r1
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	f383 8810 	msr	PRIMASK, r3
}
 80087be:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087c0:	e007      	b.n	80087d2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	699a      	ldr	r2, [r3, #24]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2108      	movs	r1, #8
 80087ce:	430a      	orrs	r2, r1
 80087d0:	619a      	str	r2, [r3, #24]
}
 80087d2:	46c0      	nop			; (mov r8, r8)
 80087d4:	46bd      	mov	sp, r7
 80087d6:	b01e      	add	sp, #120	; 0x78
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	46c0      	nop			; (mov r8, r8)
 80087dc:	fffffeff 	.word	0xfffffeff
 80087e0:	effffffe 	.word	0xeffffffe
 80087e4:	efffffff 	.word	0xefffffff
 80087e8:	080080a1 	.word	0x080080a1

080087ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80087f4:	46c0      	nop			; (mov r8, r8)
 80087f6:	46bd      	mov	sp, r7
 80087f8:	b002      	add	sp, #8
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b082      	sub	sp, #8
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008804:	46c0      	nop			; (mov r8, r8)
 8008806:	46bd      	mov	sp, r7
 8008808:	b002      	add	sp, #8
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008814:	46c0      	nop			; (mov r8, r8)
 8008816:	46bd      	mov	sp, r7
 8008818:	b002      	add	sp, #8
 800881a:	bd80      	pop	{r7, pc}

0800881c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b084      	sub	sp, #16
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2284      	movs	r2, #132	; 0x84
 8008828:	5c9b      	ldrb	r3, [r3, r2]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <HAL_UARTEx_DisableFifoMode+0x16>
 800882e:	2302      	movs	r3, #2
 8008830:	e027      	b.n	8008882 <HAL_UARTEx_DisableFifoMode+0x66>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2284      	movs	r2, #132	; 0x84
 8008836:	2101      	movs	r1, #1
 8008838:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2288      	movs	r2, #136	; 0x88
 800883e:	2124      	movs	r1, #36	; 0x24
 8008840:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2101      	movs	r1, #1
 8008856:	438a      	bics	r2, r1
 8008858:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4a0b      	ldr	r2, [pc, #44]	; (800888c <HAL_UARTEx_DisableFifoMode+0x70>)
 800885e:	4013      	ands	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2288      	movs	r2, #136	; 0x88
 8008874:	2120      	movs	r1, #32
 8008876:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2284      	movs	r2, #132	; 0x84
 800887c:	2100      	movs	r1, #0
 800887e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	0018      	movs	r0, r3
 8008884:	46bd      	mov	sp, r7
 8008886:	b004      	add	sp, #16
 8008888:	bd80      	pop	{r7, pc}
 800888a:	46c0      	nop			; (mov r8, r8)
 800888c:	dfffffff 	.word	0xdfffffff

08008890 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2284      	movs	r2, #132	; 0x84
 800889e:	5c9b      	ldrb	r3, [r3, r2]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d101      	bne.n	80088a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80088a4:	2302      	movs	r3, #2
 80088a6:	e02e      	b.n	8008906 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2284      	movs	r2, #132	; 0x84
 80088ac:	2101      	movs	r1, #1
 80088ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2288      	movs	r2, #136	; 0x88
 80088b4:	2124      	movs	r1, #36	; 0x24
 80088b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2101      	movs	r1, #1
 80088cc:	438a      	bics	r2, r1
 80088ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	08d9      	lsrs	r1, r3, #3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	430a      	orrs	r2, r1
 80088e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	0018      	movs	r0, r3
 80088e8:	f000 f854 	bl	8008994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2288      	movs	r2, #136	; 0x88
 80088f8:	2120      	movs	r1, #32
 80088fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2284      	movs	r2, #132	; 0x84
 8008900:	2100      	movs	r1, #0
 8008902:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	0018      	movs	r0, r3
 8008908:	46bd      	mov	sp, r7
 800890a:	b004      	add	sp, #16
 800890c:	bd80      	pop	{r7, pc}
	...

08008910 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2284      	movs	r2, #132	; 0x84
 800891e:	5c9b      	ldrb	r3, [r3, r2]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008924:	2302      	movs	r3, #2
 8008926:	e02f      	b.n	8008988 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2284      	movs	r2, #132	; 0x84
 800892c:	2101      	movs	r1, #1
 800892e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2288      	movs	r2, #136	; 0x88
 8008934:	2124      	movs	r1, #36	; 0x24
 8008936:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2101      	movs	r1, #1
 800894c:	438a      	bics	r2, r1
 800894e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	4a0e      	ldr	r2, [pc, #56]	; (8008990 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008958:	4013      	ands	r3, r2
 800895a:	0019      	movs	r1, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	683a      	ldr	r2, [r7, #0]
 8008962:	430a      	orrs	r2, r1
 8008964:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	0018      	movs	r0, r3
 800896a:	f000 f813 	bl	8008994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	2288      	movs	r2, #136	; 0x88
 800897a:	2120      	movs	r1, #32
 800897c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2284      	movs	r2, #132	; 0x84
 8008982:	2100      	movs	r1, #0
 8008984:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	0018      	movs	r0, r3
 800898a:	46bd      	mov	sp, r7
 800898c:	b004      	add	sp, #16
 800898e:	bd80      	pop	{r7, pc}
 8008990:	f1ffffff 	.word	0xf1ffffff

08008994 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008996:	b085      	sub	sp, #20
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d108      	bne.n	80089b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	226a      	movs	r2, #106	; 0x6a
 80089a8:	2101      	movs	r1, #1
 80089aa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2268      	movs	r2, #104	; 0x68
 80089b0:	2101      	movs	r1, #1
 80089b2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80089b4:	e043      	b.n	8008a3e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80089b6:	260f      	movs	r6, #15
 80089b8:	19bb      	adds	r3, r7, r6
 80089ba:	2208      	movs	r2, #8
 80089bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80089be:	200e      	movs	r0, #14
 80089c0:	183b      	adds	r3, r7, r0
 80089c2:	2208      	movs	r2, #8
 80089c4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	0e5b      	lsrs	r3, r3, #25
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	240d      	movs	r4, #13
 80089d2:	193b      	adds	r3, r7, r4
 80089d4:	2107      	movs	r1, #7
 80089d6:	400a      	ands	r2, r1
 80089d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	0f5b      	lsrs	r3, r3, #29
 80089e2:	b2da      	uxtb	r2, r3
 80089e4:	250c      	movs	r5, #12
 80089e6:	197b      	adds	r3, r7, r5
 80089e8:	2107      	movs	r1, #7
 80089ea:	400a      	ands	r2, r1
 80089ec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80089ee:	183b      	adds	r3, r7, r0
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	197a      	adds	r2, r7, r5
 80089f4:	7812      	ldrb	r2, [r2, #0]
 80089f6:	4914      	ldr	r1, [pc, #80]	; (8008a48 <UARTEx_SetNbDataToProcess+0xb4>)
 80089f8:	5c8a      	ldrb	r2, [r1, r2]
 80089fa:	435a      	muls	r2, r3
 80089fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80089fe:	197b      	adds	r3, r7, r5
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	4a12      	ldr	r2, [pc, #72]	; (8008a4c <UARTEx_SetNbDataToProcess+0xb8>)
 8008a04:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a06:	0019      	movs	r1, r3
 8008a08:	f7f7 fc20 	bl	800024c <__divsi3>
 8008a0c:	0003      	movs	r3, r0
 8008a0e:	b299      	uxth	r1, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	226a      	movs	r2, #106	; 0x6a
 8008a14:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a16:	19bb      	adds	r3, r7, r6
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	193a      	adds	r2, r7, r4
 8008a1c:	7812      	ldrb	r2, [r2, #0]
 8008a1e:	490a      	ldr	r1, [pc, #40]	; (8008a48 <UARTEx_SetNbDataToProcess+0xb4>)
 8008a20:	5c8a      	ldrb	r2, [r1, r2]
 8008a22:	435a      	muls	r2, r3
 8008a24:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008a26:	193b      	adds	r3, r7, r4
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	4a08      	ldr	r2, [pc, #32]	; (8008a4c <UARTEx_SetNbDataToProcess+0xb8>)
 8008a2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008a2e:	0019      	movs	r1, r3
 8008a30:	f7f7 fc0c 	bl	800024c <__divsi3>
 8008a34:	0003      	movs	r3, r0
 8008a36:	b299      	uxth	r1, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2268      	movs	r2, #104	; 0x68
 8008a3c:	5299      	strh	r1, [r3, r2]
}
 8008a3e:	46c0      	nop			; (mov r8, r8)
 8008a40:	46bd      	mov	sp, r7
 8008a42:	b005      	add	sp, #20
 8008a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a46:	46c0      	nop			; (mov r8, r8)
 8008a48:	0800c238 	.word	0x0800c238
 8008a4c:	0800c240 	.word	0x0800c240

08008a50 <PIDInit>:
PIDTypeDef gSpeedPID;
PIDTypeDef gSpeedPID2;
PIDTypeDef gCurrentPID;

void PIDInit(void)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	af00      	add	r7, sp, #0
    gSpeedPID.SetPoint = 0;    // set the goal speed
 8008a54:	4b1d      	ldr	r3, [pc, #116]	; (8008acc <PIDInit+0x7c>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
    gSpeedPID.ActualValue = 0; // set the actual speed
 8008a5a:	4b1c      	ldr	r3, [pc, #112]	; (8008acc <PIDInit+0x7c>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	605a      	str	r2, [r3, #4]

    gSpeedPID.SumError = 0;  // set the sum error
 8008a60:	4b1a      	ldr	r3, [pc, #104]	; (8008acc <PIDInit+0x7c>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	609a      	str	r2, [r3, #8]
    gSpeedPID.Error = 0;     // set the current error
 8008a66:	4b19      	ldr	r3, [pc, #100]	; (8008acc <PIDInit+0x7c>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	619a      	str	r2, [r3, #24]
    gSpeedPID.LastError = 0; // set the last error
 8008a6c:	4b17      	ldr	r3, [pc, #92]	; (8008acc <PIDInit+0x7c>)
 8008a6e:	2200      	movs	r2, #0
 8008a70:	61da      	str	r2, [r3, #28]
    gSpeedPID.PrevError = 0; // set the previous error
 8008a72:	4b16      	ldr	r3, [pc, #88]	; (8008acc <PIDInit+0x7c>)
 8008a74:	2200      	movs	r2, #0
 8008a76:	621a      	str	r2, [r3, #32]

    gSpeedPID.Proportion = S_KP; // set the proportion
 8008a78:	4b14      	ldr	r3, [pc, #80]	; (8008acc <PIDInit+0x7c>)
 8008a7a:	2282      	movs	r2, #130	; 0x82
 8008a7c:	05d2      	lsls	r2, r2, #23
 8008a7e:	60da      	str	r2, [r3, #12]
    gSpeedPID.Integral = S_KI;   // set the integral
 8008a80:	4b12      	ldr	r3, [pc, #72]	; (8008acc <PIDInit+0x7c>)
 8008a82:	4a13      	ldr	r2, [pc, #76]	; (8008ad0 <PIDInit+0x80>)
 8008a84:	611a      	str	r2, [r3, #16]
    gSpeedPID.Derivative = S_KD; // set the derivative
 8008a86:	4b11      	ldr	r3, [pc, #68]	; (8008acc <PIDInit+0x7c>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	615a      	str	r2, [r3, #20]

    gSpeedPID2.SetPoint = 0;    // set the goal speed
 8008a8c:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <PIDInit+0x84>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]
    gSpeedPID2.ActualValue = 0; // set the actual speed
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <PIDInit+0x84>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	605a      	str	r2, [r3, #4]

    gSpeedPID2.SumError = 0;  // set the sum error
 8008a98:	4b0e      	ldr	r3, [pc, #56]	; (8008ad4 <PIDInit+0x84>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	609a      	str	r2, [r3, #8]
    gSpeedPID2.Error = 0;     // set the current error
 8008a9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ad4 <PIDInit+0x84>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	619a      	str	r2, [r3, #24]
    gSpeedPID2.LastError = 0; // set the last error
 8008aa4:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <PIDInit+0x84>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	61da      	str	r2, [r3, #28]
    gSpeedPID2.PrevError = 0; // set the previous error
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <PIDInit+0x84>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	621a      	str	r2, [r3, #32]

    gSpeedPID2.Proportion = S_KP; // set the proportion
 8008ab0:	4b08      	ldr	r3, [pc, #32]	; (8008ad4 <PIDInit+0x84>)
 8008ab2:	2282      	movs	r2, #130	; 0x82
 8008ab4:	05d2      	lsls	r2, r2, #23
 8008ab6:	60da      	str	r2, [r3, #12]
    gSpeedPID2.Integral = S_KI;   // set the integral
 8008ab8:	4b06      	ldr	r3, [pc, #24]	; (8008ad4 <PIDInit+0x84>)
 8008aba:	4a05      	ldr	r2, [pc, #20]	; (8008ad0 <PIDInit+0x80>)
 8008abc:	611a      	str	r2, [r3, #16]
    gSpeedPID2.Derivative = S_KD; // set the derivative
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <PIDInit+0x84>)
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	615a      	str	r2, [r3, #20]

}
 8008ac4:	46c0      	nop			; (mov r8, r8)
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	200004d0 	.word	0x200004d0
 8008ad0:	3f59999a 	.word	0x3f59999a
 8008ad4:	200004f4 	.word	0x200004f4

08008ad8 <incrementPIDControl>:
    gSpeedPID.Derivative = kd;
    printf("[INFO]: Set PID param to kp: %f, ki: %f, kd: %f\r\n", kp, ki, kd);
}

float incrementPIDControl(PIDTypeDef *pid, float feedbackValue)
{
 8008ad8:	b5b0      	push	{r4, r5, r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
                        + (pid->Integral * pid->Error)                                            // integral term
                        + (pid->Derivative * (pid->Error - 2 * pid->LastError + pid->PrevError)); // derivative term
    pid->PrevError = pid->LastError;                                                              // save the previous error
    pid->LastError = pid->Error;  */                                                                 // save the last error
//（location PID）
    pid->Error = (float)(pid->SetPoint - feedbackValue);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	1c18      	adds	r0, r3, #0
 8008aea:	f7f8 f9cb 	bl	8000e84 <__aeabi_fsub>
 8008aee:	1c03      	adds	r3, r0, #0
 8008af0:	1c1a      	adds	r2, r3, #0
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	619a      	str	r2, [r3, #24]
    pid->SumError += pid->Error;                                            // calculate the sum error
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	689a      	ldr	r2, [r3, #8]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	1c19      	adds	r1, r3, #0
 8008b00:	1c10      	adds	r0, r2, #0
 8008b02:	f7f7 fd07 	bl	8000514 <__aeabi_fadd>
 8008b06:	1c03      	adds	r3, r0, #0
 8008b08:	1c1a      	adds	r2, r3, #0
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	609a      	str	r2, [r3, #8]
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68da      	ldr	r2, [r3, #12]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	1c19      	adds	r1, r3, #0
 8008b18:	1c10      	adds	r0, r2, #0
 8008b1a:	f7f8 f865 	bl	8000be8 <__aeabi_fmul>
 8008b1e:	1c03      	adds	r3, r0, #0
 8008b20:	1c1c      	adds	r4, r3, #0
                       + (pid->Integral * pid->SumError)                    // integral term
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	691a      	ldr	r2, [r3, #16]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	1c19      	adds	r1, r3, #0
 8008b2c:	1c10      	adds	r0, r2, #0
 8008b2e:	f7f8 f85b 	bl	8000be8 <__aeabi_fmul>
 8008b32:	1c03      	adds	r3, r0, #0
 8008b34:	1c19      	adds	r1, r3, #0
 8008b36:	1c20      	adds	r0, r4, #0
 8008b38:	f7f7 fcec 	bl	8000514 <__aeabi_fadd>
 8008b3c:	1c03      	adds	r3, r0, #0
 8008b3e:	1c1d      	adds	r5, r3, #0
                       + (pid->Derivative * (pid->Error - pid->LastError)); // derivative term
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695c      	ldr	r4, [r3, #20]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	699a      	ldr	r2, [r3, #24]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	1c19      	adds	r1, r3, #0
 8008b4e:	1c10      	adds	r0, r2, #0
 8008b50:	f7f8 f998 	bl	8000e84 <__aeabi_fsub>
 8008b54:	1c03      	adds	r3, r0, #0
 8008b56:	1c19      	adds	r1, r3, #0
 8008b58:	1c20      	adds	r0, r4, #0
 8008b5a:	f7f8 f845 	bl	8000be8 <__aeabi_fmul>
 8008b5e:	1c03      	adds	r3, r0, #0
 8008b60:	1c19      	adds	r1, r3, #0
 8008b62:	1c28      	adds	r0, r5, #0
 8008b64:	f7f7 fcd6 	bl	8000514 <__aeabi_fadd>
 8008b68:	1c03      	adds	r3, r0, #0
 8008b6a:	1c1a      	adds	r2, r3, #0
    pid->ActualValue = (pid->Proportion * pid->Error)                       // proportional term
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	605a      	str	r2, [r3, #4]
    pid->LastError = pid->Error;                                            // save the last error
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	699a      	ldr	r2, [r3, #24]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	61da      	str	r2, [r3, #28]

     printf("[INFO]: pid->ActualValue: %f\n", pid->ActualValue);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	1c18      	adds	r0, r3, #0
 8008b7e:	f7fa fa03 	bl	8002f88 <__aeabi_f2d>
 8008b82:	0002      	movs	r2, r0
 8008b84:	000b      	movs	r3, r1
 8008b86:	4905      	ldr	r1, [pc, #20]	; (8008b9c <incrementPIDControl+0xc4>)
 8008b88:	0008      	movs	r0, r1
 8008b8a:	f000 ffa9 	bl	8009ae0 <iprintf>
    return (float)pid->ActualValue; // return the expected value after PID control calculation
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	685b      	ldr	r3, [r3, #4]
}
 8008b92:	1c18      	adds	r0, r3, #0
 8008b94:	46bd      	mov	sp, r7
 8008b96:	b002      	add	sp, #8
 8008b98:	bdb0      	pop	{r4, r5, r7, pc}
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	0800bf9c 	.word	0x0800bf9c

08008ba0 <dcMotorInit>:
    gMotorData.state = MOTOR_STATE_START;
}

// founction to init the motor
void dcMotorInit(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
    gencodeSpeed.encode_now = 0;
 8008ba4:	4b1c      	ldr	r3, [pc, #112]	; (8008c18 <dcMotorInit+0x78>)
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	605a      	str	r2, [r3, #4]
    gencodeSpeed.encode_old = 0;
 8008baa:	4b1b      	ldr	r3, [pc, #108]	; (8008c18 <dcMotorInit+0x78>)
 8008bac:	2200      	movs	r2, #0
 8008bae:	601a      	str	r2, [r3, #0]
    gencodeSpeed.speed = 0;
 8008bb0:	4b19      	ldr	r3, [pc, #100]	; (8008c18 <dcMotorInit+0x78>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	609a      	str	r2, [r3, #8]
    gMotorData.state = MOTOR_STATE_STOP;
 8008bb6:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <dcMotorInit+0x7c>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	701a      	strb	r2, [r3, #0]
    gMotorData.direction = 1;
 8008bbc:	4b17      	ldr	r3, [pc, #92]	; (8008c1c <dcMotorInit+0x7c>)
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	705a      	strb	r2, [r3, #1]
    gMotorData.current = 0;
 8008bc2:	4b16      	ldr	r3, [pc, #88]	; (8008c1c <dcMotorInit+0x7c>)
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	605a      	str	r2, [r3, #4]
    gMotorData.voltage = 0;
 8008bc8:	4b14      	ldr	r3, [pc, #80]	; (8008c1c <dcMotorInit+0x7c>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	609a      	str	r2, [r3, #8]
    gMotorData.speed = 0;
 8008bce:	4b13      	ldr	r3, [pc, #76]	; (8008c1c <dcMotorInit+0x7c>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	60da      	str	r2, [r3, #12]
    gMotorData.motorPWM = 0;
 8008bd4:	4b11      	ldr	r3, [pc, #68]	; (8008c1c <dcMotorInit+0x7c>)
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	611a      	str	r2, [r3, #16]
    gencodeSpeed2.encode_now = 0;
 8008bda:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <dcMotorInit+0x80>)
 8008bdc:	2200      	movs	r2, #0
 8008bde:	605a      	str	r2, [r3, #4]
    gencodeSpeed2.encode_old = 0;
 8008be0:	4b0f      	ldr	r3, [pc, #60]	; (8008c20 <dcMotorInit+0x80>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
    gencodeSpeed2.speed = 0;
 8008be6:	4b0e      	ldr	r3, [pc, #56]	; (8008c20 <dcMotorInit+0x80>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	609a      	str	r2, [r3, #8]
    gMotorData2.state = MOTOR_STATE_STOP;
 8008bec:	4b0d      	ldr	r3, [pc, #52]	; (8008c24 <dcMotorInit+0x84>)
 8008bee:	2200      	movs	r2, #0
 8008bf0:	701a      	strb	r2, [r3, #0]
    gMotorData2.direction = 1;
 8008bf2:	4b0c      	ldr	r3, [pc, #48]	; (8008c24 <dcMotorInit+0x84>)
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	705a      	strb	r2, [r3, #1]
    gMotorData2.current = 0;
 8008bf8:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <dcMotorInit+0x84>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	605a      	str	r2, [r3, #4]
    gMotorData2.voltage = 0;
 8008bfe:	4b09      	ldr	r3, [pc, #36]	; (8008c24 <dcMotorInit+0x84>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	609a      	str	r2, [r3, #8]
    gMotorData2.speed = 0;
 8008c04:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <dcMotorInit+0x84>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	60da      	str	r2, [r3, #12]
    gMotorData2.motorPWM = 0;
 8008c0a:	4b06      	ldr	r3, [pc, #24]	; (8008c24 <dcMotorInit+0x84>)
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	611a      	str	r2, [r3, #16]
}
 8008c10:	46c0      	nop			; (mov r8, r8)
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	20000518 	.word	0x20000518
 8008c1c:	20000530 	.word	0x20000530
 8008c20:	20000524 	.word	0x20000524
 8008c24:	20000544 	.word	0x20000544

08008c28 <speedCompute>:
float speedArray2[10] = {0.0};

int32_t speedArrayFilterIndex = 0;
int32_t speedArrayFilterIndex2 = 0;
void speedCompute(int32_t encode_now, uint8_t computePerms)
{
 8008c28:	b5b0      	push	{r4, r5, r7, lr}
 8008c2a:	b086      	sub	sp, #24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	000a      	movs	r2, r1
 8008c32:	1cfb      	adds	r3, r7, #3
 8008c34:	701a      	strb	r2, [r3, #0]
    if (speedComputeCount == computePerms)
 8008c36:	1cfb      	adds	r3, r7, #3
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	4b63      	ldr	r3, [pc, #396]	; (8008dc8 <speedCompute+0x1a0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d000      	beq.n	8008c44 <speedCompute+0x1c>
 8008c42:	e0b8      	b.n	8008db6 <speedCompute+0x18e>
    {
        gencodeSpeed.encode_now = encode_now;
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	4b61      	ldr	r3, [pc, #388]	; (8008dcc <speedCompute+0x1a4>)
 8008c48:	605a      	str	r2, [r3, #4]
   //     printf("now:%d\r\n",gencodeSpeed.encode_now);
  //      printf("gencodeSpeed.encode_old:%d\r\n",gencodeSpeed.encode_old);
        gencodeSpeed.speed = (encode_now - gencodeSpeed.encode_old);
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	4b5f      	ldr	r3, [pc, #380]	; (8008dcc <speedCompute+0x1a4>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	0018      	movs	r0, r3
 8008c54:	f7f8 fb08 	bl	8001268 <__aeabi_ui2f>
 8008c58:	1c02      	adds	r2, r0, #0
 8008c5a:	4b5c      	ldr	r3, [pc, #368]	; (8008dcc <speedCompute+0x1a4>)
 8008c5c:	609a      	str	r2, [r3, #8]
    //    printf("avant:%f\r\n", gMotorData.speed);
      //  printf("123\n");
//SPEED_COMPUTE_PER_S /  1s
        //calculte speed motor (tour/minute) : g_encode.speed * ((1000 / 100ms) second )/44/20  maxspeed 31.2rad/s（300*2pi/60）
       speedArray[speedArrayFilterIndex++] = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S /computePerms ) / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND);//*RPM2RADGEAR_RATIO
 8008c5e:	4b5b      	ldr	r3, [pc, #364]	; (8008dcc <speedCompute+0x1a4>)
 8008c60:	689c      	ldr	r4, [r3, #8]
 8008c62:	1cfb      	adds	r3, r7, #3
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	0019      	movs	r1, r3
 8008c68:	200a      	movs	r0, #10
 8008c6a:	f7f7 faef 	bl	800024c <__divsi3>
 8008c6e:	0003      	movs	r3, r0
 8008c70:	0018      	movs	r0, r3
 8008c72:	f7f8 faa7 	bl	80011c4 <__aeabi_i2f>
 8008c76:	1c03      	adds	r3, r0, #0
 8008c78:	1c19      	adds	r1, r3, #0
 8008c7a:	1c20      	adds	r0, r4, #0
 8008c7c:	f7f7 ffb4 	bl	8000be8 <__aeabi_fmul>
 8008c80:	1c03      	adds	r3, r0, #0
 8008c82:	2181      	movs	r1, #129	; 0x81
 8008c84:	05c9      	lsls	r1, r1, #23
 8008c86:	1c18      	adds	r0, r3, #0
 8008c88:	f7f7 fde4 	bl	8000854 <__aeabi_fdiv>
 8008c8c:	1c03      	adds	r3, r0, #0
 8008c8e:	1c18      	adds	r0, r3, #0
 8008c90:	4b4f      	ldr	r3, [pc, #316]	; (8008dd0 <speedCompute+0x1a8>)
 8008c92:	681c      	ldr	r4, [r3, #0]
 8008c94:	1c62      	adds	r2, r4, #1
 8008c96:	4b4e      	ldr	r3, [pc, #312]	; (8008dd0 <speedCompute+0x1a8>)
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	494e      	ldr	r1, [pc, #312]	; (8008dd4 <speedCompute+0x1ac>)
 8008c9c:	f7f7 fdda 	bl	8000854 <__aeabi_fdiv>
 8008ca0:	1c03      	adds	r3, r0, #0
 8008ca2:	1c19      	adds	r1, r3, #0
 8008ca4:	4b4c      	ldr	r3, [pc, #304]	; (8008dd8 <speedCompute+0x1b0>)
 8008ca6:	00a2      	lsls	r2, r4, #2
 8008ca8:	50d1      	str	r1, [r2, r3]
  //     gMotorData.speed = (float)(gencodeSpeed.speed * (SPEED_COMPUTE_PER_S / computePerms ) / ENCODER_MODE_DIVISION / ENCODER_COUNT_PER_ROUND/GEAR_RATIO);//*RPM2RAD
      //  printf("speedcompute:%f\r\n", gMotorData.speed);  //gMotorData.speed
        gencodeSpeed.encode_old = gencodeSpeed.encode_now;
 8008caa:	4b48      	ldr	r3, [pc, #288]	; (8008dcc <speedCompute+0x1a4>)
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	4b47      	ldr	r3, [pc, #284]	; (8008dcc <speedCompute+0x1a4>)
 8008cb0:	601a      	str	r2, [r3, #0]
       //  after 10 times of speed calculation, filter the speed data
        if (speedArrayFilterIndex == 10)
 8008cb2:	4b47      	ldr	r3, [pc, #284]	; (8008dd0 <speedCompute+0x1a8>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b0a      	cmp	r3, #10
 8008cb8:	d000      	beq.n	8008cbc <speedCompute+0x94>
 8008cba:	e079      	b.n	8008db0 <speedCompute+0x188>
        {
            // bubble sort
            float temp = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	617b      	str	r3, [r7, #20]
            for (int i = 0; i < 10; i++)
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	613b      	str	r3, [r7, #16]
 8008cc4:	e030      	b.n	8008d28 <speedCompute+0x100>
            {
                for (int j = 0; j < 10 - i - 1; j++)
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	e024      	b.n	8008d16 <speedCompute+0xee>
                {
                    if (speedArray[j] > speedArray[j + 1])
 8008ccc:	4b42      	ldr	r3, [pc, #264]	; (8008dd8 <speedCompute+0x1b0>)
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	0092      	lsls	r2, r2, #2
 8008cd2:	58d0      	ldr	r0, [r2, r3]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	4b3f      	ldr	r3, [pc, #252]	; (8008dd8 <speedCompute+0x1b0>)
 8008cda:	0092      	lsls	r2, r2, #2
 8008cdc:	58d3      	ldr	r3, [r2, r3]
 8008cde:	1c19      	adds	r1, r3, #0
 8008ce0:	f7f7 fc04 	bl	80004ec <__aeabi_fcmpgt>
 8008ce4:	1e03      	subs	r3, r0, #0
 8008ce6:	d013      	beq.n	8008d10 <speedCompute+0xe8>
                    {
                        temp = speedArray[j];
 8008ce8:	4b3b      	ldr	r3, [pc, #236]	; (8008dd8 <speedCompute+0x1b0>)
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	0092      	lsls	r2, r2, #2
 8008cee:	58d3      	ldr	r3, [r2, r3]
 8008cf0:	617b      	str	r3, [r7, #20]
                        speedArray[j] = speedArray[j + 1];
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	4b38      	ldr	r3, [pc, #224]	; (8008dd8 <speedCompute+0x1b0>)
 8008cf8:	0092      	lsls	r2, r2, #2
 8008cfa:	58d1      	ldr	r1, [r2, r3]
 8008cfc:	4b36      	ldr	r3, [pc, #216]	; (8008dd8 <speedCompute+0x1b0>)
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	0092      	lsls	r2, r2, #2
 8008d02:	50d1      	str	r1, [r2, r3]
                        speedArray[j + 1] = temp;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	4b33      	ldr	r3, [pc, #204]	; (8008dd8 <speedCompute+0x1b0>)
 8008d0a:	0092      	lsls	r2, r2, #2
 8008d0c:	6979      	ldr	r1, [r7, #20]
 8008d0e:	50d1      	str	r1, [r2, r3]
                for (int j = 0; j < 10 - i - 1; j++)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	3301      	adds	r3, #1
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2209      	movs	r2, #9
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	dbd4      	blt.n	8008ccc <speedCompute+0xa4>
            for (int i = 0; i < 10; i++)
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	3301      	adds	r3, #1
 8008d26:	613b      	str	r3, [r7, #16]
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	2b09      	cmp	r3, #9
 8008d2c:	ddcb      	ble.n	8008cc6 <speedCompute+0x9e>
                    }
                }
            }

            temp = 0.0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	617b      	str	r3, [r7, #20]
            // using the middle 6 data to calculate the average value
            for (int i = 2; i < 8; i++)
 8008d32:	2302      	movs	r3, #2
 8008d34:	60bb      	str	r3, [r7, #8]
 8008d36:	e00c      	b.n	8008d52 <speedCompute+0x12a>
            {
                temp += speedArray[i];
 8008d38:	4b27      	ldr	r3, [pc, #156]	; (8008dd8 <speedCompute+0x1b0>)
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	0092      	lsls	r2, r2, #2
 8008d3e:	58d3      	ldr	r3, [r2, r3]
 8008d40:	1c19      	adds	r1, r3, #0
 8008d42:	6978      	ldr	r0, [r7, #20]
 8008d44:	f7f7 fbe6 	bl	8000514 <__aeabi_fadd>
 8008d48:	1c03      	adds	r3, r0, #0
 8008d4a:	617b      	str	r3, [r7, #20]
            for (int i = 2; i < 8; i++)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	3301      	adds	r3, #1
 8008d50:	60bb      	str	r3, [r7, #8]
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	2b07      	cmp	r3, #7
 8008d56:	ddef      	ble.n	8008d38 <speedCompute+0x110>
            }
            // calculate the average value
            temp = temp / 6;
 8008d58:	4920      	ldr	r1, [pc, #128]	; (8008ddc <speedCompute+0x1b4>)
 8008d5a:	6978      	ldr	r0, [r7, #20]
 8008d5c:	f7f7 fd7a 	bl	8000854 <__aeabi_fdiv>
 8008d60:	1c03      	adds	r3, r0, #0
 8008d62:	617b      	str	r3, [r7, #20]
            // low pass filter
            // Y(n)= qX(n) + (1-q)Y(n-1)
            // X(n) is the current input, Y(n) is the current output, Y(n-1) is the previous output, and q is the filter factor.
            // The larger the q, the stronger the filtering effect, but the slower the response.
            gMotorData.speed = (float)((double)temp * 0.5 + (double)gMotorData.speed * 0.5);
 8008d64:	6978      	ldr	r0, [r7, #20]
 8008d66:	f7fa f90f 	bl	8002f88 <__aeabi_f2d>
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4b1c      	ldr	r3, [pc, #112]	; (8008de0 <speedCompute+0x1b8>)
 8008d6e:	f7f9 fa1d 	bl	80021ac <__aeabi_dmul>
 8008d72:	0002      	movs	r2, r0
 8008d74:	000b      	movs	r3, r1
 8008d76:	0014      	movs	r4, r2
 8008d78:	001d      	movs	r5, r3
 8008d7a:	4b1a      	ldr	r3, [pc, #104]	; (8008de4 <speedCompute+0x1bc>)
 8008d7c:	68db      	ldr	r3, [r3, #12]
 8008d7e:	1c18      	adds	r0, r3, #0
 8008d80:	f7fa f902 	bl	8002f88 <__aeabi_f2d>
 8008d84:	2200      	movs	r2, #0
 8008d86:	4b16      	ldr	r3, [pc, #88]	; (8008de0 <speedCompute+0x1b8>)
 8008d88:	f7f9 fa10 	bl	80021ac <__aeabi_dmul>
 8008d8c:	0002      	movs	r2, r0
 8008d8e:	000b      	movs	r3, r1
 8008d90:	0020      	movs	r0, r4
 8008d92:	0029      	movs	r1, r5
 8008d94:	f7f8 fab0 	bl	80012f8 <__aeabi_dadd>
 8008d98:	0002      	movs	r2, r0
 8008d9a:	000b      	movs	r3, r1
 8008d9c:	0010      	movs	r0, r2
 8008d9e:	0019      	movs	r1, r3
 8008da0:	f7fa f93a 	bl	8003018 <__aeabi_d2f>
 8008da4:	1c02      	adds	r2, r0, #0
 8008da6:	4b0f      	ldr	r3, [pc, #60]	; (8008de4 <speedCompute+0x1bc>)
 8008da8:	60da      	str	r2, [r3, #12]

            speedArrayFilterIndex = 0;
 8008daa:	4b09      	ldr	r3, [pc, #36]	; (8008dd0 <speedCompute+0x1a8>)
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
        }
        speedComputeCount = 0;
 8008db0:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <speedCompute+0x1a0>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	601a      	str	r2, [r3, #0]
    }
    speedComputeCount++;
 8008db6:	4b04      	ldr	r3, [pc, #16]	; (8008dc8 <speedCompute+0x1a0>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	1c5a      	adds	r2, r3, #1
 8008dbc:	4b02      	ldr	r3, [pc, #8]	; (8008dc8 <speedCompute+0x1a0>)
 8008dbe:	601a      	str	r2, [r3, #0]
}
 8008dc0:	46c0      	nop			; (mov r8, r8)
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	b006      	add	sp, #24
 8008dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8008dc8:	2000055c 	.word	0x2000055c
 8008dcc:	20000518 	.word	0x20000518
 8008dd0:	20000588 	.word	0x20000588
 8008dd4:	41300000 	.word	0x41300000
 8008dd8:	20000560 	.word	0x20000560
 8008ddc:	40c00000 	.word	0x40c00000
 8008de0:	3fe00000 	.word	0x3fe00000
 8008de4:	20000530 	.word	0x20000530

08008de8 <HAL_TIM_PeriodElapsedCallback>:
}

//pc6 pc7 timer3  motor 1
//timer1 motor2
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)   //encooder compter  motor 1
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a37      	ldr	r2, [pc, #220]	; (8008ed4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d114      	bne.n	8008e24 <HAL_TIM_PeriodElapsedCallback+0x3c>
    {
        /* Determine the current counter counting direction */
        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	2210      	movs	r2, #16
 8008e02:	4013      	ands	r3, r2
 8008e04:	2b10      	cmp	r3, #16
 8008e06:	d106      	bne.n	8008e16 <HAL_TIM_PeriodElapsedCallback+0x2e>
            /* underflow, count down */
            Encoder_Overflow_Count--;
 8008e08:	4b33      	ldr	r3, [pc, #204]	; (8008ed8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8008e0a:	881b      	ldrh	r3, [r3, #0]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	4b31      	ldr	r3, [pc, #196]	; (8008ed8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8008e12:	801a      	strh	r2, [r3, #0]
         //  motor_pwm_set( changeSpeedToPWM(gMotorData.motorPWM));
         //motor_pwm_set(gMotorData.motorPWM);
         // motor_pwm_set(gMotorData2.motorPWM);
        }
    }
}
 8008e14:	e05a      	b.n	8008ecc <HAL_TIM_PeriodElapsedCallback+0xe4>
            Encoder_Overflow_Count++;
 8008e16:	4b30      	ldr	r3, [pc, #192]	; (8008ed8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8008e18:	881b      	ldrh	r3, [r3, #0]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	4b2e      	ldr	r3, [pc, #184]	; (8008ed8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8008e20:	801a      	strh	r2, [r3, #0]
}
 8008e22:	e053      	b.n	8008ecc <HAL_TIM_PeriodElapsedCallback+0xe4>
    else if (htim->Instance == TIM7)   //every 100ms call the interruption for calculte PID
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a2c      	ldr	r2, [pc, #176]	; (8008edc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d14e      	bne.n	8008ecc <HAL_TIM_PeriodElapsedCallback+0xe4>
        uint32_t encoderValueNow = getEncoderValue();
 8008e2e:	f000 f865 	bl	8008efc <getEncoderValue>
 8008e32:	0003      	movs	r3, r0
 8008e34:	60fb      	str	r3, [r7, #12]
        speedCompute(encoderValueNow, 1);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2101      	movs	r1, #1
 8008e3a:	0018      	movs	r0, r3
 8008e3c:	f7ff fef4 	bl	8008c28 <speedCompute>
        printf("speedcompute:%f\r\n", gMotorData.speed);  //gMotorData.speed*/
 8008e40:	4b27      	ldr	r3, [pc, #156]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	1c18      	adds	r0, r3, #0
 8008e46:	f7fa f89f 	bl	8002f88 <__aeabi_f2d>
 8008e4a:	0002      	movs	r2, r0
 8008e4c:	000b      	movs	r3, r1
 8008e4e:	4925      	ldr	r1, [pc, #148]	; (8008ee4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8008e50:	0008      	movs	r0, r1
 8008e52:	f000 fe45 	bl	8009ae0 <iprintf>
        if (gMotorData.state == MOTOR_STATE_START)  //MOTOR_STATE_START call in setSpeed
 8008e56:	4b22      	ldr	r3, [pc, #136]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d136      	bne.n	8008ecc <HAL_TIM_PeriodElapsedCallback+0xe4>
            gMotorData.motorPWM = incrementPIDControl(&gSpeedPID, gMotorData.speed); //gMotorData.speed is set in speedCompute
 8008e5e:	4b20      	ldr	r3, [pc, #128]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	4b21      	ldr	r3, [pc, #132]	; (8008ee8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8008e64:	1c11      	adds	r1, r2, #0
 8008e66:	0018      	movs	r0, r3
 8008e68:	f7ff fe36 	bl	8008ad8 <incrementPIDControl>
 8008e6c:	1c02      	adds	r2, r0, #0
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008e70:	611a      	str	r2, [r3, #16]
            printf("gMotorData.speed is： %f\r\n ",gMotorData.motorPWM);
 8008e72:	4b1b      	ldr	r3, [pc, #108]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	1c18      	adds	r0, r3, #0
 8008e78:	f7fa f886 	bl	8002f88 <__aeabi_f2d>
 8008e7c:	0002      	movs	r2, r0
 8008e7e:	000b      	movs	r3, r1
 8008e80:	491a      	ldr	r1, [pc, #104]	; (8008eec <HAL_TIM_PeriodElapsedCallback+0x104>)
 8008e82:	0008      	movs	r0, r1
 8008e84:	f000 fe2c 	bl	8009ae0 <iprintf>
            if (gMotorData.motorPWM >= 2560)                     /* ÏÞËÙ */
 8008e88:	4b15      	ldr	r3, [pc, #84]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	4918      	ldr	r1, [pc, #96]	; (8008ef0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8008e8e:	1c18      	adds	r0, r3, #0
 8008e90:	f7f7 fb36 	bl	8000500 <__aeabi_fcmpge>
 8008e94:	1e03      	subs	r3, r0, #0
 8008e96:	d003      	beq.n	8008ea0 <HAL_TIM_PeriodElapsedCallback+0xb8>
            	gMotorData.motorPWM = 2560;
 8008e98:	4b11      	ldr	r3, [pc, #68]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008e9a:	4a15      	ldr	r2, [pc, #84]	; (8008ef0 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8008e9c:	611a      	str	r2, [r3, #16]
 8008e9e:	e00a      	b.n	8008eb6 <HAL_TIM_PeriodElapsedCallback+0xce>
            else if (gMotorData.motorPWM <= -2560)
 8008ea0:	4b0f      	ldr	r3, [pc, #60]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	4913      	ldr	r1, [pc, #76]	; (8008ef4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8008ea6:	1c18      	adds	r0, r3, #0
 8008ea8:	f7f7 fb16 	bl	80004d8 <__aeabi_fcmple>
 8008eac:	1e03      	subs	r3, r0, #0
 8008eae:	d002      	beq.n	8008eb6 <HAL_TIM_PeriodElapsedCallback+0xce>
            	gMotorData.motorPWM = -2560;
 8008eb0:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008eb2:	4a10      	ldr	r2, [pc, #64]	; (8008ef4 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8008eb4:	611a      	str	r2, [r3, #16]
            printf("gMotorData.speed limite is： %f\r\n ",gMotorData.motorPWM);
 8008eb6:	4b0a      	ldr	r3, [pc, #40]	; (8008ee0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8008eb8:	691b      	ldr	r3, [r3, #16]
 8008eba:	1c18      	adds	r0, r3, #0
 8008ebc:	f7fa f864 	bl	8002f88 <__aeabi_f2d>
 8008ec0:	0002      	movs	r2, r0
 8008ec2:	000b      	movs	r3, r1
 8008ec4:	490c      	ldr	r1, [pc, #48]	; (8008ef8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8008ec6:	0008      	movs	r0, r1
 8008ec8:	f000 fe0a 	bl	8009ae0 <iprintf>
}
 8008ecc:	46c0      	nop			; (mov r8, r8)
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	b004      	add	sp, #16
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40000400 	.word	0x40000400
 8008ed8:	20000558 	.word	0x20000558
 8008edc:	40001400 	.word	0x40001400
 8008ee0:	20000530 	.word	0x20000530
 8008ee4:	0800bfbc 	.word	0x0800bfbc
 8008ee8:	200004d0 	.word	0x200004d0
 8008eec:	0800bfd0 	.word	0x0800bfd0
 8008ef0:	45200000 	.word	0x45200000
 8008ef4:	c5200000 	.word	0xc5200000
 8008ef8:	0800bff0 	.word	0x0800bff0

08008efc <getEncoderValue>:
 * @brief Get the Current Encoder Count
 *
 * @return uint16_t The current encoder count
 */
uint32_t getEncoderValue(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
    uint32_t Encoder_Count = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	607b      	str	r3, [r7, #4]
    /* Get the current counter value */
    Encoder_Count = __HAL_TIM_GET_COUNTER(&htim3); //motor 1
 8008f06:	4b08      	ldr	r3, [pc, #32]	; (8008f28 <getEncoderValue+0x2c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	607b      	str	r3, [r7, #4]
   // printf("Encoder_Count:%d\r\n",Encoder_Count);
    /* Add the overflow count to the counter value */
    Encoder_Count += Encoder_Overflow_Count * 65536;
 8008f0e:	4b07      	ldr	r3, [pc, #28]	; (8008f2c <getEncoderValue+0x30>)
 8008f10:	881b      	ldrh	r3, [r3, #0]
 8008f12:	041b      	lsls	r3, r3, #16
 8008f14:	001a      	movs	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	189b      	adds	r3, r3, r2
 8008f1a:	607b      	str	r3, [r7, #4]
    return Encoder_Count;
 8008f1c:	687b      	ldr	r3, [r7, #4]
}
 8008f1e:	0018      	movs	r0, r3
 8008f20:	46bd      	mov	sp, r7
 8008f22:	b002      	add	sp, #8
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	46c0      	nop			; (mov r8, r8)
 8008f28:	200002bc 	.word	0x200002bc
 8008f2c:	20000558 	.word	0x20000558

08008f30 <Shell_Init>:
int argc = 0;
char *token;
int newCmdReady = 0;

void Shell_Init(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
    memset(argv, 0, MAX_ARGS * sizeof(char *));
 8008f34:	4b1a      	ldr	r3, [pc, #104]	; (8008fa0 <Shell_Init+0x70>)
 8008f36:	2224      	movs	r2, #36	; 0x24
 8008f38:	2100      	movs	r1, #0
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	f000 ff06 	bl	8009d4c <memset>
    memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 8008f40:	4b18      	ldr	r3, [pc, #96]	; (8008fa4 <Shell_Init+0x74>)
 8008f42:	2240      	movs	r2, #64	; 0x40
 8008f44:	2100      	movs	r1, #0
 8008f46:	0018      	movs	r0, r3
 8008f48:	f000 ff00 	bl	8009d4c <memset>
 8008f4c:	4b16      	ldr	r3, [pc, #88]	; (8008fa8 <Shell_Init+0x78>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	701a      	strb	r2, [r3, #0]
    memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
    memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 8008f52:	4b16      	ldr	r3, [pc, #88]	; (8008fac <Shell_Init+0x7c>)
 8008f54:	2240      	movs	r2, #64	; 0x40
 8008f56:	2100      	movs	r1, #0
 8008f58:	0018      	movs	r0, r3
 8008f5a:	f000 fef7 	bl	8009d4c <memset>

    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8008f5e:	4912      	ldr	r1, [pc, #72]	; (8008fa8 <Shell_Init+0x78>)
 8008f60:	4b13      	ldr	r3, [pc, #76]	; (8008fb0 <Shell_Init+0x80>)
 8008f62:	2201      	movs	r2, #1
 8008f64:	0018      	movs	r0, r3
 8008f66:	f7fd ff0b 	bl	8006d80 <HAL_UART_Receive_IT>
    HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8008f6a:	4b12      	ldr	r3, [pc, #72]	; (8008fb4 <Shell_Init+0x84>)
 8008f6c:	0018      	movs	r0, r3
 8008f6e:	f7f7 f8c7 	bl	8000100 <strlen>
 8008f72:	0003      	movs	r3, r0
 8008f74:	b29a      	uxth	r2, r3
 8008f76:	2301      	movs	r3, #1
 8008f78:	425b      	negs	r3, r3
 8008f7a:	490e      	ldr	r1, [pc, #56]	; (8008fb4 <Shell_Init+0x84>)
 8008f7c:	480c      	ldr	r0, [pc, #48]	; (8008fb0 <Shell_Init+0x80>)
 8008f7e:	f7fd fe63 	bl	8006c48 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8008f82:	4b0d      	ldr	r3, [pc, #52]	; (8008fb8 <Shell_Init+0x88>)
 8008f84:	0018      	movs	r0, r3
 8008f86:	f7f7 f8bb 	bl	8000100 <strlen>
 8008f8a:	0003      	movs	r3, r0
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	2301      	movs	r3, #1
 8008f90:	425b      	negs	r3, r3
 8008f92:	4909      	ldr	r1, [pc, #36]	; (8008fb8 <Shell_Init+0x88>)
 8008f94:	4806      	ldr	r0, [pc, #24]	; (8008fb0 <Shell_Init+0x80>)
 8008f96:	f7fd fe57 	bl	8006c48 <HAL_UART_Transmit>
}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	20000618 	.word	0x20000618
 8008fa4:	20000594 	.word	0x20000594
 8008fa8:	20000590 	.word	0x20000590
 8008fac:	200005d8 	.word	0x200005d8
 8008fb0:	20000438 	.word	0x20000438
 8008fb4:	20000028 	.word	0x20000028
 8008fb8:	2000000c 	.word	0x2000000c

08008fbc <HAL_UART_RxCpltCallback>:
        memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
    }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
    // if receied counter is more than CMD_BUFFER_SIZE, reset counter and cmdBuffer, and print error message
    // else increment counter and continue
    if (uartRxCounter > CMD_BUFFER_SIZE)
 8008fc4:	4b1e      	ldr	r3, [pc, #120]	; (8009040 <HAL_UART_RxCpltCallback+0x84>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	2b40      	cmp	r3, #64	; 0x40
 8008fca:	d919      	bls.n	8009000 <HAL_UART_RxCpltCallback+0x44>
    {
        uartRxCounter = 0;
 8008fcc:	4b1c      	ldr	r3, [pc, #112]	; (8009040 <HAL_UART_RxCpltCallback+0x84>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	701a      	strb	r2, [r3, #0]
        memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(uint8_t));
 8008fd2:	4b1c      	ldr	r3, [pc, #112]	; (8009044 <HAL_UART_RxCpltCallback+0x88>)
 8008fd4:	2240      	movs	r2, #64	; 0x40
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	0018      	movs	r0, r3
 8008fda:	f000 feb7 	bl	8009d4c <memset>
        int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Command too long\r\n");
 8008fde:	4a1a      	ldr	r2, [pc, #104]	; (8009048 <HAL_UART_RxCpltCallback+0x8c>)
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	; (800904c <HAL_UART_RxCpltCallback+0x90>)
 8008fe2:	2140      	movs	r1, #64	; 0x40
 8008fe4:	0018      	movs	r0, r3
 8008fe6:	f000 fd8b 	bl	8009b00 <sniprintf>
 8008fea:	0003      	movs	r3, r0
 8008fec:	60fb      	str	r3, [r7, #12]
        HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	425b      	negs	r3, r3
 8008ff6:	4915      	ldr	r1, [pc, #84]	; (800904c <HAL_UART_RxCpltCallback+0x90>)
 8008ff8:	4815      	ldr	r0, [pc, #84]	; (8009050 <HAL_UART_RxCpltCallback+0x94>)
 8008ffa:	f7fd fe25 	bl	8006c48 <HAL_UART_Transmit>
 8008ffe:	e00a      	b.n	8009016 <HAL_UART_RxCpltCallback+0x5a>
    }
    else
    {
        cmdBuffer[uartRxCounter++] = (char)uartRxBuffer[0];
 8009000:	4b0f      	ldr	r3, [pc, #60]	; (8009040 <HAL_UART_RxCpltCallback+0x84>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	b2d1      	uxtb	r1, r2
 8009008:	4a0d      	ldr	r2, [pc, #52]	; (8009040 <HAL_UART_RxCpltCallback+0x84>)
 800900a:	7011      	strb	r1, [r2, #0]
 800900c:	001a      	movs	r2, r3
 800900e:	4b11      	ldr	r3, [pc, #68]	; (8009054 <HAL_UART_RxCpltCallback+0x98>)
 8009010:	7819      	ldrb	r1, [r3, #0]
 8009012:	4b0c      	ldr	r3, [pc, #48]	; (8009044 <HAL_UART_RxCpltCallback+0x88>)
 8009014:	5499      	strb	r1, [r3, r2]
    }
    // if received \n or \r, set uartRxReceived flag
    if (uartRxBuffer[0] == ASCII_CR || uartRxBuffer[0] == ASCII_LF)
 8009016:	4b0f      	ldr	r3, [pc, #60]	; (8009054 <HAL_UART_RxCpltCallback+0x98>)
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b0d      	cmp	r3, #13
 800901c:	d003      	beq.n	8009026 <HAL_UART_RxCpltCallback+0x6a>
 800901e:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <HAL_UART_RxCpltCallback+0x98>)
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b0a      	cmp	r3, #10
 8009024:	d102      	bne.n	800902c <HAL_UART_RxCpltCallback+0x70>
    {
        uartRxReceived = 1;
 8009026:	4b0c      	ldr	r3, [pc, #48]	; (8009058 <HAL_UART_RxCpltCallback+0x9c>)
 8009028:	2201      	movs	r2, #1
 800902a:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800902c:	4909      	ldr	r1, [pc, #36]	; (8009054 <HAL_UART_RxCpltCallback+0x98>)
 800902e:	4b08      	ldr	r3, [pc, #32]	; (8009050 <HAL_UART_RxCpltCallback+0x94>)
 8009030:	2201      	movs	r2, #1
 8009032:	0018      	movs	r0, r3
 8009034:	f7fd fea4 	bl	8006d80 <HAL_UART_Receive_IT>
}
 8009038:	46c0      	nop			; (mov r8, r8)
 800903a:	46bd      	mov	sp, r7
 800903c:	b004      	add	sp, #16
 800903e:	bd80      	pop	{r7, pc}
 8009040:	200005d4 	.word	0x200005d4
 8009044:	20000594 	.word	0x20000594
 8009048:	0800c098 	.word	0x0800c098
 800904c:	200005d8 	.word	0x200005d8
 8009050:	20000438 	.word	0x20000438
 8009054:	20000590 	.word	0x20000590
 8009058:	2000058c 	.word	0x2000058c

0800905c <__cvt>:
 800905c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800905e:	001e      	movs	r6, r3
 8009060:	2300      	movs	r3, #0
 8009062:	0014      	movs	r4, r2
 8009064:	b08b      	sub	sp, #44	; 0x2c
 8009066:	429e      	cmp	r6, r3
 8009068:	da04      	bge.n	8009074 <__cvt+0x18>
 800906a:	2180      	movs	r1, #128	; 0x80
 800906c:	0609      	lsls	r1, r1, #24
 800906e:	1873      	adds	r3, r6, r1
 8009070:	001e      	movs	r6, r3
 8009072:	232d      	movs	r3, #45	; 0x2d
 8009074:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009076:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009078:	7013      	strb	r3, [r2, #0]
 800907a:	2320      	movs	r3, #32
 800907c:	2203      	movs	r2, #3
 800907e:	439f      	bics	r7, r3
 8009080:	2f46      	cmp	r7, #70	; 0x46
 8009082:	d007      	beq.n	8009094 <__cvt+0x38>
 8009084:	003b      	movs	r3, r7
 8009086:	3b45      	subs	r3, #69	; 0x45
 8009088:	4259      	negs	r1, r3
 800908a:	414b      	adcs	r3, r1
 800908c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800908e:	3a01      	subs	r2, #1
 8009090:	18cb      	adds	r3, r1, r3
 8009092:	9310      	str	r3, [sp, #64]	; 0x40
 8009094:	ab09      	add	r3, sp, #36	; 0x24
 8009096:	9304      	str	r3, [sp, #16]
 8009098:	ab08      	add	r3, sp, #32
 800909a:	9303      	str	r3, [sp, #12]
 800909c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800909e:	9200      	str	r2, [sp, #0]
 80090a0:	9302      	str	r3, [sp, #8]
 80090a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090a4:	0022      	movs	r2, r4
 80090a6:	9301      	str	r3, [sp, #4]
 80090a8:	0033      	movs	r3, r6
 80090aa:	f000 ff99 	bl	8009fe0 <_dtoa_r>
 80090ae:	0005      	movs	r5, r0
 80090b0:	2f47      	cmp	r7, #71	; 0x47
 80090b2:	d102      	bne.n	80090ba <__cvt+0x5e>
 80090b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090b6:	07db      	lsls	r3, r3, #31
 80090b8:	d528      	bpl.n	800910c <__cvt+0xb0>
 80090ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090bc:	18eb      	adds	r3, r5, r3
 80090be:	9307      	str	r3, [sp, #28]
 80090c0:	2f46      	cmp	r7, #70	; 0x46
 80090c2:	d114      	bne.n	80090ee <__cvt+0x92>
 80090c4:	782b      	ldrb	r3, [r5, #0]
 80090c6:	2b30      	cmp	r3, #48	; 0x30
 80090c8:	d10c      	bne.n	80090e4 <__cvt+0x88>
 80090ca:	2200      	movs	r2, #0
 80090cc:	2300      	movs	r3, #0
 80090ce:	0020      	movs	r0, r4
 80090d0:	0031      	movs	r1, r6
 80090d2:	f7f7 f9b7 	bl	8000444 <__aeabi_dcmpeq>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d104      	bne.n	80090e4 <__cvt+0x88>
 80090da:	2301      	movs	r3, #1
 80090dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090de:	1a9b      	subs	r3, r3, r2
 80090e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090e2:	6013      	str	r3, [r2, #0]
 80090e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80090e6:	9a07      	ldr	r2, [sp, #28]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	18d3      	adds	r3, r2, r3
 80090ec:	9307      	str	r3, [sp, #28]
 80090ee:	2200      	movs	r2, #0
 80090f0:	2300      	movs	r3, #0
 80090f2:	0020      	movs	r0, r4
 80090f4:	0031      	movs	r1, r6
 80090f6:	f7f7 f9a5 	bl	8000444 <__aeabi_dcmpeq>
 80090fa:	2800      	cmp	r0, #0
 80090fc:	d001      	beq.n	8009102 <__cvt+0xa6>
 80090fe:	9b07      	ldr	r3, [sp, #28]
 8009100:	9309      	str	r3, [sp, #36]	; 0x24
 8009102:	2230      	movs	r2, #48	; 0x30
 8009104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009106:	9907      	ldr	r1, [sp, #28]
 8009108:	428b      	cmp	r3, r1
 800910a:	d306      	bcc.n	800911a <__cvt+0xbe>
 800910c:	0028      	movs	r0, r5
 800910e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009110:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009112:	1b5b      	subs	r3, r3, r5
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	b00b      	add	sp, #44	; 0x2c
 8009118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800911a:	1c59      	adds	r1, r3, #1
 800911c:	9109      	str	r1, [sp, #36]	; 0x24
 800911e:	701a      	strb	r2, [r3, #0]
 8009120:	e7f0      	b.n	8009104 <__cvt+0xa8>

08009122 <__exponent>:
 8009122:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009124:	1c83      	adds	r3, r0, #2
 8009126:	b087      	sub	sp, #28
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	0005      	movs	r5, r0
 800912c:	000c      	movs	r4, r1
 800912e:	232b      	movs	r3, #43	; 0x2b
 8009130:	7002      	strb	r2, [r0, #0]
 8009132:	2900      	cmp	r1, #0
 8009134:	da01      	bge.n	800913a <__exponent+0x18>
 8009136:	424c      	negs	r4, r1
 8009138:	3302      	adds	r3, #2
 800913a:	706b      	strb	r3, [r5, #1]
 800913c:	2c09      	cmp	r4, #9
 800913e:	dd2f      	ble.n	80091a0 <__exponent+0x7e>
 8009140:	270a      	movs	r7, #10
 8009142:	ab04      	add	r3, sp, #16
 8009144:	1dde      	adds	r6, r3, #7
 8009146:	0020      	movs	r0, r4
 8009148:	0039      	movs	r1, r7
 800914a:	9601      	str	r6, [sp, #4]
 800914c:	f7f7 f964 	bl	8000418 <__aeabi_idivmod>
 8009150:	3e01      	subs	r6, #1
 8009152:	3130      	adds	r1, #48	; 0x30
 8009154:	0020      	movs	r0, r4
 8009156:	7031      	strb	r1, [r6, #0]
 8009158:	0039      	movs	r1, r7
 800915a:	9402      	str	r4, [sp, #8]
 800915c:	f7f7 f876 	bl	800024c <__divsi3>
 8009160:	9b02      	ldr	r3, [sp, #8]
 8009162:	0004      	movs	r4, r0
 8009164:	2b63      	cmp	r3, #99	; 0x63
 8009166:	dcee      	bgt.n	8009146 <__exponent+0x24>
 8009168:	9b01      	ldr	r3, [sp, #4]
 800916a:	3430      	adds	r4, #48	; 0x30
 800916c:	1e9a      	subs	r2, r3, #2
 800916e:	0013      	movs	r3, r2
 8009170:	9903      	ldr	r1, [sp, #12]
 8009172:	7014      	strb	r4, [r2, #0]
 8009174:	a804      	add	r0, sp, #16
 8009176:	3007      	adds	r0, #7
 8009178:	4298      	cmp	r0, r3
 800917a:	d80c      	bhi.n	8009196 <__exponent+0x74>
 800917c:	2300      	movs	r3, #0
 800917e:	4282      	cmp	r2, r0
 8009180:	d804      	bhi.n	800918c <__exponent+0x6a>
 8009182:	aa04      	add	r2, sp, #16
 8009184:	3309      	adds	r3, #9
 8009186:	189b      	adds	r3, r3, r2
 8009188:	9a01      	ldr	r2, [sp, #4]
 800918a:	1a9b      	subs	r3, r3, r2
 800918c:	9a03      	ldr	r2, [sp, #12]
 800918e:	18d3      	adds	r3, r2, r3
 8009190:	1b58      	subs	r0, r3, r5
 8009192:	b007      	add	sp, #28
 8009194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009196:	7818      	ldrb	r0, [r3, #0]
 8009198:	3301      	adds	r3, #1
 800919a:	7008      	strb	r0, [r1, #0]
 800919c:	3101      	adds	r1, #1
 800919e:	e7e9      	b.n	8009174 <__exponent+0x52>
 80091a0:	2330      	movs	r3, #48	; 0x30
 80091a2:	3430      	adds	r4, #48	; 0x30
 80091a4:	70ab      	strb	r3, [r5, #2]
 80091a6:	70ec      	strb	r4, [r5, #3]
 80091a8:	1d2b      	adds	r3, r5, #4
 80091aa:	e7f1      	b.n	8009190 <__exponent+0x6e>

080091ac <_printf_float>:
 80091ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091ae:	b095      	sub	sp, #84	; 0x54
 80091b0:	000c      	movs	r4, r1
 80091b2:	9208      	str	r2, [sp, #32]
 80091b4:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80091b6:	9309      	str	r3, [sp, #36]	; 0x24
 80091b8:	0007      	movs	r7, r0
 80091ba:	f000 fdcf 	bl	8009d5c <_localeconv_r>
 80091be:	6803      	ldr	r3, [r0, #0]
 80091c0:	0018      	movs	r0, r3
 80091c2:	930c      	str	r3, [sp, #48]	; 0x30
 80091c4:	f7f6 ff9c 	bl	8000100 <strlen>
 80091c8:	2300      	movs	r3, #0
 80091ca:	9312      	str	r3, [sp, #72]	; 0x48
 80091cc:	7e23      	ldrb	r3, [r4, #24]
 80091ce:	2207      	movs	r2, #7
 80091d0:	930a      	str	r3, [sp, #40]	; 0x28
 80091d2:	6823      	ldr	r3, [r4, #0]
 80091d4:	900d      	str	r0, [sp, #52]	; 0x34
 80091d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80091d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80091da:	682b      	ldr	r3, [r5, #0]
 80091dc:	05c9      	lsls	r1, r1, #23
 80091de:	d547      	bpl.n	8009270 <_printf_float+0xc4>
 80091e0:	189b      	adds	r3, r3, r2
 80091e2:	4393      	bics	r3, r2
 80091e4:	001a      	movs	r2, r3
 80091e6:	3208      	adds	r2, #8
 80091e8:	602a      	str	r2, [r5, #0]
 80091ea:	681e      	ldr	r6, [r3, #0]
 80091ec:	685d      	ldr	r5, [r3, #4]
 80091ee:	0032      	movs	r2, r6
 80091f0:	002b      	movs	r3, r5
 80091f2:	64a2      	str	r2, [r4, #72]	; 0x48
 80091f4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80091f6:	2201      	movs	r2, #1
 80091f8:	006b      	lsls	r3, r5, #1
 80091fa:	085b      	lsrs	r3, r3, #1
 80091fc:	930e      	str	r3, [sp, #56]	; 0x38
 80091fe:	0030      	movs	r0, r6
 8009200:	4bab      	ldr	r3, [pc, #684]	; (80094b0 <_printf_float+0x304>)
 8009202:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009204:	4252      	negs	r2, r2
 8009206:	f7f9 fe15 	bl	8002e34 <__aeabi_dcmpun>
 800920a:	2800      	cmp	r0, #0
 800920c:	d132      	bne.n	8009274 <_printf_float+0xc8>
 800920e:	2201      	movs	r2, #1
 8009210:	0030      	movs	r0, r6
 8009212:	4ba7      	ldr	r3, [pc, #668]	; (80094b0 <_printf_float+0x304>)
 8009214:	990e      	ldr	r1, [sp, #56]	; 0x38
 8009216:	4252      	negs	r2, r2
 8009218:	f7f7 f924 	bl	8000464 <__aeabi_dcmple>
 800921c:	2800      	cmp	r0, #0
 800921e:	d129      	bne.n	8009274 <_printf_float+0xc8>
 8009220:	2200      	movs	r2, #0
 8009222:	2300      	movs	r3, #0
 8009224:	0030      	movs	r0, r6
 8009226:	0029      	movs	r1, r5
 8009228:	f7f7 f912 	bl	8000450 <__aeabi_dcmplt>
 800922c:	2800      	cmp	r0, #0
 800922e:	d003      	beq.n	8009238 <_printf_float+0x8c>
 8009230:	0023      	movs	r3, r4
 8009232:	222d      	movs	r2, #45	; 0x2d
 8009234:	3343      	adds	r3, #67	; 0x43
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800923a:	4d9e      	ldr	r5, [pc, #632]	; (80094b4 <_printf_float+0x308>)
 800923c:	2b47      	cmp	r3, #71	; 0x47
 800923e:	d900      	bls.n	8009242 <_printf_float+0x96>
 8009240:	4d9d      	ldr	r5, [pc, #628]	; (80094b8 <_printf_float+0x30c>)
 8009242:	2303      	movs	r3, #3
 8009244:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009246:	6123      	str	r3, [r4, #16]
 8009248:	3301      	adds	r3, #1
 800924a:	439a      	bics	r2, r3
 800924c:	2300      	movs	r3, #0
 800924e:	6022      	str	r2, [r4, #0]
 8009250:	930b      	str	r3, [sp, #44]	; 0x2c
 8009252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009254:	0021      	movs	r1, r4
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	0038      	movs	r0, r7
 800925a:	9b08      	ldr	r3, [sp, #32]
 800925c:	aa13      	add	r2, sp, #76	; 0x4c
 800925e:	f000 f9fb 	bl	8009658 <_printf_common>
 8009262:	3001      	adds	r0, #1
 8009264:	d000      	beq.n	8009268 <_printf_float+0xbc>
 8009266:	e0a3      	b.n	80093b0 <_printf_float+0x204>
 8009268:	2001      	movs	r0, #1
 800926a:	4240      	negs	r0, r0
 800926c:	b015      	add	sp, #84	; 0x54
 800926e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009270:	3307      	adds	r3, #7
 8009272:	e7b6      	b.n	80091e2 <_printf_float+0x36>
 8009274:	0032      	movs	r2, r6
 8009276:	002b      	movs	r3, r5
 8009278:	0030      	movs	r0, r6
 800927a:	0029      	movs	r1, r5
 800927c:	f7f9 fdda 	bl	8002e34 <__aeabi_dcmpun>
 8009280:	2800      	cmp	r0, #0
 8009282:	d00b      	beq.n	800929c <_printf_float+0xf0>
 8009284:	2d00      	cmp	r5, #0
 8009286:	da03      	bge.n	8009290 <_printf_float+0xe4>
 8009288:	0023      	movs	r3, r4
 800928a:	222d      	movs	r2, #45	; 0x2d
 800928c:	3343      	adds	r3, #67	; 0x43
 800928e:	701a      	strb	r2, [r3, #0]
 8009290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009292:	4d8a      	ldr	r5, [pc, #552]	; (80094bc <_printf_float+0x310>)
 8009294:	2b47      	cmp	r3, #71	; 0x47
 8009296:	d9d4      	bls.n	8009242 <_printf_float+0x96>
 8009298:	4d89      	ldr	r5, [pc, #548]	; (80094c0 <_printf_float+0x314>)
 800929a:	e7d2      	b.n	8009242 <_printf_float+0x96>
 800929c:	2220      	movs	r2, #32
 800929e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80092a0:	6863      	ldr	r3, [r4, #4]
 80092a2:	4391      	bics	r1, r2
 80092a4:	910e      	str	r1, [sp, #56]	; 0x38
 80092a6:	1c5a      	adds	r2, r3, #1
 80092a8:	d14a      	bne.n	8009340 <_printf_float+0x194>
 80092aa:	3307      	adds	r3, #7
 80092ac:	6063      	str	r3, [r4, #4]
 80092ae:	2380      	movs	r3, #128	; 0x80
 80092b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	4313      	orrs	r3, r2
 80092b6:	2200      	movs	r2, #0
 80092b8:	9206      	str	r2, [sp, #24]
 80092ba:	aa12      	add	r2, sp, #72	; 0x48
 80092bc:	9205      	str	r2, [sp, #20]
 80092be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092c0:	6023      	str	r3, [r4, #0]
 80092c2:	9204      	str	r2, [sp, #16]
 80092c4:	aa11      	add	r2, sp, #68	; 0x44
 80092c6:	9203      	str	r2, [sp, #12]
 80092c8:	2223      	movs	r2, #35	; 0x23
 80092ca:	a908      	add	r1, sp, #32
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	6863      	ldr	r3, [r4, #4]
 80092d0:	1852      	adds	r2, r2, r1
 80092d2:	9202      	str	r2, [sp, #8]
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	0032      	movs	r2, r6
 80092d8:	002b      	movs	r3, r5
 80092da:	0038      	movs	r0, r7
 80092dc:	f7ff febe 	bl	800905c <__cvt>
 80092e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092e2:	0005      	movs	r5, r0
 80092e4:	2b47      	cmp	r3, #71	; 0x47
 80092e6:	d109      	bne.n	80092fc <_printf_float+0x150>
 80092e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092ea:	1cda      	adds	r2, r3, #3
 80092ec:	db02      	blt.n	80092f4 <_printf_float+0x148>
 80092ee:	6862      	ldr	r2, [r4, #4]
 80092f0:	4293      	cmp	r3, r2
 80092f2:	dd49      	ble.n	8009388 <_printf_float+0x1dc>
 80092f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f6:	3b02      	subs	r3, #2
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	930a      	str	r3, [sp, #40]	; 0x28
 80092fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fe:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009300:	2b65      	cmp	r3, #101	; 0x65
 8009302:	d824      	bhi.n	800934e <_printf_float+0x1a2>
 8009304:	0020      	movs	r0, r4
 8009306:	001a      	movs	r2, r3
 8009308:	3901      	subs	r1, #1
 800930a:	3050      	adds	r0, #80	; 0x50
 800930c:	9111      	str	r1, [sp, #68]	; 0x44
 800930e:	f7ff ff08 	bl	8009122 <__exponent>
 8009312:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009314:	900b      	str	r0, [sp, #44]	; 0x2c
 8009316:	1813      	adds	r3, r2, r0
 8009318:	6123      	str	r3, [r4, #16]
 800931a:	2a01      	cmp	r2, #1
 800931c:	dc02      	bgt.n	8009324 <_printf_float+0x178>
 800931e:	6822      	ldr	r2, [r4, #0]
 8009320:	07d2      	lsls	r2, r2, #31
 8009322:	d501      	bpl.n	8009328 <_printf_float+0x17c>
 8009324:	3301      	adds	r3, #1
 8009326:	6123      	str	r3, [r4, #16]
 8009328:	2323      	movs	r3, #35	; 0x23
 800932a:	aa08      	add	r2, sp, #32
 800932c:	189b      	adds	r3, r3, r2
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d100      	bne.n	8009336 <_printf_float+0x18a>
 8009334:	e78d      	b.n	8009252 <_printf_float+0xa6>
 8009336:	0023      	movs	r3, r4
 8009338:	222d      	movs	r2, #45	; 0x2d
 800933a:	3343      	adds	r3, #67	; 0x43
 800933c:	701a      	strb	r2, [r3, #0]
 800933e:	e788      	b.n	8009252 <_printf_float+0xa6>
 8009340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009342:	2a47      	cmp	r2, #71	; 0x47
 8009344:	d1b3      	bne.n	80092ae <_printf_float+0x102>
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1b1      	bne.n	80092ae <_printf_float+0x102>
 800934a:	3301      	adds	r3, #1
 800934c:	e7ae      	b.n	80092ac <_printf_float+0x100>
 800934e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009350:	2b66      	cmp	r3, #102	; 0x66
 8009352:	d11b      	bne.n	800938c <_printf_float+0x1e0>
 8009354:	6863      	ldr	r3, [r4, #4]
 8009356:	2900      	cmp	r1, #0
 8009358:	dd09      	ble.n	800936e <_printf_float+0x1c2>
 800935a:	6121      	str	r1, [r4, #16]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d102      	bne.n	8009366 <_printf_float+0x1ba>
 8009360:	6822      	ldr	r2, [r4, #0]
 8009362:	07d2      	lsls	r2, r2, #31
 8009364:	d50b      	bpl.n	800937e <_printf_float+0x1d2>
 8009366:	3301      	adds	r3, #1
 8009368:	185b      	adds	r3, r3, r1
 800936a:	6123      	str	r3, [r4, #16]
 800936c:	e007      	b.n	800937e <_printf_float+0x1d2>
 800936e:	2b00      	cmp	r3, #0
 8009370:	d103      	bne.n	800937a <_printf_float+0x1ce>
 8009372:	2201      	movs	r2, #1
 8009374:	6821      	ldr	r1, [r4, #0]
 8009376:	4211      	tst	r1, r2
 8009378:	d000      	beq.n	800937c <_printf_float+0x1d0>
 800937a:	1c9a      	adds	r2, r3, #2
 800937c:	6122      	str	r2, [r4, #16]
 800937e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009380:	65a3      	str	r3, [r4, #88]	; 0x58
 8009382:	2300      	movs	r3, #0
 8009384:	930b      	str	r3, [sp, #44]	; 0x2c
 8009386:	e7cf      	b.n	8009328 <_printf_float+0x17c>
 8009388:	2367      	movs	r3, #103	; 0x67
 800938a:	930a      	str	r3, [sp, #40]	; 0x28
 800938c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800938e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009390:	4299      	cmp	r1, r3
 8009392:	db06      	blt.n	80093a2 <_printf_float+0x1f6>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	6121      	str	r1, [r4, #16]
 8009398:	07db      	lsls	r3, r3, #31
 800939a:	d5f0      	bpl.n	800937e <_printf_float+0x1d2>
 800939c:	3101      	adds	r1, #1
 800939e:	6121      	str	r1, [r4, #16]
 80093a0:	e7ed      	b.n	800937e <_printf_float+0x1d2>
 80093a2:	2201      	movs	r2, #1
 80093a4:	2900      	cmp	r1, #0
 80093a6:	dc01      	bgt.n	80093ac <_printf_float+0x200>
 80093a8:	1892      	adds	r2, r2, r2
 80093aa:	1a52      	subs	r2, r2, r1
 80093ac:	189b      	adds	r3, r3, r2
 80093ae:	e7dc      	b.n	800936a <_printf_float+0x1be>
 80093b0:	6822      	ldr	r2, [r4, #0]
 80093b2:	0553      	lsls	r3, r2, #21
 80093b4:	d408      	bmi.n	80093c8 <_printf_float+0x21c>
 80093b6:	6923      	ldr	r3, [r4, #16]
 80093b8:	002a      	movs	r2, r5
 80093ba:	0038      	movs	r0, r7
 80093bc:	9908      	ldr	r1, [sp, #32]
 80093be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80093c0:	47a8      	blx	r5
 80093c2:	3001      	adds	r0, #1
 80093c4:	d12a      	bne.n	800941c <_printf_float+0x270>
 80093c6:	e74f      	b.n	8009268 <_printf_float+0xbc>
 80093c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ca:	2b65      	cmp	r3, #101	; 0x65
 80093cc:	d800      	bhi.n	80093d0 <_printf_float+0x224>
 80093ce:	e0ec      	b.n	80095aa <_printf_float+0x3fe>
 80093d0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80093d2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80093d4:	2200      	movs	r2, #0
 80093d6:	2300      	movs	r3, #0
 80093d8:	f7f7 f834 	bl	8000444 <__aeabi_dcmpeq>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d034      	beq.n	800944a <_printf_float+0x29e>
 80093e0:	2301      	movs	r3, #1
 80093e2:	0038      	movs	r0, r7
 80093e4:	4a37      	ldr	r2, [pc, #220]	; (80094c4 <_printf_float+0x318>)
 80093e6:	9908      	ldr	r1, [sp, #32]
 80093e8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80093ea:	47a8      	blx	r5
 80093ec:	3001      	adds	r0, #1
 80093ee:	d100      	bne.n	80093f2 <_printf_float+0x246>
 80093f0:	e73a      	b.n	8009268 <_printf_float+0xbc>
 80093f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80093f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80093f6:	429a      	cmp	r2, r3
 80093f8:	db02      	blt.n	8009400 <_printf_float+0x254>
 80093fa:	6823      	ldr	r3, [r4, #0]
 80093fc:	07db      	lsls	r3, r3, #31
 80093fe:	d50d      	bpl.n	800941c <_printf_float+0x270>
 8009400:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009402:	0038      	movs	r0, r7
 8009404:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009406:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009408:	9908      	ldr	r1, [sp, #32]
 800940a:	47a8      	blx	r5
 800940c:	2500      	movs	r5, #0
 800940e:	3001      	adds	r0, #1
 8009410:	d100      	bne.n	8009414 <_printf_float+0x268>
 8009412:	e729      	b.n	8009268 <_printf_float+0xbc>
 8009414:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009416:	3b01      	subs	r3, #1
 8009418:	42ab      	cmp	r3, r5
 800941a:	dc0a      	bgt.n	8009432 <_printf_float+0x286>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	079b      	lsls	r3, r3, #30
 8009420:	d500      	bpl.n	8009424 <_printf_float+0x278>
 8009422:	e116      	b.n	8009652 <_printf_float+0x4a6>
 8009424:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009426:	68e0      	ldr	r0, [r4, #12]
 8009428:	4298      	cmp	r0, r3
 800942a:	db00      	blt.n	800942e <_printf_float+0x282>
 800942c:	e71e      	b.n	800926c <_printf_float+0xc0>
 800942e:	0018      	movs	r0, r3
 8009430:	e71c      	b.n	800926c <_printf_float+0xc0>
 8009432:	0022      	movs	r2, r4
 8009434:	2301      	movs	r3, #1
 8009436:	0038      	movs	r0, r7
 8009438:	9908      	ldr	r1, [sp, #32]
 800943a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800943c:	321a      	adds	r2, #26
 800943e:	47b0      	blx	r6
 8009440:	3001      	adds	r0, #1
 8009442:	d100      	bne.n	8009446 <_printf_float+0x29a>
 8009444:	e710      	b.n	8009268 <_printf_float+0xbc>
 8009446:	3501      	adds	r5, #1
 8009448:	e7e4      	b.n	8009414 <_printf_float+0x268>
 800944a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800944c:	2b00      	cmp	r3, #0
 800944e:	dc3b      	bgt.n	80094c8 <_printf_float+0x31c>
 8009450:	2301      	movs	r3, #1
 8009452:	0038      	movs	r0, r7
 8009454:	4a1b      	ldr	r2, [pc, #108]	; (80094c4 <_printf_float+0x318>)
 8009456:	9908      	ldr	r1, [sp, #32]
 8009458:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800945a:	47b0      	blx	r6
 800945c:	3001      	adds	r0, #1
 800945e:	d100      	bne.n	8009462 <_printf_float+0x2b6>
 8009460:	e702      	b.n	8009268 <_printf_float+0xbc>
 8009462:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009466:	4313      	orrs	r3, r2
 8009468:	d102      	bne.n	8009470 <_printf_float+0x2c4>
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	07db      	lsls	r3, r3, #31
 800946e:	d5d5      	bpl.n	800941c <_printf_float+0x270>
 8009470:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009472:	0038      	movs	r0, r7
 8009474:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009476:	9908      	ldr	r1, [sp, #32]
 8009478:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800947a:	47b0      	blx	r6
 800947c:	2300      	movs	r3, #0
 800947e:	3001      	adds	r0, #1
 8009480:	d100      	bne.n	8009484 <_printf_float+0x2d8>
 8009482:	e6f1      	b.n	8009268 <_printf_float+0xbc>
 8009484:	930a      	str	r3, [sp, #40]	; 0x28
 8009486:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800948a:	425b      	negs	r3, r3
 800948c:	4293      	cmp	r3, r2
 800948e:	dc01      	bgt.n	8009494 <_printf_float+0x2e8>
 8009490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009492:	e791      	b.n	80093b8 <_printf_float+0x20c>
 8009494:	0022      	movs	r2, r4
 8009496:	2301      	movs	r3, #1
 8009498:	0038      	movs	r0, r7
 800949a:	9908      	ldr	r1, [sp, #32]
 800949c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800949e:	321a      	adds	r2, #26
 80094a0:	47b0      	blx	r6
 80094a2:	3001      	adds	r0, #1
 80094a4:	d100      	bne.n	80094a8 <_printf_float+0x2fc>
 80094a6:	e6df      	b.n	8009268 <_printf_float+0xbc>
 80094a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094aa:	3301      	adds	r3, #1
 80094ac:	e7ea      	b.n	8009484 <_printf_float+0x2d8>
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	7fefffff 	.word	0x7fefffff
 80094b4:	0800c248 	.word	0x0800c248
 80094b8:	0800c24c 	.word	0x0800c24c
 80094bc:	0800c250 	.word	0x0800c250
 80094c0:	0800c254 	.word	0x0800c254
 80094c4:	0800c258 	.word	0x0800c258
 80094c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094cc:	920a      	str	r2, [sp, #40]	; 0x28
 80094ce:	429a      	cmp	r2, r3
 80094d0:	dd00      	ble.n	80094d4 <_printf_float+0x328>
 80094d2:	930a      	str	r3, [sp, #40]	; 0x28
 80094d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	dc3d      	bgt.n	8009556 <_printf_float+0x3aa>
 80094da:	2300      	movs	r3, #0
 80094dc:	930e      	str	r3, [sp, #56]	; 0x38
 80094de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094e0:	43db      	mvns	r3, r3
 80094e2:	17db      	asrs	r3, r3, #31
 80094e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80094e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80094e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80094ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094ee:	4013      	ands	r3, r2
 80094f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80094f2:	1ad3      	subs	r3, r2, r3
 80094f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094f6:	4293      	cmp	r3, r2
 80094f8:	dc36      	bgt.n	8009568 <_printf_float+0x3bc>
 80094fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80094fe:	429a      	cmp	r2, r3
 8009500:	db40      	blt.n	8009584 <_printf_float+0x3d8>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	07db      	lsls	r3, r3, #31
 8009506:	d43d      	bmi.n	8009584 <_printf_float+0x3d8>
 8009508:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800950a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800950c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800950e:	1af3      	subs	r3, r6, r3
 8009510:	1ab6      	subs	r6, r6, r2
 8009512:	429e      	cmp	r6, r3
 8009514:	dd00      	ble.n	8009518 <_printf_float+0x36c>
 8009516:	001e      	movs	r6, r3
 8009518:	2e00      	cmp	r6, #0
 800951a:	dc3c      	bgt.n	8009596 <_printf_float+0x3ea>
 800951c:	2300      	movs	r3, #0
 800951e:	930a      	str	r3, [sp, #40]	; 0x28
 8009520:	43f3      	mvns	r3, r6
 8009522:	17db      	asrs	r3, r3, #31
 8009524:	930b      	str	r3, [sp, #44]	; 0x2c
 8009526:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009528:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800952a:	1a9b      	subs	r3, r3, r2
 800952c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800952e:	4032      	ands	r2, r6
 8009530:	1a9b      	subs	r3, r3, r2
 8009532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009534:	4293      	cmp	r3, r2
 8009536:	dc00      	bgt.n	800953a <_printf_float+0x38e>
 8009538:	e770      	b.n	800941c <_printf_float+0x270>
 800953a:	0022      	movs	r2, r4
 800953c:	2301      	movs	r3, #1
 800953e:	0038      	movs	r0, r7
 8009540:	9908      	ldr	r1, [sp, #32]
 8009542:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009544:	321a      	adds	r2, #26
 8009546:	47a8      	blx	r5
 8009548:	3001      	adds	r0, #1
 800954a:	d100      	bne.n	800954e <_printf_float+0x3a2>
 800954c:	e68c      	b.n	8009268 <_printf_float+0xbc>
 800954e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009550:	3301      	adds	r3, #1
 8009552:	930a      	str	r3, [sp, #40]	; 0x28
 8009554:	e7e7      	b.n	8009526 <_printf_float+0x37a>
 8009556:	002a      	movs	r2, r5
 8009558:	0038      	movs	r0, r7
 800955a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800955c:	9908      	ldr	r1, [sp, #32]
 800955e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009560:	47b0      	blx	r6
 8009562:	3001      	adds	r0, #1
 8009564:	d1b9      	bne.n	80094da <_printf_float+0x32e>
 8009566:	e67f      	b.n	8009268 <_printf_float+0xbc>
 8009568:	0022      	movs	r2, r4
 800956a:	2301      	movs	r3, #1
 800956c:	0038      	movs	r0, r7
 800956e:	9908      	ldr	r1, [sp, #32]
 8009570:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009572:	321a      	adds	r2, #26
 8009574:	47b0      	blx	r6
 8009576:	3001      	adds	r0, #1
 8009578:	d100      	bne.n	800957c <_printf_float+0x3d0>
 800957a:	e675      	b.n	8009268 <_printf_float+0xbc>
 800957c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800957e:	3301      	adds	r3, #1
 8009580:	930e      	str	r3, [sp, #56]	; 0x38
 8009582:	e7b0      	b.n	80094e6 <_printf_float+0x33a>
 8009584:	0038      	movs	r0, r7
 8009586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009588:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800958a:	9908      	ldr	r1, [sp, #32]
 800958c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800958e:	47b0      	blx	r6
 8009590:	3001      	adds	r0, #1
 8009592:	d1b9      	bne.n	8009508 <_printf_float+0x35c>
 8009594:	e668      	b.n	8009268 <_printf_float+0xbc>
 8009596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009598:	0038      	movs	r0, r7
 800959a:	18ea      	adds	r2, r5, r3
 800959c:	9908      	ldr	r1, [sp, #32]
 800959e:	0033      	movs	r3, r6
 80095a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095a2:	47a8      	blx	r5
 80095a4:	3001      	adds	r0, #1
 80095a6:	d1b9      	bne.n	800951c <_printf_float+0x370>
 80095a8:	e65e      	b.n	8009268 <_printf_float+0xbc>
 80095aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	dc02      	bgt.n	80095b6 <_printf_float+0x40a>
 80095b0:	2301      	movs	r3, #1
 80095b2:	421a      	tst	r2, r3
 80095b4:	d03a      	beq.n	800962c <_printf_float+0x480>
 80095b6:	2301      	movs	r3, #1
 80095b8:	002a      	movs	r2, r5
 80095ba:	0038      	movs	r0, r7
 80095bc:	9908      	ldr	r1, [sp, #32]
 80095be:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80095c0:	47b0      	blx	r6
 80095c2:	3001      	adds	r0, #1
 80095c4:	d100      	bne.n	80095c8 <_printf_float+0x41c>
 80095c6:	e64f      	b.n	8009268 <_printf_float+0xbc>
 80095c8:	0038      	movs	r0, r7
 80095ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095ce:	9908      	ldr	r1, [sp, #32]
 80095d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80095d2:	47b0      	blx	r6
 80095d4:	3001      	adds	r0, #1
 80095d6:	d100      	bne.n	80095da <_printf_float+0x42e>
 80095d8:	e646      	b.n	8009268 <_printf_float+0xbc>
 80095da:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80095dc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80095de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80095e0:	2200      	movs	r2, #0
 80095e2:	001e      	movs	r6, r3
 80095e4:	2300      	movs	r3, #0
 80095e6:	f7f6 ff2d 	bl	8000444 <__aeabi_dcmpeq>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d11c      	bne.n	8009628 <_printf_float+0x47c>
 80095ee:	0033      	movs	r3, r6
 80095f0:	1c6a      	adds	r2, r5, #1
 80095f2:	3b01      	subs	r3, #1
 80095f4:	0038      	movs	r0, r7
 80095f6:	9908      	ldr	r1, [sp, #32]
 80095f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80095fa:	47a8      	blx	r5
 80095fc:	3001      	adds	r0, #1
 80095fe:	d10f      	bne.n	8009620 <_printf_float+0x474>
 8009600:	e632      	b.n	8009268 <_printf_float+0xbc>
 8009602:	0022      	movs	r2, r4
 8009604:	2301      	movs	r3, #1
 8009606:	0038      	movs	r0, r7
 8009608:	9908      	ldr	r1, [sp, #32]
 800960a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800960c:	321a      	adds	r2, #26
 800960e:	47b0      	blx	r6
 8009610:	3001      	adds	r0, #1
 8009612:	d100      	bne.n	8009616 <_printf_float+0x46a>
 8009614:	e628      	b.n	8009268 <_printf_float+0xbc>
 8009616:	3501      	adds	r5, #1
 8009618:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800961a:	3b01      	subs	r3, #1
 800961c:	42ab      	cmp	r3, r5
 800961e:	dcf0      	bgt.n	8009602 <_printf_float+0x456>
 8009620:	0022      	movs	r2, r4
 8009622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009624:	3250      	adds	r2, #80	; 0x50
 8009626:	e6c8      	b.n	80093ba <_printf_float+0x20e>
 8009628:	2500      	movs	r5, #0
 800962a:	e7f5      	b.n	8009618 <_printf_float+0x46c>
 800962c:	002a      	movs	r2, r5
 800962e:	e7e1      	b.n	80095f4 <_printf_float+0x448>
 8009630:	0022      	movs	r2, r4
 8009632:	2301      	movs	r3, #1
 8009634:	0038      	movs	r0, r7
 8009636:	9908      	ldr	r1, [sp, #32]
 8009638:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800963a:	3219      	adds	r2, #25
 800963c:	47b0      	blx	r6
 800963e:	3001      	adds	r0, #1
 8009640:	d100      	bne.n	8009644 <_printf_float+0x498>
 8009642:	e611      	b.n	8009268 <_printf_float+0xbc>
 8009644:	3501      	adds	r5, #1
 8009646:	68e3      	ldr	r3, [r4, #12]
 8009648:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800964a:	1a9b      	subs	r3, r3, r2
 800964c:	42ab      	cmp	r3, r5
 800964e:	dcef      	bgt.n	8009630 <_printf_float+0x484>
 8009650:	e6e8      	b.n	8009424 <_printf_float+0x278>
 8009652:	2500      	movs	r5, #0
 8009654:	e7f7      	b.n	8009646 <_printf_float+0x49a>
 8009656:	46c0      	nop			; (mov r8, r8)

08009658 <_printf_common>:
 8009658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800965a:	0016      	movs	r6, r2
 800965c:	9301      	str	r3, [sp, #4]
 800965e:	688a      	ldr	r2, [r1, #8]
 8009660:	690b      	ldr	r3, [r1, #16]
 8009662:	000c      	movs	r4, r1
 8009664:	9000      	str	r0, [sp, #0]
 8009666:	4293      	cmp	r3, r2
 8009668:	da00      	bge.n	800966c <_printf_common+0x14>
 800966a:	0013      	movs	r3, r2
 800966c:	0022      	movs	r2, r4
 800966e:	6033      	str	r3, [r6, #0]
 8009670:	3243      	adds	r2, #67	; 0x43
 8009672:	7812      	ldrb	r2, [r2, #0]
 8009674:	2a00      	cmp	r2, #0
 8009676:	d001      	beq.n	800967c <_printf_common+0x24>
 8009678:	3301      	adds	r3, #1
 800967a:	6033      	str	r3, [r6, #0]
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	069b      	lsls	r3, r3, #26
 8009680:	d502      	bpl.n	8009688 <_printf_common+0x30>
 8009682:	6833      	ldr	r3, [r6, #0]
 8009684:	3302      	adds	r3, #2
 8009686:	6033      	str	r3, [r6, #0]
 8009688:	6822      	ldr	r2, [r4, #0]
 800968a:	2306      	movs	r3, #6
 800968c:	0015      	movs	r5, r2
 800968e:	401d      	ands	r5, r3
 8009690:	421a      	tst	r2, r3
 8009692:	d027      	beq.n	80096e4 <_printf_common+0x8c>
 8009694:	0023      	movs	r3, r4
 8009696:	3343      	adds	r3, #67	; 0x43
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	1e5a      	subs	r2, r3, #1
 800969c:	4193      	sbcs	r3, r2
 800969e:	6822      	ldr	r2, [r4, #0]
 80096a0:	0692      	lsls	r2, r2, #26
 80096a2:	d430      	bmi.n	8009706 <_printf_common+0xae>
 80096a4:	0022      	movs	r2, r4
 80096a6:	9901      	ldr	r1, [sp, #4]
 80096a8:	9800      	ldr	r0, [sp, #0]
 80096aa:	9d08      	ldr	r5, [sp, #32]
 80096ac:	3243      	adds	r2, #67	; 0x43
 80096ae:	47a8      	blx	r5
 80096b0:	3001      	adds	r0, #1
 80096b2:	d025      	beq.n	8009700 <_printf_common+0xa8>
 80096b4:	2206      	movs	r2, #6
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	2500      	movs	r5, #0
 80096ba:	4013      	ands	r3, r2
 80096bc:	2b04      	cmp	r3, #4
 80096be:	d105      	bne.n	80096cc <_printf_common+0x74>
 80096c0:	6833      	ldr	r3, [r6, #0]
 80096c2:	68e5      	ldr	r5, [r4, #12]
 80096c4:	1aed      	subs	r5, r5, r3
 80096c6:	43eb      	mvns	r3, r5
 80096c8:	17db      	asrs	r3, r3, #31
 80096ca:	401d      	ands	r5, r3
 80096cc:	68a3      	ldr	r3, [r4, #8]
 80096ce:	6922      	ldr	r2, [r4, #16]
 80096d0:	4293      	cmp	r3, r2
 80096d2:	dd01      	ble.n	80096d8 <_printf_common+0x80>
 80096d4:	1a9b      	subs	r3, r3, r2
 80096d6:	18ed      	adds	r5, r5, r3
 80096d8:	2600      	movs	r6, #0
 80096da:	42b5      	cmp	r5, r6
 80096dc:	d120      	bne.n	8009720 <_printf_common+0xc8>
 80096de:	2000      	movs	r0, #0
 80096e0:	e010      	b.n	8009704 <_printf_common+0xac>
 80096e2:	3501      	adds	r5, #1
 80096e4:	68e3      	ldr	r3, [r4, #12]
 80096e6:	6832      	ldr	r2, [r6, #0]
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	42ab      	cmp	r3, r5
 80096ec:	ddd2      	ble.n	8009694 <_printf_common+0x3c>
 80096ee:	0022      	movs	r2, r4
 80096f0:	2301      	movs	r3, #1
 80096f2:	9901      	ldr	r1, [sp, #4]
 80096f4:	9800      	ldr	r0, [sp, #0]
 80096f6:	9f08      	ldr	r7, [sp, #32]
 80096f8:	3219      	adds	r2, #25
 80096fa:	47b8      	blx	r7
 80096fc:	3001      	adds	r0, #1
 80096fe:	d1f0      	bne.n	80096e2 <_printf_common+0x8a>
 8009700:	2001      	movs	r0, #1
 8009702:	4240      	negs	r0, r0
 8009704:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009706:	2030      	movs	r0, #48	; 0x30
 8009708:	18e1      	adds	r1, r4, r3
 800970a:	3143      	adds	r1, #67	; 0x43
 800970c:	7008      	strb	r0, [r1, #0]
 800970e:	0021      	movs	r1, r4
 8009710:	1c5a      	adds	r2, r3, #1
 8009712:	3145      	adds	r1, #69	; 0x45
 8009714:	7809      	ldrb	r1, [r1, #0]
 8009716:	18a2      	adds	r2, r4, r2
 8009718:	3243      	adds	r2, #67	; 0x43
 800971a:	3302      	adds	r3, #2
 800971c:	7011      	strb	r1, [r2, #0]
 800971e:	e7c1      	b.n	80096a4 <_printf_common+0x4c>
 8009720:	0022      	movs	r2, r4
 8009722:	2301      	movs	r3, #1
 8009724:	9901      	ldr	r1, [sp, #4]
 8009726:	9800      	ldr	r0, [sp, #0]
 8009728:	9f08      	ldr	r7, [sp, #32]
 800972a:	321a      	adds	r2, #26
 800972c:	47b8      	blx	r7
 800972e:	3001      	adds	r0, #1
 8009730:	d0e6      	beq.n	8009700 <_printf_common+0xa8>
 8009732:	3601      	adds	r6, #1
 8009734:	e7d1      	b.n	80096da <_printf_common+0x82>
	...

08009738 <_printf_i>:
 8009738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800973a:	b08b      	sub	sp, #44	; 0x2c
 800973c:	9206      	str	r2, [sp, #24]
 800973e:	000a      	movs	r2, r1
 8009740:	3243      	adds	r2, #67	; 0x43
 8009742:	9307      	str	r3, [sp, #28]
 8009744:	9005      	str	r0, [sp, #20]
 8009746:	9204      	str	r2, [sp, #16]
 8009748:	7e0a      	ldrb	r2, [r1, #24]
 800974a:	000c      	movs	r4, r1
 800974c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800974e:	2a78      	cmp	r2, #120	; 0x78
 8009750:	d809      	bhi.n	8009766 <_printf_i+0x2e>
 8009752:	2a62      	cmp	r2, #98	; 0x62
 8009754:	d80b      	bhi.n	800976e <_printf_i+0x36>
 8009756:	2a00      	cmp	r2, #0
 8009758:	d100      	bne.n	800975c <_printf_i+0x24>
 800975a:	e0be      	b.n	80098da <_printf_i+0x1a2>
 800975c:	497c      	ldr	r1, [pc, #496]	; (8009950 <_printf_i+0x218>)
 800975e:	9103      	str	r1, [sp, #12]
 8009760:	2a58      	cmp	r2, #88	; 0x58
 8009762:	d100      	bne.n	8009766 <_printf_i+0x2e>
 8009764:	e093      	b.n	800988e <_printf_i+0x156>
 8009766:	0026      	movs	r6, r4
 8009768:	3642      	adds	r6, #66	; 0x42
 800976a:	7032      	strb	r2, [r6, #0]
 800976c:	e022      	b.n	80097b4 <_printf_i+0x7c>
 800976e:	0010      	movs	r0, r2
 8009770:	3863      	subs	r0, #99	; 0x63
 8009772:	2815      	cmp	r0, #21
 8009774:	d8f7      	bhi.n	8009766 <_printf_i+0x2e>
 8009776:	f7f6 fcd5 	bl	8000124 <__gnu_thumb1_case_shi>
 800977a:	0016      	.short	0x0016
 800977c:	fff6001f 	.word	0xfff6001f
 8009780:	fff6fff6 	.word	0xfff6fff6
 8009784:	001ffff6 	.word	0x001ffff6
 8009788:	fff6fff6 	.word	0xfff6fff6
 800978c:	fff6fff6 	.word	0xfff6fff6
 8009790:	003600a3 	.word	0x003600a3
 8009794:	fff60083 	.word	0xfff60083
 8009798:	00b4fff6 	.word	0x00b4fff6
 800979c:	0036fff6 	.word	0x0036fff6
 80097a0:	fff6fff6 	.word	0xfff6fff6
 80097a4:	0087      	.short	0x0087
 80097a6:	0026      	movs	r6, r4
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	3642      	adds	r6, #66	; 0x42
 80097ac:	1d11      	adds	r1, r2, #4
 80097ae:	6019      	str	r1, [r3, #0]
 80097b0:	6813      	ldr	r3, [r2, #0]
 80097b2:	7033      	strb	r3, [r6, #0]
 80097b4:	2301      	movs	r3, #1
 80097b6:	e0a2      	b.n	80098fe <_printf_i+0x1c6>
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	6809      	ldr	r1, [r1, #0]
 80097bc:	1d02      	adds	r2, r0, #4
 80097be:	060d      	lsls	r5, r1, #24
 80097c0:	d50b      	bpl.n	80097da <_printf_i+0xa2>
 80097c2:	6805      	ldr	r5, [r0, #0]
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	da03      	bge.n	80097d2 <_printf_i+0x9a>
 80097ca:	232d      	movs	r3, #45	; 0x2d
 80097cc:	9a04      	ldr	r2, [sp, #16]
 80097ce:	426d      	negs	r5, r5
 80097d0:	7013      	strb	r3, [r2, #0]
 80097d2:	4b5f      	ldr	r3, [pc, #380]	; (8009950 <_printf_i+0x218>)
 80097d4:	270a      	movs	r7, #10
 80097d6:	9303      	str	r3, [sp, #12]
 80097d8:	e01b      	b.n	8009812 <_printf_i+0xda>
 80097da:	6805      	ldr	r5, [r0, #0]
 80097dc:	601a      	str	r2, [r3, #0]
 80097de:	0649      	lsls	r1, r1, #25
 80097e0:	d5f1      	bpl.n	80097c6 <_printf_i+0x8e>
 80097e2:	b22d      	sxth	r5, r5
 80097e4:	e7ef      	b.n	80097c6 <_printf_i+0x8e>
 80097e6:	680d      	ldr	r5, [r1, #0]
 80097e8:	6819      	ldr	r1, [r3, #0]
 80097ea:	1d08      	adds	r0, r1, #4
 80097ec:	6018      	str	r0, [r3, #0]
 80097ee:	062e      	lsls	r6, r5, #24
 80097f0:	d501      	bpl.n	80097f6 <_printf_i+0xbe>
 80097f2:	680d      	ldr	r5, [r1, #0]
 80097f4:	e003      	b.n	80097fe <_printf_i+0xc6>
 80097f6:	066d      	lsls	r5, r5, #25
 80097f8:	d5fb      	bpl.n	80097f2 <_printf_i+0xba>
 80097fa:	680d      	ldr	r5, [r1, #0]
 80097fc:	b2ad      	uxth	r5, r5
 80097fe:	4b54      	ldr	r3, [pc, #336]	; (8009950 <_printf_i+0x218>)
 8009800:	2708      	movs	r7, #8
 8009802:	9303      	str	r3, [sp, #12]
 8009804:	2a6f      	cmp	r2, #111	; 0x6f
 8009806:	d000      	beq.n	800980a <_printf_i+0xd2>
 8009808:	3702      	adds	r7, #2
 800980a:	0023      	movs	r3, r4
 800980c:	2200      	movs	r2, #0
 800980e:	3343      	adds	r3, #67	; 0x43
 8009810:	701a      	strb	r2, [r3, #0]
 8009812:	6863      	ldr	r3, [r4, #4]
 8009814:	60a3      	str	r3, [r4, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	db03      	blt.n	8009822 <_printf_i+0xea>
 800981a:	2104      	movs	r1, #4
 800981c:	6822      	ldr	r2, [r4, #0]
 800981e:	438a      	bics	r2, r1
 8009820:	6022      	str	r2, [r4, #0]
 8009822:	2d00      	cmp	r5, #0
 8009824:	d102      	bne.n	800982c <_printf_i+0xf4>
 8009826:	9e04      	ldr	r6, [sp, #16]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00c      	beq.n	8009846 <_printf_i+0x10e>
 800982c:	9e04      	ldr	r6, [sp, #16]
 800982e:	0028      	movs	r0, r5
 8009830:	0039      	movs	r1, r7
 8009832:	f7f6 fd07 	bl	8000244 <__aeabi_uidivmod>
 8009836:	9b03      	ldr	r3, [sp, #12]
 8009838:	3e01      	subs	r6, #1
 800983a:	5c5b      	ldrb	r3, [r3, r1]
 800983c:	7033      	strb	r3, [r6, #0]
 800983e:	002b      	movs	r3, r5
 8009840:	0005      	movs	r5, r0
 8009842:	429f      	cmp	r7, r3
 8009844:	d9f3      	bls.n	800982e <_printf_i+0xf6>
 8009846:	2f08      	cmp	r7, #8
 8009848:	d109      	bne.n	800985e <_printf_i+0x126>
 800984a:	6823      	ldr	r3, [r4, #0]
 800984c:	07db      	lsls	r3, r3, #31
 800984e:	d506      	bpl.n	800985e <_printf_i+0x126>
 8009850:	6862      	ldr	r2, [r4, #4]
 8009852:	6923      	ldr	r3, [r4, #16]
 8009854:	429a      	cmp	r2, r3
 8009856:	dc02      	bgt.n	800985e <_printf_i+0x126>
 8009858:	2330      	movs	r3, #48	; 0x30
 800985a:	3e01      	subs	r6, #1
 800985c:	7033      	strb	r3, [r6, #0]
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	1b9b      	subs	r3, r3, r6
 8009862:	6123      	str	r3, [r4, #16]
 8009864:	9b07      	ldr	r3, [sp, #28]
 8009866:	0021      	movs	r1, r4
 8009868:	9300      	str	r3, [sp, #0]
 800986a:	9805      	ldr	r0, [sp, #20]
 800986c:	9b06      	ldr	r3, [sp, #24]
 800986e:	aa09      	add	r2, sp, #36	; 0x24
 8009870:	f7ff fef2 	bl	8009658 <_printf_common>
 8009874:	3001      	adds	r0, #1
 8009876:	d147      	bne.n	8009908 <_printf_i+0x1d0>
 8009878:	2001      	movs	r0, #1
 800987a:	4240      	negs	r0, r0
 800987c:	b00b      	add	sp, #44	; 0x2c
 800987e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009880:	2220      	movs	r2, #32
 8009882:	6809      	ldr	r1, [r1, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	6022      	str	r2, [r4, #0]
 8009888:	2278      	movs	r2, #120	; 0x78
 800988a:	4932      	ldr	r1, [pc, #200]	; (8009954 <_printf_i+0x21c>)
 800988c:	9103      	str	r1, [sp, #12]
 800988e:	0021      	movs	r1, r4
 8009890:	3145      	adds	r1, #69	; 0x45
 8009892:	700a      	strb	r2, [r1, #0]
 8009894:	6819      	ldr	r1, [r3, #0]
 8009896:	6822      	ldr	r2, [r4, #0]
 8009898:	c920      	ldmia	r1!, {r5}
 800989a:	0610      	lsls	r0, r2, #24
 800989c:	d402      	bmi.n	80098a4 <_printf_i+0x16c>
 800989e:	0650      	lsls	r0, r2, #25
 80098a0:	d500      	bpl.n	80098a4 <_printf_i+0x16c>
 80098a2:	b2ad      	uxth	r5, r5
 80098a4:	6019      	str	r1, [r3, #0]
 80098a6:	07d3      	lsls	r3, r2, #31
 80098a8:	d502      	bpl.n	80098b0 <_printf_i+0x178>
 80098aa:	2320      	movs	r3, #32
 80098ac:	4313      	orrs	r3, r2
 80098ae:	6023      	str	r3, [r4, #0]
 80098b0:	2710      	movs	r7, #16
 80098b2:	2d00      	cmp	r5, #0
 80098b4:	d1a9      	bne.n	800980a <_printf_i+0xd2>
 80098b6:	2220      	movs	r2, #32
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	4393      	bics	r3, r2
 80098bc:	6023      	str	r3, [r4, #0]
 80098be:	e7a4      	b.n	800980a <_printf_i+0xd2>
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	680d      	ldr	r5, [r1, #0]
 80098c4:	1d10      	adds	r0, r2, #4
 80098c6:	6949      	ldr	r1, [r1, #20]
 80098c8:	6018      	str	r0, [r3, #0]
 80098ca:	6813      	ldr	r3, [r2, #0]
 80098cc:	062e      	lsls	r6, r5, #24
 80098ce:	d501      	bpl.n	80098d4 <_printf_i+0x19c>
 80098d0:	6019      	str	r1, [r3, #0]
 80098d2:	e002      	b.n	80098da <_printf_i+0x1a2>
 80098d4:	066d      	lsls	r5, r5, #25
 80098d6:	d5fb      	bpl.n	80098d0 <_printf_i+0x198>
 80098d8:	8019      	strh	r1, [r3, #0]
 80098da:	2300      	movs	r3, #0
 80098dc:	9e04      	ldr	r6, [sp, #16]
 80098de:	6123      	str	r3, [r4, #16]
 80098e0:	e7c0      	b.n	8009864 <_printf_i+0x12c>
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	1d11      	adds	r1, r2, #4
 80098e6:	6019      	str	r1, [r3, #0]
 80098e8:	6816      	ldr	r6, [r2, #0]
 80098ea:	2100      	movs	r1, #0
 80098ec:	0030      	movs	r0, r6
 80098ee:	6862      	ldr	r2, [r4, #4]
 80098f0:	f000 fab3 	bl	8009e5a <memchr>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	d001      	beq.n	80098fc <_printf_i+0x1c4>
 80098f8:	1b80      	subs	r0, r0, r6
 80098fa:	6060      	str	r0, [r4, #4]
 80098fc:	6863      	ldr	r3, [r4, #4]
 80098fe:	6123      	str	r3, [r4, #16]
 8009900:	2300      	movs	r3, #0
 8009902:	9a04      	ldr	r2, [sp, #16]
 8009904:	7013      	strb	r3, [r2, #0]
 8009906:	e7ad      	b.n	8009864 <_printf_i+0x12c>
 8009908:	0032      	movs	r2, r6
 800990a:	6923      	ldr	r3, [r4, #16]
 800990c:	9906      	ldr	r1, [sp, #24]
 800990e:	9805      	ldr	r0, [sp, #20]
 8009910:	9d07      	ldr	r5, [sp, #28]
 8009912:	47a8      	blx	r5
 8009914:	3001      	adds	r0, #1
 8009916:	d0af      	beq.n	8009878 <_printf_i+0x140>
 8009918:	6823      	ldr	r3, [r4, #0]
 800991a:	079b      	lsls	r3, r3, #30
 800991c:	d415      	bmi.n	800994a <_printf_i+0x212>
 800991e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009920:	68e0      	ldr	r0, [r4, #12]
 8009922:	4298      	cmp	r0, r3
 8009924:	daaa      	bge.n	800987c <_printf_i+0x144>
 8009926:	0018      	movs	r0, r3
 8009928:	e7a8      	b.n	800987c <_printf_i+0x144>
 800992a:	0022      	movs	r2, r4
 800992c:	2301      	movs	r3, #1
 800992e:	9906      	ldr	r1, [sp, #24]
 8009930:	9805      	ldr	r0, [sp, #20]
 8009932:	9e07      	ldr	r6, [sp, #28]
 8009934:	3219      	adds	r2, #25
 8009936:	47b0      	blx	r6
 8009938:	3001      	adds	r0, #1
 800993a:	d09d      	beq.n	8009878 <_printf_i+0x140>
 800993c:	3501      	adds	r5, #1
 800993e:	68e3      	ldr	r3, [r4, #12]
 8009940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009942:	1a9b      	subs	r3, r3, r2
 8009944:	42ab      	cmp	r3, r5
 8009946:	dcf0      	bgt.n	800992a <_printf_i+0x1f2>
 8009948:	e7e9      	b.n	800991e <_printf_i+0x1e6>
 800994a:	2500      	movs	r5, #0
 800994c:	e7f7      	b.n	800993e <_printf_i+0x206>
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	0800c25a 	.word	0x0800c25a
 8009954:	0800c26b 	.word	0x0800c26b

08009958 <std>:
 8009958:	2300      	movs	r3, #0
 800995a:	b510      	push	{r4, lr}
 800995c:	0004      	movs	r4, r0
 800995e:	6003      	str	r3, [r0, #0]
 8009960:	6043      	str	r3, [r0, #4]
 8009962:	6083      	str	r3, [r0, #8]
 8009964:	8181      	strh	r1, [r0, #12]
 8009966:	6643      	str	r3, [r0, #100]	; 0x64
 8009968:	81c2      	strh	r2, [r0, #14]
 800996a:	6103      	str	r3, [r0, #16]
 800996c:	6143      	str	r3, [r0, #20]
 800996e:	6183      	str	r3, [r0, #24]
 8009970:	0019      	movs	r1, r3
 8009972:	2208      	movs	r2, #8
 8009974:	305c      	adds	r0, #92	; 0x5c
 8009976:	f000 f9e9 	bl	8009d4c <memset>
 800997a:	4b0b      	ldr	r3, [pc, #44]	; (80099a8 <std+0x50>)
 800997c:	6224      	str	r4, [r4, #32]
 800997e:	6263      	str	r3, [r4, #36]	; 0x24
 8009980:	4b0a      	ldr	r3, [pc, #40]	; (80099ac <std+0x54>)
 8009982:	62a3      	str	r3, [r4, #40]	; 0x28
 8009984:	4b0a      	ldr	r3, [pc, #40]	; (80099b0 <std+0x58>)
 8009986:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009988:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <std+0x5c>)
 800998a:	6323      	str	r3, [r4, #48]	; 0x30
 800998c:	4b0a      	ldr	r3, [pc, #40]	; (80099b8 <std+0x60>)
 800998e:	429c      	cmp	r4, r3
 8009990:	d005      	beq.n	800999e <std+0x46>
 8009992:	4b0a      	ldr	r3, [pc, #40]	; (80099bc <std+0x64>)
 8009994:	429c      	cmp	r4, r3
 8009996:	d002      	beq.n	800999e <std+0x46>
 8009998:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <std+0x68>)
 800999a:	429c      	cmp	r4, r3
 800999c:	d103      	bne.n	80099a6 <std+0x4e>
 800999e:	0020      	movs	r0, r4
 80099a0:	3058      	adds	r0, #88	; 0x58
 80099a2:	f000 fa57 	bl	8009e54 <__retarget_lock_init_recursive>
 80099a6:	bd10      	pop	{r4, pc}
 80099a8:	08009b69 	.word	0x08009b69
 80099ac:	08009b91 	.word	0x08009b91
 80099b0:	08009bc9 	.word	0x08009bc9
 80099b4:	08009bf5 	.word	0x08009bf5
 80099b8:	2000063c 	.word	0x2000063c
 80099bc:	200006a4 	.word	0x200006a4
 80099c0:	2000070c 	.word	0x2000070c

080099c4 <stdio_exit_handler>:
 80099c4:	b510      	push	{r4, lr}
 80099c6:	4a03      	ldr	r2, [pc, #12]	; (80099d4 <stdio_exit_handler+0x10>)
 80099c8:	4903      	ldr	r1, [pc, #12]	; (80099d8 <stdio_exit_handler+0x14>)
 80099ca:	4804      	ldr	r0, [pc, #16]	; (80099dc <stdio_exit_handler+0x18>)
 80099cc:	f000 f86c 	bl	8009aa8 <_fwalk_sglue>
 80099d0:	bd10      	pop	{r4, pc}
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	20000088 	.word	0x20000088
 80099d8:	0800bbe1 	.word	0x0800bbe1
 80099dc:	20000200 	.word	0x20000200

080099e0 <cleanup_stdio>:
 80099e0:	6841      	ldr	r1, [r0, #4]
 80099e2:	4b0b      	ldr	r3, [pc, #44]	; (8009a10 <cleanup_stdio+0x30>)
 80099e4:	b510      	push	{r4, lr}
 80099e6:	0004      	movs	r4, r0
 80099e8:	4299      	cmp	r1, r3
 80099ea:	d001      	beq.n	80099f0 <cleanup_stdio+0x10>
 80099ec:	f002 f8f8 	bl	800bbe0 <_fflush_r>
 80099f0:	68a1      	ldr	r1, [r4, #8]
 80099f2:	4b08      	ldr	r3, [pc, #32]	; (8009a14 <cleanup_stdio+0x34>)
 80099f4:	4299      	cmp	r1, r3
 80099f6:	d002      	beq.n	80099fe <cleanup_stdio+0x1e>
 80099f8:	0020      	movs	r0, r4
 80099fa:	f002 f8f1 	bl	800bbe0 <_fflush_r>
 80099fe:	68e1      	ldr	r1, [r4, #12]
 8009a00:	4b05      	ldr	r3, [pc, #20]	; (8009a18 <cleanup_stdio+0x38>)
 8009a02:	4299      	cmp	r1, r3
 8009a04:	d002      	beq.n	8009a0c <cleanup_stdio+0x2c>
 8009a06:	0020      	movs	r0, r4
 8009a08:	f002 f8ea 	bl	800bbe0 <_fflush_r>
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	2000063c 	.word	0x2000063c
 8009a14:	200006a4 	.word	0x200006a4
 8009a18:	2000070c 	.word	0x2000070c

08009a1c <global_stdio_init.part.0>:
 8009a1c:	b510      	push	{r4, lr}
 8009a1e:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <global_stdio_init.part.0+0x28>)
 8009a20:	4a09      	ldr	r2, [pc, #36]	; (8009a48 <global_stdio_init.part.0+0x2c>)
 8009a22:	2104      	movs	r1, #4
 8009a24:	601a      	str	r2, [r3, #0]
 8009a26:	4809      	ldr	r0, [pc, #36]	; (8009a4c <global_stdio_init.part.0+0x30>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f7ff ff95 	bl	8009958 <std>
 8009a2e:	2201      	movs	r2, #1
 8009a30:	2109      	movs	r1, #9
 8009a32:	4807      	ldr	r0, [pc, #28]	; (8009a50 <global_stdio_init.part.0+0x34>)
 8009a34:	f7ff ff90 	bl	8009958 <std>
 8009a38:	2202      	movs	r2, #2
 8009a3a:	2112      	movs	r1, #18
 8009a3c:	4805      	ldr	r0, [pc, #20]	; (8009a54 <global_stdio_init.part.0+0x38>)
 8009a3e:	f7ff ff8b 	bl	8009958 <std>
 8009a42:	bd10      	pop	{r4, pc}
 8009a44:	20000774 	.word	0x20000774
 8009a48:	080099c5 	.word	0x080099c5
 8009a4c:	2000063c 	.word	0x2000063c
 8009a50:	200006a4 	.word	0x200006a4
 8009a54:	2000070c 	.word	0x2000070c

08009a58 <__sfp_lock_acquire>:
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	4802      	ldr	r0, [pc, #8]	; (8009a64 <__sfp_lock_acquire+0xc>)
 8009a5c:	f000 f9fb 	bl	8009e56 <__retarget_lock_acquire_recursive>
 8009a60:	bd10      	pop	{r4, pc}
 8009a62:	46c0      	nop			; (mov r8, r8)
 8009a64:	2000077d 	.word	0x2000077d

08009a68 <__sfp_lock_release>:
 8009a68:	b510      	push	{r4, lr}
 8009a6a:	4802      	ldr	r0, [pc, #8]	; (8009a74 <__sfp_lock_release+0xc>)
 8009a6c:	f000 f9f4 	bl	8009e58 <__retarget_lock_release_recursive>
 8009a70:	bd10      	pop	{r4, pc}
 8009a72:	46c0      	nop			; (mov r8, r8)
 8009a74:	2000077d 	.word	0x2000077d

08009a78 <__sinit>:
 8009a78:	b510      	push	{r4, lr}
 8009a7a:	0004      	movs	r4, r0
 8009a7c:	f7ff ffec 	bl	8009a58 <__sfp_lock_acquire>
 8009a80:	6a23      	ldr	r3, [r4, #32]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <__sinit+0x14>
 8009a86:	f7ff ffef 	bl	8009a68 <__sfp_lock_release>
 8009a8a:	bd10      	pop	{r4, pc}
 8009a8c:	4b04      	ldr	r3, [pc, #16]	; (8009aa0 <__sinit+0x28>)
 8009a8e:	6223      	str	r3, [r4, #32]
 8009a90:	4b04      	ldr	r3, [pc, #16]	; (8009aa4 <__sinit+0x2c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1f6      	bne.n	8009a86 <__sinit+0xe>
 8009a98:	f7ff ffc0 	bl	8009a1c <global_stdio_init.part.0>
 8009a9c:	e7f3      	b.n	8009a86 <__sinit+0xe>
 8009a9e:	46c0      	nop			; (mov r8, r8)
 8009aa0:	080099e1 	.word	0x080099e1
 8009aa4:	20000774 	.word	0x20000774

08009aa8 <_fwalk_sglue>:
 8009aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009aaa:	0014      	movs	r4, r2
 8009aac:	2600      	movs	r6, #0
 8009aae:	9000      	str	r0, [sp, #0]
 8009ab0:	9101      	str	r1, [sp, #4]
 8009ab2:	68a5      	ldr	r5, [r4, #8]
 8009ab4:	6867      	ldr	r7, [r4, #4]
 8009ab6:	3f01      	subs	r7, #1
 8009ab8:	d504      	bpl.n	8009ac4 <_fwalk_sglue+0x1c>
 8009aba:	6824      	ldr	r4, [r4, #0]
 8009abc:	2c00      	cmp	r4, #0
 8009abe:	d1f8      	bne.n	8009ab2 <_fwalk_sglue+0xa>
 8009ac0:	0030      	movs	r0, r6
 8009ac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ac4:	89ab      	ldrh	r3, [r5, #12]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d908      	bls.n	8009adc <_fwalk_sglue+0x34>
 8009aca:	220e      	movs	r2, #14
 8009acc:	5eab      	ldrsh	r3, [r5, r2]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	d004      	beq.n	8009adc <_fwalk_sglue+0x34>
 8009ad2:	0029      	movs	r1, r5
 8009ad4:	9800      	ldr	r0, [sp, #0]
 8009ad6:	9b01      	ldr	r3, [sp, #4]
 8009ad8:	4798      	blx	r3
 8009ada:	4306      	orrs	r6, r0
 8009adc:	3568      	adds	r5, #104	; 0x68
 8009ade:	e7ea      	b.n	8009ab6 <_fwalk_sglue+0xe>

08009ae0 <iprintf>:
 8009ae0:	b40f      	push	{r0, r1, r2, r3}
 8009ae2:	b507      	push	{r0, r1, r2, lr}
 8009ae4:	4905      	ldr	r1, [pc, #20]	; (8009afc <iprintf+0x1c>)
 8009ae6:	ab04      	add	r3, sp, #16
 8009ae8:	6808      	ldr	r0, [r1, #0]
 8009aea:	cb04      	ldmia	r3!, {r2}
 8009aec:	6881      	ldr	r1, [r0, #8]
 8009aee:	9301      	str	r3, [sp, #4]
 8009af0:	f001 fed0 	bl	800b894 <_vfiprintf_r>
 8009af4:	b003      	add	sp, #12
 8009af6:	bc08      	pop	{r3}
 8009af8:	b004      	add	sp, #16
 8009afa:	4718      	bx	r3
 8009afc:	2000024c 	.word	0x2000024c

08009b00 <sniprintf>:
 8009b00:	b40c      	push	{r2, r3}
 8009b02:	b530      	push	{r4, r5, lr}
 8009b04:	4b17      	ldr	r3, [pc, #92]	; (8009b64 <sniprintf+0x64>)
 8009b06:	000c      	movs	r4, r1
 8009b08:	681d      	ldr	r5, [r3, #0]
 8009b0a:	b09d      	sub	sp, #116	; 0x74
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	da08      	bge.n	8009b22 <sniprintf+0x22>
 8009b10:	238b      	movs	r3, #139	; 0x8b
 8009b12:	2001      	movs	r0, #1
 8009b14:	602b      	str	r3, [r5, #0]
 8009b16:	4240      	negs	r0, r0
 8009b18:	b01d      	add	sp, #116	; 0x74
 8009b1a:	bc30      	pop	{r4, r5}
 8009b1c:	bc08      	pop	{r3}
 8009b1e:	b002      	add	sp, #8
 8009b20:	4718      	bx	r3
 8009b22:	2382      	movs	r3, #130	; 0x82
 8009b24:	466a      	mov	r2, sp
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	8293      	strh	r3, [r2, #20]
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	9002      	str	r0, [sp, #8]
 8009b2e:	9006      	str	r0, [sp, #24]
 8009b30:	4299      	cmp	r1, r3
 8009b32:	d000      	beq.n	8009b36 <sniprintf+0x36>
 8009b34:	1e4b      	subs	r3, r1, #1
 8009b36:	9304      	str	r3, [sp, #16]
 8009b38:	9307      	str	r3, [sp, #28]
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	466a      	mov	r2, sp
 8009b3e:	425b      	negs	r3, r3
 8009b40:	82d3      	strh	r3, [r2, #22]
 8009b42:	0028      	movs	r0, r5
 8009b44:	ab21      	add	r3, sp, #132	; 0x84
 8009b46:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009b48:	a902      	add	r1, sp, #8
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	f001 fd7a 	bl	800b644 <_svfiprintf_r>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	da01      	bge.n	8009b58 <sniprintf+0x58>
 8009b54:	238b      	movs	r3, #139	; 0x8b
 8009b56:	602b      	str	r3, [r5, #0]
 8009b58:	2c00      	cmp	r4, #0
 8009b5a:	d0dd      	beq.n	8009b18 <sniprintf+0x18>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	9b02      	ldr	r3, [sp, #8]
 8009b60:	701a      	strb	r2, [r3, #0]
 8009b62:	e7d9      	b.n	8009b18 <sniprintf+0x18>
 8009b64:	2000024c 	.word	0x2000024c

08009b68 <__sread>:
 8009b68:	b570      	push	{r4, r5, r6, lr}
 8009b6a:	000c      	movs	r4, r1
 8009b6c:	250e      	movs	r5, #14
 8009b6e:	5f49      	ldrsh	r1, [r1, r5]
 8009b70:	f000 f91e 	bl	8009db0 <_read_r>
 8009b74:	2800      	cmp	r0, #0
 8009b76:	db03      	blt.n	8009b80 <__sread+0x18>
 8009b78:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009b7a:	181b      	adds	r3, r3, r0
 8009b7c:	6563      	str	r3, [r4, #84]	; 0x54
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	4a02      	ldr	r2, [pc, #8]	; (8009b8c <__sread+0x24>)
 8009b84:	4013      	ands	r3, r2
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	e7f9      	b.n	8009b7e <__sread+0x16>
 8009b8a:	46c0      	nop			; (mov r8, r8)
 8009b8c:	ffffefff 	.word	0xffffefff

08009b90 <__swrite>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	001f      	movs	r7, r3
 8009b94:	898b      	ldrh	r3, [r1, #12]
 8009b96:	0005      	movs	r5, r0
 8009b98:	000c      	movs	r4, r1
 8009b9a:	0016      	movs	r6, r2
 8009b9c:	05db      	lsls	r3, r3, #23
 8009b9e:	d505      	bpl.n	8009bac <__swrite+0x1c>
 8009ba0:	230e      	movs	r3, #14
 8009ba2:	5ec9      	ldrsh	r1, [r1, r3]
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	f000 f8ee 	bl	8009d88 <_lseek_r>
 8009bac:	89a3      	ldrh	r3, [r4, #12]
 8009bae:	4a05      	ldr	r2, [pc, #20]	; (8009bc4 <__swrite+0x34>)
 8009bb0:	0028      	movs	r0, r5
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	81a3      	strh	r3, [r4, #12]
 8009bb6:	0032      	movs	r2, r6
 8009bb8:	230e      	movs	r3, #14
 8009bba:	5ee1      	ldrsh	r1, [r4, r3]
 8009bbc:	003b      	movs	r3, r7
 8009bbe:	f000 f90b 	bl	8009dd8 <_write_r>
 8009bc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bc4:	ffffefff 	.word	0xffffefff

08009bc8 <__sseek>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	000c      	movs	r4, r1
 8009bcc:	250e      	movs	r5, #14
 8009bce:	5f49      	ldrsh	r1, [r1, r5]
 8009bd0:	f000 f8da 	bl	8009d88 <_lseek_r>
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	1c42      	adds	r2, r0, #1
 8009bd8:	d103      	bne.n	8009be2 <__sseek+0x1a>
 8009bda:	4a05      	ldr	r2, [pc, #20]	; (8009bf0 <__sseek+0x28>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	81a3      	strh	r3, [r4, #12]
 8009be0:	bd70      	pop	{r4, r5, r6, pc}
 8009be2:	2280      	movs	r2, #128	; 0x80
 8009be4:	0152      	lsls	r2, r2, #5
 8009be6:	4313      	orrs	r3, r2
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	6560      	str	r0, [r4, #84]	; 0x54
 8009bec:	e7f8      	b.n	8009be0 <__sseek+0x18>
 8009bee:	46c0      	nop			; (mov r8, r8)
 8009bf0:	ffffefff 	.word	0xffffefff

08009bf4 <__sclose>:
 8009bf4:	b510      	push	{r4, lr}
 8009bf6:	230e      	movs	r3, #14
 8009bf8:	5ec9      	ldrsh	r1, [r1, r3]
 8009bfa:	f000 f8b3 	bl	8009d64 <_close_r>
 8009bfe:	bd10      	pop	{r4, pc}

08009c00 <__swbuf_r>:
 8009c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c02:	0006      	movs	r6, r0
 8009c04:	000d      	movs	r5, r1
 8009c06:	0014      	movs	r4, r2
 8009c08:	2800      	cmp	r0, #0
 8009c0a:	d004      	beq.n	8009c16 <__swbuf_r+0x16>
 8009c0c:	6a03      	ldr	r3, [r0, #32]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d101      	bne.n	8009c16 <__swbuf_r+0x16>
 8009c12:	f7ff ff31 	bl	8009a78 <__sinit>
 8009c16:	69a3      	ldr	r3, [r4, #24]
 8009c18:	60a3      	str	r3, [r4, #8]
 8009c1a:	89a3      	ldrh	r3, [r4, #12]
 8009c1c:	071b      	lsls	r3, r3, #28
 8009c1e:	d528      	bpl.n	8009c72 <__swbuf_r+0x72>
 8009c20:	6923      	ldr	r3, [r4, #16]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d025      	beq.n	8009c72 <__swbuf_r+0x72>
 8009c26:	6923      	ldr	r3, [r4, #16]
 8009c28:	6820      	ldr	r0, [r4, #0]
 8009c2a:	b2ef      	uxtb	r7, r5
 8009c2c:	1ac0      	subs	r0, r0, r3
 8009c2e:	6963      	ldr	r3, [r4, #20]
 8009c30:	b2ed      	uxtb	r5, r5
 8009c32:	4283      	cmp	r3, r0
 8009c34:	dc05      	bgt.n	8009c42 <__swbuf_r+0x42>
 8009c36:	0021      	movs	r1, r4
 8009c38:	0030      	movs	r0, r6
 8009c3a:	f001 ffd1 	bl	800bbe0 <_fflush_r>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d11d      	bne.n	8009c7e <__swbuf_r+0x7e>
 8009c42:	68a3      	ldr	r3, [r4, #8]
 8009c44:	3001      	adds	r0, #1
 8009c46:	3b01      	subs	r3, #1
 8009c48:	60a3      	str	r3, [r4, #8]
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	1c5a      	adds	r2, r3, #1
 8009c4e:	6022      	str	r2, [r4, #0]
 8009c50:	701f      	strb	r7, [r3, #0]
 8009c52:	6963      	ldr	r3, [r4, #20]
 8009c54:	4283      	cmp	r3, r0
 8009c56:	d004      	beq.n	8009c62 <__swbuf_r+0x62>
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	07db      	lsls	r3, r3, #31
 8009c5c:	d507      	bpl.n	8009c6e <__swbuf_r+0x6e>
 8009c5e:	2d0a      	cmp	r5, #10
 8009c60:	d105      	bne.n	8009c6e <__swbuf_r+0x6e>
 8009c62:	0021      	movs	r1, r4
 8009c64:	0030      	movs	r0, r6
 8009c66:	f001 ffbb 	bl	800bbe0 <_fflush_r>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d107      	bne.n	8009c7e <__swbuf_r+0x7e>
 8009c6e:	0028      	movs	r0, r5
 8009c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c72:	0021      	movs	r1, r4
 8009c74:	0030      	movs	r0, r6
 8009c76:	f000 f805 	bl	8009c84 <__swsetup_r>
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	d0d3      	beq.n	8009c26 <__swbuf_r+0x26>
 8009c7e:	2501      	movs	r5, #1
 8009c80:	426d      	negs	r5, r5
 8009c82:	e7f4      	b.n	8009c6e <__swbuf_r+0x6e>

08009c84 <__swsetup_r>:
 8009c84:	4b30      	ldr	r3, [pc, #192]	; (8009d48 <__swsetup_r+0xc4>)
 8009c86:	b570      	push	{r4, r5, r6, lr}
 8009c88:	0005      	movs	r5, r0
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	000c      	movs	r4, r1
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	d004      	beq.n	8009c9c <__swsetup_r+0x18>
 8009c92:	6a03      	ldr	r3, [r0, #32]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <__swsetup_r+0x18>
 8009c98:	f7ff feee 	bl	8009a78 <__sinit>
 8009c9c:	230c      	movs	r3, #12
 8009c9e:	5ee2      	ldrsh	r2, [r4, r3]
 8009ca0:	b293      	uxth	r3, r2
 8009ca2:	0711      	lsls	r1, r2, #28
 8009ca4:	d423      	bmi.n	8009cee <__swsetup_r+0x6a>
 8009ca6:	06d9      	lsls	r1, r3, #27
 8009ca8:	d407      	bmi.n	8009cba <__swsetup_r+0x36>
 8009caa:	2309      	movs	r3, #9
 8009cac:	2001      	movs	r0, #1
 8009cae:	602b      	str	r3, [r5, #0]
 8009cb0:	3337      	adds	r3, #55	; 0x37
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	81a3      	strh	r3, [r4, #12]
 8009cb6:	4240      	negs	r0, r0
 8009cb8:	bd70      	pop	{r4, r5, r6, pc}
 8009cba:	075b      	lsls	r3, r3, #29
 8009cbc:	d513      	bpl.n	8009ce6 <__swsetup_r+0x62>
 8009cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009cc0:	2900      	cmp	r1, #0
 8009cc2:	d008      	beq.n	8009cd6 <__swsetup_r+0x52>
 8009cc4:	0023      	movs	r3, r4
 8009cc6:	3344      	adds	r3, #68	; 0x44
 8009cc8:	4299      	cmp	r1, r3
 8009cca:	d002      	beq.n	8009cd2 <__swsetup_r+0x4e>
 8009ccc:	0028      	movs	r0, r5
 8009cce:	f000 ff95 	bl	800abfc <_free_r>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009cd6:	2224      	movs	r2, #36	; 0x24
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	4393      	bics	r3, r2
 8009cdc:	81a3      	strh	r3, [r4, #12]
 8009cde:	2300      	movs	r3, #0
 8009ce0:	6063      	str	r3, [r4, #4]
 8009ce2:	6923      	ldr	r3, [r4, #16]
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	2308      	movs	r3, #8
 8009ce8:	89a2      	ldrh	r2, [r4, #12]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	6923      	ldr	r3, [r4, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10b      	bne.n	8009d0c <__swsetup_r+0x88>
 8009cf4:	21a0      	movs	r1, #160	; 0xa0
 8009cf6:	2280      	movs	r2, #128	; 0x80
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	0089      	lsls	r1, r1, #2
 8009cfc:	0092      	lsls	r2, r2, #2
 8009cfe:	400b      	ands	r3, r1
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d003      	beq.n	8009d0c <__swsetup_r+0x88>
 8009d04:	0021      	movs	r1, r4
 8009d06:	0028      	movs	r0, r5
 8009d08:	f001 ffce 	bl	800bca8 <__smakebuf_r>
 8009d0c:	220c      	movs	r2, #12
 8009d0e:	5ea3      	ldrsh	r3, [r4, r2]
 8009d10:	2001      	movs	r0, #1
 8009d12:	001a      	movs	r2, r3
 8009d14:	b299      	uxth	r1, r3
 8009d16:	4002      	ands	r2, r0
 8009d18:	4203      	tst	r3, r0
 8009d1a:	d00f      	beq.n	8009d3c <__swsetup_r+0xb8>
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	60a2      	str	r2, [r4, #8]
 8009d20:	6962      	ldr	r2, [r4, #20]
 8009d22:	4252      	negs	r2, r2
 8009d24:	61a2      	str	r2, [r4, #24]
 8009d26:	2000      	movs	r0, #0
 8009d28:	6922      	ldr	r2, [r4, #16]
 8009d2a:	4282      	cmp	r2, r0
 8009d2c:	d1c4      	bne.n	8009cb8 <__swsetup_r+0x34>
 8009d2e:	0609      	lsls	r1, r1, #24
 8009d30:	d5c2      	bpl.n	8009cb8 <__swsetup_r+0x34>
 8009d32:	2240      	movs	r2, #64	; 0x40
 8009d34:	4313      	orrs	r3, r2
 8009d36:	81a3      	strh	r3, [r4, #12]
 8009d38:	3801      	subs	r0, #1
 8009d3a:	e7bd      	b.n	8009cb8 <__swsetup_r+0x34>
 8009d3c:	0788      	lsls	r0, r1, #30
 8009d3e:	d400      	bmi.n	8009d42 <__swsetup_r+0xbe>
 8009d40:	6962      	ldr	r2, [r4, #20]
 8009d42:	60a2      	str	r2, [r4, #8]
 8009d44:	e7ef      	b.n	8009d26 <__swsetup_r+0xa2>
 8009d46:	46c0      	nop			; (mov r8, r8)
 8009d48:	2000024c 	.word	0x2000024c

08009d4c <memset>:
 8009d4c:	0003      	movs	r3, r0
 8009d4e:	1882      	adds	r2, r0, r2
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d100      	bne.n	8009d56 <memset+0xa>
 8009d54:	4770      	bx	lr
 8009d56:	7019      	strb	r1, [r3, #0]
 8009d58:	3301      	adds	r3, #1
 8009d5a:	e7f9      	b.n	8009d50 <memset+0x4>

08009d5c <_localeconv_r>:
 8009d5c:	4800      	ldr	r0, [pc, #0]	; (8009d60 <_localeconv_r+0x4>)
 8009d5e:	4770      	bx	lr
 8009d60:	20000184 	.word	0x20000184

08009d64 <_close_r>:
 8009d64:	2300      	movs	r3, #0
 8009d66:	b570      	push	{r4, r5, r6, lr}
 8009d68:	4d06      	ldr	r5, [pc, #24]	; (8009d84 <_close_r+0x20>)
 8009d6a:	0004      	movs	r4, r0
 8009d6c:	0008      	movs	r0, r1
 8009d6e:	602b      	str	r3, [r5, #0]
 8009d70:	f7f9 fbef 	bl	8003552 <_close>
 8009d74:	1c43      	adds	r3, r0, #1
 8009d76:	d103      	bne.n	8009d80 <_close_r+0x1c>
 8009d78:	682b      	ldr	r3, [r5, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d000      	beq.n	8009d80 <_close_r+0x1c>
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	bd70      	pop	{r4, r5, r6, pc}
 8009d82:	46c0      	nop			; (mov r8, r8)
 8009d84:	20000778 	.word	0x20000778

08009d88 <_lseek_r>:
 8009d88:	b570      	push	{r4, r5, r6, lr}
 8009d8a:	0004      	movs	r4, r0
 8009d8c:	0008      	movs	r0, r1
 8009d8e:	0011      	movs	r1, r2
 8009d90:	001a      	movs	r2, r3
 8009d92:	2300      	movs	r3, #0
 8009d94:	4d05      	ldr	r5, [pc, #20]	; (8009dac <_lseek_r+0x24>)
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	f7f9 fbfc 	bl	8003594 <_lseek>
 8009d9c:	1c43      	adds	r3, r0, #1
 8009d9e:	d103      	bne.n	8009da8 <_lseek_r+0x20>
 8009da0:	682b      	ldr	r3, [r5, #0]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d000      	beq.n	8009da8 <_lseek_r+0x20>
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	bd70      	pop	{r4, r5, r6, pc}
 8009daa:	46c0      	nop			; (mov r8, r8)
 8009dac:	20000778 	.word	0x20000778

08009db0 <_read_r>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	0004      	movs	r4, r0
 8009db4:	0008      	movs	r0, r1
 8009db6:	0011      	movs	r1, r2
 8009db8:	001a      	movs	r2, r3
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4d05      	ldr	r5, [pc, #20]	; (8009dd4 <_read_r+0x24>)
 8009dbe:	602b      	str	r3, [r5, #0]
 8009dc0:	f7f9 fb8e 	bl	80034e0 <_read>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d103      	bne.n	8009dd0 <_read_r+0x20>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d000      	beq.n	8009dd0 <_read_r+0x20>
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	bd70      	pop	{r4, r5, r6, pc}
 8009dd2:	46c0      	nop			; (mov r8, r8)
 8009dd4:	20000778 	.word	0x20000778

08009dd8 <_write_r>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	0004      	movs	r4, r0
 8009ddc:	0008      	movs	r0, r1
 8009dde:	0011      	movs	r1, r2
 8009de0:	001a      	movs	r2, r3
 8009de2:	2300      	movs	r3, #0
 8009de4:	4d05      	ldr	r5, [pc, #20]	; (8009dfc <_write_r+0x24>)
 8009de6:	602b      	str	r3, [r5, #0]
 8009de8:	f7f9 fb97 	bl	800351a <_write>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	d103      	bne.n	8009df8 <_write_r+0x20>
 8009df0:	682b      	ldr	r3, [r5, #0]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d000      	beq.n	8009df8 <_write_r+0x20>
 8009df6:	6023      	str	r3, [r4, #0]
 8009df8:	bd70      	pop	{r4, r5, r6, pc}
 8009dfa:	46c0      	nop			; (mov r8, r8)
 8009dfc:	20000778 	.word	0x20000778

08009e00 <__errno>:
 8009e00:	4b01      	ldr	r3, [pc, #4]	; (8009e08 <__errno+0x8>)
 8009e02:	6818      	ldr	r0, [r3, #0]
 8009e04:	4770      	bx	lr
 8009e06:	46c0      	nop			; (mov r8, r8)
 8009e08:	2000024c 	.word	0x2000024c

08009e0c <__libc_init_array>:
 8009e0c:	b570      	push	{r4, r5, r6, lr}
 8009e0e:	2600      	movs	r6, #0
 8009e10:	4c0c      	ldr	r4, [pc, #48]	; (8009e44 <__libc_init_array+0x38>)
 8009e12:	4d0d      	ldr	r5, [pc, #52]	; (8009e48 <__libc_init_array+0x3c>)
 8009e14:	1b64      	subs	r4, r4, r5
 8009e16:	10a4      	asrs	r4, r4, #2
 8009e18:	42a6      	cmp	r6, r4
 8009e1a:	d109      	bne.n	8009e30 <__libc_init_array+0x24>
 8009e1c:	2600      	movs	r6, #0
 8009e1e:	f002 f881 	bl	800bf24 <_init>
 8009e22:	4c0a      	ldr	r4, [pc, #40]	; (8009e4c <__libc_init_array+0x40>)
 8009e24:	4d0a      	ldr	r5, [pc, #40]	; (8009e50 <__libc_init_array+0x44>)
 8009e26:	1b64      	subs	r4, r4, r5
 8009e28:	10a4      	asrs	r4, r4, #2
 8009e2a:	42a6      	cmp	r6, r4
 8009e2c:	d105      	bne.n	8009e3a <__libc_init_array+0x2e>
 8009e2e:	bd70      	pop	{r4, r5, r6, pc}
 8009e30:	00b3      	lsls	r3, r6, #2
 8009e32:	58eb      	ldr	r3, [r5, r3]
 8009e34:	4798      	blx	r3
 8009e36:	3601      	adds	r6, #1
 8009e38:	e7ee      	b.n	8009e18 <__libc_init_array+0xc>
 8009e3a:	00b3      	lsls	r3, r6, #2
 8009e3c:	58eb      	ldr	r3, [r5, r3]
 8009e3e:	4798      	blx	r3
 8009e40:	3601      	adds	r6, #1
 8009e42:	e7f2      	b.n	8009e2a <__libc_init_array+0x1e>
 8009e44:	0800c5b8 	.word	0x0800c5b8
 8009e48:	0800c5b8 	.word	0x0800c5b8
 8009e4c:	0800c5bc 	.word	0x0800c5bc
 8009e50:	0800c5b8 	.word	0x0800c5b8

08009e54 <__retarget_lock_init_recursive>:
 8009e54:	4770      	bx	lr

08009e56 <__retarget_lock_acquire_recursive>:
 8009e56:	4770      	bx	lr

08009e58 <__retarget_lock_release_recursive>:
 8009e58:	4770      	bx	lr

08009e5a <memchr>:
 8009e5a:	b2c9      	uxtb	r1, r1
 8009e5c:	1882      	adds	r2, r0, r2
 8009e5e:	4290      	cmp	r0, r2
 8009e60:	d101      	bne.n	8009e66 <memchr+0xc>
 8009e62:	2000      	movs	r0, #0
 8009e64:	4770      	bx	lr
 8009e66:	7803      	ldrb	r3, [r0, #0]
 8009e68:	428b      	cmp	r3, r1
 8009e6a:	d0fb      	beq.n	8009e64 <memchr+0xa>
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	e7f6      	b.n	8009e5e <memchr+0x4>

08009e70 <memcpy>:
 8009e70:	2300      	movs	r3, #0
 8009e72:	b510      	push	{r4, lr}
 8009e74:	429a      	cmp	r2, r3
 8009e76:	d100      	bne.n	8009e7a <memcpy+0xa>
 8009e78:	bd10      	pop	{r4, pc}
 8009e7a:	5ccc      	ldrb	r4, [r1, r3]
 8009e7c:	54c4      	strb	r4, [r0, r3]
 8009e7e:	3301      	adds	r3, #1
 8009e80:	e7f8      	b.n	8009e74 <memcpy+0x4>
	...

08009e84 <__assert_func>:
 8009e84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009e86:	0014      	movs	r4, r2
 8009e88:	001a      	movs	r2, r3
 8009e8a:	4b09      	ldr	r3, [pc, #36]	; (8009eb0 <__assert_func+0x2c>)
 8009e8c:	0005      	movs	r5, r0
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	000e      	movs	r6, r1
 8009e92:	68d8      	ldr	r0, [r3, #12]
 8009e94:	4b07      	ldr	r3, [pc, #28]	; (8009eb4 <__assert_func+0x30>)
 8009e96:	2c00      	cmp	r4, #0
 8009e98:	d101      	bne.n	8009e9e <__assert_func+0x1a>
 8009e9a:	4b07      	ldr	r3, [pc, #28]	; (8009eb8 <__assert_func+0x34>)
 8009e9c:	001c      	movs	r4, r3
 8009e9e:	4907      	ldr	r1, [pc, #28]	; (8009ebc <__assert_func+0x38>)
 8009ea0:	9301      	str	r3, [sp, #4]
 8009ea2:	9402      	str	r4, [sp, #8]
 8009ea4:	002b      	movs	r3, r5
 8009ea6:	9600      	str	r6, [sp, #0]
 8009ea8:	f001 fec6 	bl	800bc38 <fiprintf>
 8009eac:	f001 ff84 	bl	800bdb8 <abort>
 8009eb0:	2000024c 	.word	0x2000024c
 8009eb4:	0800c286 	.word	0x0800c286
 8009eb8:	0800c2c1 	.word	0x0800c2c1
 8009ebc:	0800c293 	.word	0x0800c293

08009ec0 <quorem>:
 8009ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ec2:	6902      	ldr	r2, [r0, #16]
 8009ec4:	690b      	ldr	r3, [r1, #16]
 8009ec6:	b089      	sub	sp, #36	; 0x24
 8009ec8:	0007      	movs	r7, r0
 8009eca:	9104      	str	r1, [sp, #16]
 8009ecc:	2000      	movs	r0, #0
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	db69      	blt.n	8009fa6 <quorem+0xe6>
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	009c      	lsls	r4, r3, #2
 8009ed6:	9301      	str	r3, [sp, #4]
 8009ed8:	000b      	movs	r3, r1
 8009eda:	3314      	adds	r3, #20
 8009edc:	9306      	str	r3, [sp, #24]
 8009ede:	191b      	adds	r3, r3, r4
 8009ee0:	9305      	str	r3, [sp, #20]
 8009ee2:	003b      	movs	r3, r7
 8009ee4:	3314      	adds	r3, #20
 8009ee6:	9303      	str	r3, [sp, #12]
 8009ee8:	191c      	adds	r4, r3, r4
 8009eea:	9b05      	ldr	r3, [sp, #20]
 8009eec:	6826      	ldr	r6, [r4, #0]
 8009eee:	681d      	ldr	r5, [r3, #0]
 8009ef0:	0030      	movs	r0, r6
 8009ef2:	3501      	adds	r5, #1
 8009ef4:	0029      	movs	r1, r5
 8009ef6:	f7f6 f91f 	bl	8000138 <__udivsi3>
 8009efa:	9002      	str	r0, [sp, #8]
 8009efc:	42ae      	cmp	r6, r5
 8009efe:	d329      	bcc.n	8009f54 <quorem+0x94>
 8009f00:	9b06      	ldr	r3, [sp, #24]
 8009f02:	2600      	movs	r6, #0
 8009f04:	469c      	mov	ip, r3
 8009f06:	9d03      	ldr	r5, [sp, #12]
 8009f08:	9606      	str	r6, [sp, #24]
 8009f0a:	4662      	mov	r2, ip
 8009f0c:	ca08      	ldmia	r2!, {r3}
 8009f0e:	6828      	ldr	r0, [r5, #0]
 8009f10:	4694      	mov	ip, r2
 8009f12:	9a02      	ldr	r2, [sp, #8]
 8009f14:	b299      	uxth	r1, r3
 8009f16:	4351      	muls	r1, r2
 8009f18:	0c1b      	lsrs	r3, r3, #16
 8009f1a:	4353      	muls	r3, r2
 8009f1c:	1989      	adds	r1, r1, r6
 8009f1e:	0c0a      	lsrs	r2, r1, #16
 8009f20:	189b      	adds	r3, r3, r2
 8009f22:	9307      	str	r3, [sp, #28]
 8009f24:	0c1e      	lsrs	r6, r3, #16
 8009f26:	9b06      	ldr	r3, [sp, #24]
 8009f28:	b282      	uxth	r2, r0
 8009f2a:	18d2      	adds	r2, r2, r3
 8009f2c:	466b      	mov	r3, sp
 8009f2e:	b289      	uxth	r1, r1
 8009f30:	8b9b      	ldrh	r3, [r3, #28]
 8009f32:	1a52      	subs	r2, r2, r1
 8009f34:	0c01      	lsrs	r1, r0, #16
 8009f36:	1ac9      	subs	r1, r1, r3
 8009f38:	1413      	asrs	r3, r2, #16
 8009f3a:	18cb      	adds	r3, r1, r3
 8009f3c:	1419      	asrs	r1, r3, #16
 8009f3e:	b292      	uxth	r2, r2
 8009f40:	041b      	lsls	r3, r3, #16
 8009f42:	4313      	orrs	r3, r2
 8009f44:	c508      	stmia	r5!, {r3}
 8009f46:	9b05      	ldr	r3, [sp, #20]
 8009f48:	9106      	str	r1, [sp, #24]
 8009f4a:	4563      	cmp	r3, ip
 8009f4c:	d2dd      	bcs.n	8009f0a <quorem+0x4a>
 8009f4e:	6823      	ldr	r3, [r4, #0]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d030      	beq.n	8009fb6 <quorem+0xf6>
 8009f54:	0038      	movs	r0, r7
 8009f56:	9904      	ldr	r1, [sp, #16]
 8009f58:	f001 f9f0 	bl	800b33c <__mcmp>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	db21      	blt.n	8009fa4 <quorem+0xe4>
 8009f60:	0038      	movs	r0, r7
 8009f62:	2600      	movs	r6, #0
 8009f64:	9b02      	ldr	r3, [sp, #8]
 8009f66:	9c04      	ldr	r4, [sp, #16]
 8009f68:	3301      	adds	r3, #1
 8009f6a:	9302      	str	r3, [sp, #8]
 8009f6c:	3014      	adds	r0, #20
 8009f6e:	3414      	adds	r4, #20
 8009f70:	6803      	ldr	r3, [r0, #0]
 8009f72:	cc02      	ldmia	r4!, {r1}
 8009f74:	b29d      	uxth	r5, r3
 8009f76:	19ad      	adds	r5, r5, r6
 8009f78:	b28a      	uxth	r2, r1
 8009f7a:	1aaa      	subs	r2, r5, r2
 8009f7c:	0c09      	lsrs	r1, r1, #16
 8009f7e:	0c1b      	lsrs	r3, r3, #16
 8009f80:	1a5b      	subs	r3, r3, r1
 8009f82:	1411      	asrs	r1, r2, #16
 8009f84:	185b      	adds	r3, r3, r1
 8009f86:	141e      	asrs	r6, r3, #16
 8009f88:	b292      	uxth	r2, r2
 8009f8a:	041b      	lsls	r3, r3, #16
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	c008      	stmia	r0!, {r3}
 8009f90:	9b05      	ldr	r3, [sp, #20]
 8009f92:	42a3      	cmp	r3, r4
 8009f94:	d2ec      	bcs.n	8009f70 <quorem+0xb0>
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	9a03      	ldr	r2, [sp, #12]
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	18d3      	adds	r3, r2, r3
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	2a00      	cmp	r2, #0
 8009fa2:	d015      	beq.n	8009fd0 <quorem+0x110>
 8009fa4:	9802      	ldr	r0, [sp, #8]
 8009fa6:	b009      	add	sp, #36	; 0x24
 8009fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d106      	bne.n	8009fbe <quorem+0xfe>
 8009fb0:	9b01      	ldr	r3, [sp, #4]
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	9301      	str	r3, [sp, #4]
 8009fb6:	9b03      	ldr	r3, [sp, #12]
 8009fb8:	3c04      	subs	r4, #4
 8009fba:	42a3      	cmp	r3, r4
 8009fbc:	d3f5      	bcc.n	8009faa <quorem+0xea>
 8009fbe:	9b01      	ldr	r3, [sp, #4]
 8009fc0:	613b      	str	r3, [r7, #16]
 8009fc2:	e7c7      	b.n	8009f54 <quorem+0x94>
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	2a00      	cmp	r2, #0
 8009fc8:	d106      	bne.n	8009fd8 <quorem+0x118>
 8009fca:	9a01      	ldr	r2, [sp, #4]
 8009fcc:	3a01      	subs	r2, #1
 8009fce:	9201      	str	r2, [sp, #4]
 8009fd0:	9a03      	ldr	r2, [sp, #12]
 8009fd2:	3b04      	subs	r3, #4
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d3f5      	bcc.n	8009fc4 <quorem+0x104>
 8009fd8:	9b01      	ldr	r3, [sp, #4]
 8009fda:	613b      	str	r3, [r7, #16]
 8009fdc:	e7e2      	b.n	8009fa4 <quorem+0xe4>
	...

08009fe0 <_dtoa_r>:
 8009fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fe2:	0014      	movs	r4, r2
 8009fe4:	001d      	movs	r5, r3
 8009fe6:	69c6      	ldr	r6, [r0, #28]
 8009fe8:	b09d      	sub	sp, #116	; 0x74
 8009fea:	9408      	str	r4, [sp, #32]
 8009fec:	9509      	str	r5, [sp, #36]	; 0x24
 8009fee:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009ff0:	9004      	str	r0, [sp, #16]
 8009ff2:	2e00      	cmp	r6, #0
 8009ff4:	d10f      	bne.n	800a016 <_dtoa_r+0x36>
 8009ff6:	2010      	movs	r0, #16
 8009ff8:	f000 fe4a 	bl	800ac90 <malloc>
 8009ffc:	9b04      	ldr	r3, [sp, #16]
 8009ffe:	1e02      	subs	r2, r0, #0
 800a000:	61d8      	str	r0, [r3, #28]
 800a002:	d104      	bne.n	800a00e <_dtoa_r+0x2e>
 800a004:	21ef      	movs	r1, #239	; 0xef
 800a006:	4bc6      	ldr	r3, [pc, #792]	; (800a320 <_dtoa_r+0x340>)
 800a008:	48c6      	ldr	r0, [pc, #792]	; (800a324 <_dtoa_r+0x344>)
 800a00a:	f7ff ff3b 	bl	8009e84 <__assert_func>
 800a00e:	6046      	str	r6, [r0, #4]
 800a010:	6086      	str	r6, [r0, #8]
 800a012:	6006      	str	r6, [r0, #0]
 800a014:	60c6      	str	r6, [r0, #12]
 800a016:	9b04      	ldr	r3, [sp, #16]
 800a018:	69db      	ldr	r3, [r3, #28]
 800a01a:	6819      	ldr	r1, [r3, #0]
 800a01c:	2900      	cmp	r1, #0
 800a01e:	d00b      	beq.n	800a038 <_dtoa_r+0x58>
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	2301      	movs	r3, #1
 800a024:	4093      	lsls	r3, r2
 800a026:	604a      	str	r2, [r1, #4]
 800a028:	608b      	str	r3, [r1, #8]
 800a02a:	9804      	ldr	r0, [sp, #16]
 800a02c:	f000 ff44 	bl	800aeb8 <_Bfree>
 800a030:	2200      	movs	r2, #0
 800a032:	9b04      	ldr	r3, [sp, #16]
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	2d00      	cmp	r5, #0
 800a03a:	da1e      	bge.n	800a07a <_dtoa_r+0x9a>
 800a03c:	2301      	movs	r3, #1
 800a03e:	603b      	str	r3, [r7, #0]
 800a040:	006b      	lsls	r3, r5, #1
 800a042:	085b      	lsrs	r3, r3, #1
 800a044:	9309      	str	r3, [sp, #36]	; 0x24
 800a046:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a048:	4bb7      	ldr	r3, [pc, #732]	; (800a328 <_dtoa_r+0x348>)
 800a04a:	4ab7      	ldr	r2, [pc, #732]	; (800a328 <_dtoa_r+0x348>)
 800a04c:	403b      	ands	r3, r7
 800a04e:	4293      	cmp	r3, r2
 800a050:	d116      	bne.n	800a080 <_dtoa_r+0xa0>
 800a052:	4bb6      	ldr	r3, [pc, #728]	; (800a32c <_dtoa_r+0x34c>)
 800a054:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a056:	6013      	str	r3, [r2, #0]
 800a058:	033b      	lsls	r3, r7, #12
 800a05a:	0b1b      	lsrs	r3, r3, #12
 800a05c:	4323      	orrs	r3, r4
 800a05e:	d101      	bne.n	800a064 <_dtoa_r+0x84>
 800a060:	f000 fdb5 	bl	800abce <_dtoa_r+0xbee>
 800a064:	4bb2      	ldr	r3, [pc, #712]	; (800a330 <_dtoa_r+0x350>)
 800a066:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a068:	9306      	str	r3, [sp, #24]
 800a06a:	2a00      	cmp	r2, #0
 800a06c:	d002      	beq.n	800a074 <_dtoa_r+0x94>
 800a06e:	4bb1      	ldr	r3, [pc, #708]	; (800a334 <_dtoa_r+0x354>)
 800a070:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a072:	6013      	str	r3, [r2, #0]
 800a074:	9806      	ldr	r0, [sp, #24]
 800a076:	b01d      	add	sp, #116	; 0x74
 800a078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a07a:	2300      	movs	r3, #0
 800a07c:	603b      	str	r3, [r7, #0]
 800a07e:	e7e2      	b.n	800a046 <_dtoa_r+0x66>
 800a080:	9a08      	ldr	r2, [sp, #32]
 800a082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a084:	9210      	str	r2, [sp, #64]	; 0x40
 800a086:	9311      	str	r3, [sp, #68]	; 0x44
 800a088:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a08a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a08c:	2200      	movs	r2, #0
 800a08e:	2300      	movs	r3, #0
 800a090:	f7f6 f9d8 	bl	8000444 <__aeabi_dcmpeq>
 800a094:	1e06      	subs	r6, r0, #0
 800a096:	d009      	beq.n	800a0ac <_dtoa_r+0xcc>
 800a098:	2301      	movs	r3, #1
 800a09a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a09c:	6013      	str	r3, [r2, #0]
 800a09e:	4ba6      	ldr	r3, [pc, #664]	; (800a338 <_dtoa_r+0x358>)
 800a0a0:	9306      	str	r3, [sp, #24]
 800a0a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0e5      	beq.n	800a074 <_dtoa_r+0x94>
 800a0a8:	4ba4      	ldr	r3, [pc, #656]	; (800a33c <_dtoa_r+0x35c>)
 800a0aa:	e7e1      	b.n	800a070 <_dtoa_r+0x90>
 800a0ac:	ab1a      	add	r3, sp, #104	; 0x68
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	ab1b      	add	r3, sp, #108	; 0x6c
 800a0b2:	9300      	str	r3, [sp, #0]
 800a0b4:	9804      	ldr	r0, [sp, #16]
 800a0b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a0b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0ba:	f001 f9f3 	bl	800b4a4 <__d2b>
 800a0be:	007a      	lsls	r2, r7, #1
 800a0c0:	9005      	str	r0, [sp, #20]
 800a0c2:	0d52      	lsrs	r2, r2, #21
 800a0c4:	d100      	bne.n	800a0c8 <_dtoa_r+0xe8>
 800a0c6:	e07b      	b.n	800a1c0 <_dtoa_r+0x1e0>
 800a0c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a0ca:	9617      	str	r6, [sp, #92]	; 0x5c
 800a0cc:	0319      	lsls	r1, r3, #12
 800a0ce:	4b9c      	ldr	r3, [pc, #624]	; (800a340 <_dtoa_r+0x360>)
 800a0d0:	0b09      	lsrs	r1, r1, #12
 800a0d2:	430b      	orrs	r3, r1
 800a0d4:	499b      	ldr	r1, [pc, #620]	; (800a344 <_dtoa_r+0x364>)
 800a0d6:	1857      	adds	r7, r2, r1
 800a0d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a0da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a0dc:	0019      	movs	r1, r3
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4b99      	ldr	r3, [pc, #612]	; (800a348 <_dtoa_r+0x368>)
 800a0e2:	f7f8 fb25 	bl	8002730 <__aeabi_dsub>
 800a0e6:	4a99      	ldr	r2, [pc, #612]	; (800a34c <_dtoa_r+0x36c>)
 800a0e8:	4b99      	ldr	r3, [pc, #612]	; (800a350 <_dtoa_r+0x370>)
 800a0ea:	f7f8 f85f 	bl	80021ac <__aeabi_dmul>
 800a0ee:	4a99      	ldr	r2, [pc, #612]	; (800a354 <_dtoa_r+0x374>)
 800a0f0:	4b99      	ldr	r3, [pc, #612]	; (800a358 <_dtoa_r+0x378>)
 800a0f2:	f7f7 f901 	bl	80012f8 <__aeabi_dadd>
 800a0f6:	0004      	movs	r4, r0
 800a0f8:	0038      	movs	r0, r7
 800a0fa:	000d      	movs	r5, r1
 800a0fc:	f7f8 feee 	bl	8002edc <__aeabi_i2d>
 800a100:	4a96      	ldr	r2, [pc, #600]	; (800a35c <_dtoa_r+0x37c>)
 800a102:	4b97      	ldr	r3, [pc, #604]	; (800a360 <_dtoa_r+0x380>)
 800a104:	f7f8 f852 	bl	80021ac <__aeabi_dmul>
 800a108:	0002      	movs	r2, r0
 800a10a:	000b      	movs	r3, r1
 800a10c:	0020      	movs	r0, r4
 800a10e:	0029      	movs	r1, r5
 800a110:	f7f7 f8f2 	bl	80012f8 <__aeabi_dadd>
 800a114:	0004      	movs	r4, r0
 800a116:	000d      	movs	r5, r1
 800a118:	f7f8 feaa 	bl	8002e70 <__aeabi_d2iz>
 800a11c:	2200      	movs	r2, #0
 800a11e:	9003      	str	r0, [sp, #12]
 800a120:	2300      	movs	r3, #0
 800a122:	0020      	movs	r0, r4
 800a124:	0029      	movs	r1, r5
 800a126:	f7f6 f993 	bl	8000450 <__aeabi_dcmplt>
 800a12a:	2800      	cmp	r0, #0
 800a12c:	d00b      	beq.n	800a146 <_dtoa_r+0x166>
 800a12e:	9803      	ldr	r0, [sp, #12]
 800a130:	f7f8 fed4 	bl	8002edc <__aeabi_i2d>
 800a134:	002b      	movs	r3, r5
 800a136:	0022      	movs	r2, r4
 800a138:	f7f6 f984 	bl	8000444 <__aeabi_dcmpeq>
 800a13c:	4243      	negs	r3, r0
 800a13e:	4158      	adcs	r0, r3
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	1a1b      	subs	r3, r3, r0
 800a144:	9303      	str	r3, [sp, #12]
 800a146:	2301      	movs	r3, #1
 800a148:	9316      	str	r3, [sp, #88]	; 0x58
 800a14a:	9b03      	ldr	r3, [sp, #12]
 800a14c:	2b16      	cmp	r3, #22
 800a14e:	d810      	bhi.n	800a172 <_dtoa_r+0x192>
 800a150:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a152:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a154:	9a03      	ldr	r2, [sp, #12]
 800a156:	4b83      	ldr	r3, [pc, #524]	; (800a364 <_dtoa_r+0x384>)
 800a158:	00d2      	lsls	r2, r2, #3
 800a15a:	189b      	adds	r3, r3, r2
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	f7f6 f976 	bl	8000450 <__aeabi_dcmplt>
 800a164:	2800      	cmp	r0, #0
 800a166:	d047      	beq.n	800a1f8 <_dtoa_r+0x218>
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	3b01      	subs	r3, #1
 800a16c:	9303      	str	r3, [sp, #12]
 800a16e:	2300      	movs	r3, #0
 800a170:	9316      	str	r3, [sp, #88]	; 0x58
 800a172:	2200      	movs	r2, #0
 800a174:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800a176:	920a      	str	r2, [sp, #40]	; 0x28
 800a178:	1bdb      	subs	r3, r3, r7
 800a17a:	1e5a      	subs	r2, r3, #1
 800a17c:	d53e      	bpl.n	800a1fc <_dtoa_r+0x21c>
 800a17e:	2201      	movs	r2, #1
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	930a      	str	r3, [sp, #40]	; 0x28
 800a184:	2300      	movs	r3, #0
 800a186:	930c      	str	r3, [sp, #48]	; 0x30
 800a188:	9b03      	ldr	r3, [sp, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	db38      	blt.n	800a200 <_dtoa_r+0x220>
 800a18e:	9a03      	ldr	r2, [sp, #12]
 800a190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a192:	4694      	mov	ip, r2
 800a194:	4463      	add	r3, ip
 800a196:	930c      	str	r3, [sp, #48]	; 0x30
 800a198:	2300      	movs	r3, #0
 800a19a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a19c:	930d      	str	r3, [sp, #52]	; 0x34
 800a19e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1a0:	2401      	movs	r4, #1
 800a1a2:	2b09      	cmp	r3, #9
 800a1a4:	d867      	bhi.n	800a276 <_dtoa_r+0x296>
 800a1a6:	2b05      	cmp	r3, #5
 800a1a8:	dd02      	ble.n	800a1b0 <_dtoa_r+0x1d0>
 800a1aa:	2400      	movs	r4, #0
 800a1ac:	3b04      	subs	r3, #4
 800a1ae:	9322      	str	r3, [sp, #136]	; 0x88
 800a1b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a1b2:	1e98      	subs	r0, r3, #2
 800a1b4:	2803      	cmp	r0, #3
 800a1b6:	d867      	bhi.n	800a288 <_dtoa_r+0x2a8>
 800a1b8:	f7f5 ffaa 	bl	8000110 <__gnu_thumb1_case_uqi>
 800a1bc:	5b383a2b 	.word	0x5b383a2b
 800a1c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1c2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800a1c4:	18f6      	adds	r6, r6, r3
 800a1c6:	4b68      	ldr	r3, [pc, #416]	; (800a368 <_dtoa_r+0x388>)
 800a1c8:	18f2      	adds	r2, r6, r3
 800a1ca:	2a20      	cmp	r2, #32
 800a1cc:	dd0f      	ble.n	800a1ee <_dtoa_r+0x20e>
 800a1ce:	2340      	movs	r3, #64	; 0x40
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	409f      	lsls	r7, r3
 800a1d4:	4b65      	ldr	r3, [pc, #404]	; (800a36c <_dtoa_r+0x38c>)
 800a1d6:	0038      	movs	r0, r7
 800a1d8:	18f3      	adds	r3, r6, r3
 800a1da:	40dc      	lsrs	r4, r3
 800a1dc:	4320      	orrs	r0, r4
 800a1de:	f7f8 fead 	bl	8002f3c <__aeabi_ui2d>
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4b62      	ldr	r3, [pc, #392]	; (800a370 <_dtoa_r+0x390>)
 800a1e6:	1e77      	subs	r7, r6, #1
 800a1e8:	18cb      	adds	r3, r1, r3
 800a1ea:	9217      	str	r2, [sp, #92]	; 0x5c
 800a1ec:	e776      	b.n	800a0dc <_dtoa_r+0xfc>
 800a1ee:	2320      	movs	r3, #32
 800a1f0:	0020      	movs	r0, r4
 800a1f2:	1a9b      	subs	r3, r3, r2
 800a1f4:	4098      	lsls	r0, r3
 800a1f6:	e7f2      	b.n	800a1de <_dtoa_r+0x1fe>
 800a1f8:	9016      	str	r0, [sp, #88]	; 0x58
 800a1fa:	e7ba      	b.n	800a172 <_dtoa_r+0x192>
 800a1fc:	920c      	str	r2, [sp, #48]	; 0x30
 800a1fe:	e7c3      	b.n	800a188 <_dtoa_r+0x1a8>
 800a200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a202:	9a03      	ldr	r2, [sp, #12]
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	930a      	str	r3, [sp, #40]	; 0x28
 800a208:	4253      	negs	r3, r2
 800a20a:	930d      	str	r3, [sp, #52]	; 0x34
 800a20c:	2300      	movs	r3, #0
 800a20e:	9313      	str	r3, [sp, #76]	; 0x4c
 800a210:	e7c5      	b.n	800a19e <_dtoa_r+0x1be>
 800a212:	2300      	movs	r3, #0
 800a214:	930f      	str	r3, [sp, #60]	; 0x3c
 800a216:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a218:	930b      	str	r3, [sp, #44]	; 0x2c
 800a21a:	9307      	str	r3, [sp, #28]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	dc13      	bgt.n	800a248 <_dtoa_r+0x268>
 800a220:	2301      	movs	r3, #1
 800a222:	001a      	movs	r2, r3
 800a224:	930b      	str	r3, [sp, #44]	; 0x2c
 800a226:	9307      	str	r3, [sp, #28]
 800a228:	9223      	str	r2, [sp, #140]	; 0x8c
 800a22a:	e00d      	b.n	800a248 <_dtoa_r+0x268>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e7f1      	b.n	800a214 <_dtoa_r+0x234>
 800a230:	2300      	movs	r3, #0
 800a232:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800a234:	930f      	str	r3, [sp, #60]	; 0x3c
 800a236:	4694      	mov	ip, r2
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	4463      	add	r3, ip
 800a23c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a23e:	3301      	adds	r3, #1
 800a240:	9307      	str	r3, [sp, #28]
 800a242:	2b00      	cmp	r3, #0
 800a244:	dc00      	bgt.n	800a248 <_dtoa_r+0x268>
 800a246:	2301      	movs	r3, #1
 800a248:	9a04      	ldr	r2, [sp, #16]
 800a24a:	2100      	movs	r1, #0
 800a24c:	69d0      	ldr	r0, [r2, #28]
 800a24e:	2204      	movs	r2, #4
 800a250:	0015      	movs	r5, r2
 800a252:	3514      	adds	r5, #20
 800a254:	429d      	cmp	r5, r3
 800a256:	d91b      	bls.n	800a290 <_dtoa_r+0x2b0>
 800a258:	6041      	str	r1, [r0, #4]
 800a25a:	9804      	ldr	r0, [sp, #16]
 800a25c:	f000 fde8 	bl	800ae30 <_Balloc>
 800a260:	9006      	str	r0, [sp, #24]
 800a262:	2800      	cmp	r0, #0
 800a264:	d117      	bne.n	800a296 <_dtoa_r+0x2b6>
 800a266:	21b0      	movs	r1, #176	; 0xb0
 800a268:	4b42      	ldr	r3, [pc, #264]	; (800a374 <_dtoa_r+0x394>)
 800a26a:	482e      	ldr	r0, [pc, #184]	; (800a324 <_dtoa_r+0x344>)
 800a26c:	9a06      	ldr	r2, [sp, #24]
 800a26e:	31ff      	adds	r1, #255	; 0xff
 800a270:	e6cb      	b.n	800a00a <_dtoa_r+0x2a>
 800a272:	2301      	movs	r3, #1
 800a274:	e7dd      	b.n	800a232 <_dtoa_r+0x252>
 800a276:	2300      	movs	r3, #0
 800a278:	940f      	str	r4, [sp, #60]	; 0x3c
 800a27a:	9322      	str	r3, [sp, #136]	; 0x88
 800a27c:	3b01      	subs	r3, #1
 800a27e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a280:	9307      	str	r3, [sp, #28]
 800a282:	2200      	movs	r2, #0
 800a284:	3313      	adds	r3, #19
 800a286:	e7cf      	b.n	800a228 <_dtoa_r+0x248>
 800a288:	2301      	movs	r3, #1
 800a28a:	930f      	str	r3, [sp, #60]	; 0x3c
 800a28c:	3b02      	subs	r3, #2
 800a28e:	e7f6      	b.n	800a27e <_dtoa_r+0x29e>
 800a290:	3101      	adds	r1, #1
 800a292:	0052      	lsls	r2, r2, #1
 800a294:	e7dc      	b.n	800a250 <_dtoa_r+0x270>
 800a296:	9b04      	ldr	r3, [sp, #16]
 800a298:	9a06      	ldr	r2, [sp, #24]
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	601a      	str	r2, [r3, #0]
 800a29e:	9b07      	ldr	r3, [sp, #28]
 800a2a0:	2b0e      	cmp	r3, #14
 800a2a2:	d900      	bls.n	800a2a6 <_dtoa_r+0x2c6>
 800a2a4:	e0e5      	b.n	800a472 <_dtoa_r+0x492>
 800a2a6:	2c00      	cmp	r4, #0
 800a2a8:	d100      	bne.n	800a2ac <_dtoa_r+0x2cc>
 800a2aa:	e0e2      	b.n	800a472 <_dtoa_r+0x492>
 800a2ac:	9b03      	ldr	r3, [sp, #12]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	dd64      	ble.n	800a37c <_dtoa_r+0x39c>
 800a2b2:	210f      	movs	r1, #15
 800a2b4:	9a03      	ldr	r2, [sp, #12]
 800a2b6:	4b2b      	ldr	r3, [pc, #172]	; (800a364 <_dtoa_r+0x384>)
 800a2b8:	400a      	ands	r2, r1
 800a2ba:	00d2      	lsls	r2, r2, #3
 800a2bc:	189b      	adds	r3, r3, r2
 800a2be:	681e      	ldr	r6, [r3, #0]
 800a2c0:	685f      	ldr	r7, [r3, #4]
 800a2c2:	9b03      	ldr	r3, [sp, #12]
 800a2c4:	2402      	movs	r4, #2
 800a2c6:	111d      	asrs	r5, r3, #4
 800a2c8:	05db      	lsls	r3, r3, #23
 800a2ca:	d50a      	bpl.n	800a2e2 <_dtoa_r+0x302>
 800a2cc:	4b2a      	ldr	r3, [pc, #168]	; (800a378 <_dtoa_r+0x398>)
 800a2ce:	400d      	ands	r5, r1
 800a2d0:	6a1a      	ldr	r2, [r3, #32]
 800a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a2d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a2d8:	f7f7 fb6e 	bl	80019b8 <__aeabi_ddiv>
 800a2dc:	9008      	str	r0, [sp, #32]
 800a2de:	9109      	str	r1, [sp, #36]	; 0x24
 800a2e0:	3401      	adds	r4, #1
 800a2e2:	4b25      	ldr	r3, [pc, #148]	; (800a378 <_dtoa_r+0x398>)
 800a2e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a2e6:	2d00      	cmp	r5, #0
 800a2e8:	d108      	bne.n	800a2fc <_dtoa_r+0x31c>
 800a2ea:	9808      	ldr	r0, [sp, #32]
 800a2ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2ee:	0032      	movs	r2, r6
 800a2f0:	003b      	movs	r3, r7
 800a2f2:	f7f7 fb61 	bl	80019b8 <__aeabi_ddiv>
 800a2f6:	9008      	str	r0, [sp, #32]
 800a2f8:	9109      	str	r1, [sp, #36]	; 0x24
 800a2fa:	e05a      	b.n	800a3b2 <_dtoa_r+0x3d2>
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	421d      	tst	r5, r3
 800a300:	d009      	beq.n	800a316 <_dtoa_r+0x336>
 800a302:	18e4      	adds	r4, r4, r3
 800a304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a306:	0030      	movs	r0, r6
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	0039      	movs	r1, r7
 800a30e:	f7f7 ff4d 	bl	80021ac <__aeabi_dmul>
 800a312:	0006      	movs	r6, r0
 800a314:	000f      	movs	r7, r1
 800a316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a318:	106d      	asrs	r5, r5, #1
 800a31a:	3308      	adds	r3, #8
 800a31c:	e7e2      	b.n	800a2e4 <_dtoa_r+0x304>
 800a31e:	46c0      	nop			; (mov r8, r8)
 800a320:	0800c2cf 	.word	0x0800c2cf
 800a324:	0800c2e6 	.word	0x0800c2e6
 800a328:	7ff00000 	.word	0x7ff00000
 800a32c:	0000270f 	.word	0x0000270f
 800a330:	0800c2cb 	.word	0x0800c2cb
 800a334:	0800c2ce 	.word	0x0800c2ce
 800a338:	0800c258 	.word	0x0800c258
 800a33c:	0800c259 	.word	0x0800c259
 800a340:	3ff00000 	.word	0x3ff00000
 800a344:	fffffc01 	.word	0xfffffc01
 800a348:	3ff80000 	.word	0x3ff80000
 800a34c:	636f4361 	.word	0x636f4361
 800a350:	3fd287a7 	.word	0x3fd287a7
 800a354:	8b60c8b3 	.word	0x8b60c8b3
 800a358:	3fc68a28 	.word	0x3fc68a28
 800a35c:	509f79fb 	.word	0x509f79fb
 800a360:	3fd34413 	.word	0x3fd34413
 800a364:	0800c3d0 	.word	0x0800c3d0
 800a368:	00000432 	.word	0x00000432
 800a36c:	00000412 	.word	0x00000412
 800a370:	fe100000 	.word	0xfe100000
 800a374:	0800c33e 	.word	0x0800c33e
 800a378:	0800c3a8 	.word	0x0800c3a8
 800a37c:	9b03      	ldr	r3, [sp, #12]
 800a37e:	2402      	movs	r4, #2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d016      	beq.n	800a3b2 <_dtoa_r+0x3d2>
 800a384:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a386:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a388:	220f      	movs	r2, #15
 800a38a:	425d      	negs	r5, r3
 800a38c:	402a      	ands	r2, r5
 800a38e:	4bdd      	ldr	r3, [pc, #884]	; (800a704 <_dtoa_r+0x724>)
 800a390:	00d2      	lsls	r2, r2, #3
 800a392:	189b      	adds	r3, r3, r2
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f7f7 ff08 	bl	80021ac <__aeabi_dmul>
 800a39c:	2701      	movs	r7, #1
 800a39e:	2300      	movs	r3, #0
 800a3a0:	9008      	str	r0, [sp, #32]
 800a3a2:	9109      	str	r1, [sp, #36]	; 0x24
 800a3a4:	4ed8      	ldr	r6, [pc, #864]	; (800a708 <_dtoa_r+0x728>)
 800a3a6:	112d      	asrs	r5, r5, #4
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	d000      	beq.n	800a3ae <_dtoa_r+0x3ce>
 800a3ac:	e091      	b.n	800a4d2 <_dtoa_r+0x4f2>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1a1      	bne.n	800a2f6 <_dtoa_r+0x316>
 800a3b2:	9e08      	ldr	r6, [sp, #32]
 800a3b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d100      	bne.n	800a3be <_dtoa_r+0x3de>
 800a3bc:	e094      	b.n	800a4e8 <_dtoa_r+0x508>
 800a3be:	2200      	movs	r2, #0
 800a3c0:	0030      	movs	r0, r6
 800a3c2:	0039      	movs	r1, r7
 800a3c4:	4bd1      	ldr	r3, [pc, #836]	; (800a70c <_dtoa_r+0x72c>)
 800a3c6:	f7f6 f843 	bl	8000450 <__aeabi_dcmplt>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d100      	bne.n	800a3d0 <_dtoa_r+0x3f0>
 800a3ce:	e08b      	b.n	800a4e8 <_dtoa_r+0x508>
 800a3d0:	9b07      	ldr	r3, [sp, #28]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d100      	bne.n	800a3d8 <_dtoa_r+0x3f8>
 800a3d6:	e087      	b.n	800a4e8 <_dtoa_r+0x508>
 800a3d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dd45      	ble.n	800a46a <_dtoa_r+0x48a>
 800a3de:	9b03      	ldr	r3, [sp, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	930e      	str	r3, [sp, #56]	; 0x38
 800a3e6:	0030      	movs	r0, r6
 800a3e8:	4bc9      	ldr	r3, [pc, #804]	; (800a710 <_dtoa_r+0x730>)
 800a3ea:	0039      	movs	r1, r7
 800a3ec:	f7f7 fede 	bl	80021ac <__aeabi_dmul>
 800a3f0:	9008      	str	r0, [sp, #32]
 800a3f2:	9109      	str	r1, [sp, #36]	; 0x24
 800a3f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3f6:	3401      	adds	r4, #1
 800a3f8:	0020      	movs	r0, r4
 800a3fa:	9e08      	ldr	r6, [sp, #32]
 800a3fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a3fe:	9312      	str	r3, [sp, #72]	; 0x48
 800a400:	f7f8 fd6c 	bl	8002edc <__aeabi_i2d>
 800a404:	0032      	movs	r2, r6
 800a406:	003b      	movs	r3, r7
 800a408:	f7f7 fed0 	bl	80021ac <__aeabi_dmul>
 800a40c:	2200      	movs	r2, #0
 800a40e:	4bc1      	ldr	r3, [pc, #772]	; (800a714 <_dtoa_r+0x734>)
 800a410:	f7f6 ff72 	bl	80012f8 <__aeabi_dadd>
 800a414:	4ac0      	ldr	r2, [pc, #768]	; (800a718 <_dtoa_r+0x738>)
 800a416:	9014      	str	r0, [sp, #80]	; 0x50
 800a418:	9115      	str	r1, [sp, #84]	; 0x54
 800a41a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a41c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800a41e:	4694      	mov	ip, r2
 800a420:	9308      	str	r3, [sp, #32]
 800a422:	9409      	str	r4, [sp, #36]	; 0x24
 800a424:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a426:	4463      	add	r3, ip
 800a428:	9318      	str	r3, [sp, #96]	; 0x60
 800a42a:	9309      	str	r3, [sp, #36]	; 0x24
 800a42c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d15e      	bne.n	800a4f0 <_dtoa_r+0x510>
 800a432:	2200      	movs	r2, #0
 800a434:	4bb9      	ldr	r3, [pc, #740]	; (800a71c <_dtoa_r+0x73c>)
 800a436:	0030      	movs	r0, r6
 800a438:	0039      	movs	r1, r7
 800a43a:	f7f8 f979 	bl	8002730 <__aeabi_dsub>
 800a43e:	9a08      	ldr	r2, [sp, #32]
 800a440:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a442:	0004      	movs	r4, r0
 800a444:	000d      	movs	r5, r1
 800a446:	f7f6 f817 	bl	8000478 <__aeabi_dcmpgt>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	d000      	beq.n	800a450 <_dtoa_r+0x470>
 800a44e:	e2b3      	b.n	800a9b8 <_dtoa_r+0x9d8>
 800a450:	48b3      	ldr	r0, [pc, #716]	; (800a720 <_dtoa_r+0x740>)
 800a452:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a454:	4684      	mov	ip, r0
 800a456:	4461      	add	r1, ip
 800a458:	000b      	movs	r3, r1
 800a45a:	0020      	movs	r0, r4
 800a45c:	0029      	movs	r1, r5
 800a45e:	9a08      	ldr	r2, [sp, #32]
 800a460:	f7f5 fff6 	bl	8000450 <__aeabi_dcmplt>
 800a464:	2800      	cmp	r0, #0
 800a466:	d000      	beq.n	800a46a <_dtoa_r+0x48a>
 800a468:	e2a3      	b.n	800a9b2 <_dtoa_r+0x9d2>
 800a46a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a46c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800a46e:	9308      	str	r3, [sp, #32]
 800a470:	9409      	str	r4, [sp, #36]	; 0x24
 800a472:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a474:	2b00      	cmp	r3, #0
 800a476:	da00      	bge.n	800a47a <_dtoa_r+0x49a>
 800a478:	e179      	b.n	800a76e <_dtoa_r+0x78e>
 800a47a:	9a03      	ldr	r2, [sp, #12]
 800a47c:	2a0e      	cmp	r2, #14
 800a47e:	dd00      	ble.n	800a482 <_dtoa_r+0x4a2>
 800a480:	e175      	b.n	800a76e <_dtoa_r+0x78e>
 800a482:	4ba0      	ldr	r3, [pc, #640]	; (800a704 <_dtoa_r+0x724>)
 800a484:	00d2      	lsls	r2, r2, #3
 800a486:	189b      	adds	r3, r3, r2
 800a488:	681e      	ldr	r6, [r3, #0]
 800a48a:	685f      	ldr	r7, [r3, #4]
 800a48c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	db00      	blt.n	800a494 <_dtoa_r+0x4b4>
 800a492:	e0e5      	b.n	800a660 <_dtoa_r+0x680>
 800a494:	9b07      	ldr	r3, [sp, #28]
 800a496:	2b00      	cmp	r3, #0
 800a498:	dd00      	ble.n	800a49c <_dtoa_r+0x4bc>
 800a49a:	e0e1      	b.n	800a660 <_dtoa_r+0x680>
 800a49c:	d000      	beq.n	800a4a0 <_dtoa_r+0x4c0>
 800a49e:	e288      	b.n	800a9b2 <_dtoa_r+0x9d2>
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	0030      	movs	r0, r6
 800a4a4:	0039      	movs	r1, r7
 800a4a6:	4b9d      	ldr	r3, [pc, #628]	; (800a71c <_dtoa_r+0x73c>)
 800a4a8:	f7f7 fe80 	bl	80021ac <__aeabi_dmul>
 800a4ac:	9a08      	ldr	r2, [sp, #32]
 800a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b0:	f7f5 ffec 	bl	800048c <__aeabi_dcmpge>
 800a4b4:	9e07      	ldr	r6, [sp, #28]
 800a4b6:	0037      	movs	r7, r6
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	d000      	beq.n	800a4be <_dtoa_r+0x4de>
 800a4bc:	e25f      	b.n	800a97e <_dtoa_r+0x99e>
 800a4be:	9b06      	ldr	r3, [sp, #24]
 800a4c0:	9a06      	ldr	r2, [sp, #24]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	9308      	str	r3, [sp, #32]
 800a4c6:	2331      	movs	r3, #49	; 0x31
 800a4c8:	7013      	strb	r3, [r2, #0]
 800a4ca:	9b03      	ldr	r3, [sp, #12]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	9303      	str	r3, [sp, #12]
 800a4d0:	e25a      	b.n	800a988 <_dtoa_r+0x9a8>
 800a4d2:	423d      	tst	r5, r7
 800a4d4:	d005      	beq.n	800a4e2 <_dtoa_r+0x502>
 800a4d6:	6832      	ldr	r2, [r6, #0]
 800a4d8:	6873      	ldr	r3, [r6, #4]
 800a4da:	f7f7 fe67 	bl	80021ac <__aeabi_dmul>
 800a4de:	003b      	movs	r3, r7
 800a4e0:	3401      	adds	r4, #1
 800a4e2:	106d      	asrs	r5, r5, #1
 800a4e4:	3608      	adds	r6, #8
 800a4e6:	e75f      	b.n	800a3a8 <_dtoa_r+0x3c8>
 800a4e8:	9b03      	ldr	r3, [sp, #12]
 800a4ea:	930e      	str	r3, [sp, #56]	; 0x38
 800a4ec:	9b07      	ldr	r3, [sp, #28]
 800a4ee:	e783      	b.n	800a3f8 <_dtoa_r+0x418>
 800a4f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4f2:	4b84      	ldr	r3, [pc, #528]	; (800a704 <_dtoa_r+0x724>)
 800a4f4:	3a01      	subs	r2, #1
 800a4f6:	00d2      	lsls	r2, r2, #3
 800a4f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a4fa:	189b      	adds	r3, r3, r2
 800a4fc:	9c08      	ldr	r4, [sp, #32]
 800a4fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	2900      	cmp	r1, #0
 800a506:	d051      	beq.n	800a5ac <_dtoa_r+0x5cc>
 800a508:	2000      	movs	r0, #0
 800a50a:	4986      	ldr	r1, [pc, #536]	; (800a724 <_dtoa_r+0x744>)
 800a50c:	f7f7 fa54 	bl	80019b8 <__aeabi_ddiv>
 800a510:	0022      	movs	r2, r4
 800a512:	002b      	movs	r3, r5
 800a514:	f7f8 f90c 	bl	8002730 <__aeabi_dsub>
 800a518:	9a06      	ldr	r2, [sp, #24]
 800a51a:	0004      	movs	r4, r0
 800a51c:	4694      	mov	ip, r2
 800a51e:	000d      	movs	r5, r1
 800a520:	9b06      	ldr	r3, [sp, #24]
 800a522:	9314      	str	r3, [sp, #80]	; 0x50
 800a524:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a526:	4463      	add	r3, ip
 800a528:	9318      	str	r3, [sp, #96]	; 0x60
 800a52a:	0039      	movs	r1, r7
 800a52c:	0030      	movs	r0, r6
 800a52e:	f7f8 fc9f 	bl	8002e70 <__aeabi_d2iz>
 800a532:	9012      	str	r0, [sp, #72]	; 0x48
 800a534:	f7f8 fcd2 	bl	8002edc <__aeabi_i2d>
 800a538:	0002      	movs	r2, r0
 800a53a:	000b      	movs	r3, r1
 800a53c:	0030      	movs	r0, r6
 800a53e:	0039      	movs	r1, r7
 800a540:	f7f8 f8f6 	bl	8002730 <__aeabi_dsub>
 800a544:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a546:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a548:	3301      	adds	r3, #1
 800a54a:	9308      	str	r3, [sp, #32]
 800a54c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a54e:	0006      	movs	r6, r0
 800a550:	3330      	adds	r3, #48	; 0x30
 800a552:	7013      	strb	r3, [r2, #0]
 800a554:	0022      	movs	r2, r4
 800a556:	002b      	movs	r3, r5
 800a558:	000f      	movs	r7, r1
 800a55a:	f7f5 ff79 	bl	8000450 <__aeabi_dcmplt>
 800a55e:	2800      	cmp	r0, #0
 800a560:	d174      	bne.n	800a64c <_dtoa_r+0x66c>
 800a562:	0032      	movs	r2, r6
 800a564:	003b      	movs	r3, r7
 800a566:	2000      	movs	r0, #0
 800a568:	4968      	ldr	r1, [pc, #416]	; (800a70c <_dtoa_r+0x72c>)
 800a56a:	f7f8 f8e1 	bl	8002730 <__aeabi_dsub>
 800a56e:	0022      	movs	r2, r4
 800a570:	002b      	movs	r3, r5
 800a572:	f7f5 ff6d 	bl	8000450 <__aeabi_dcmplt>
 800a576:	2800      	cmp	r0, #0
 800a578:	d000      	beq.n	800a57c <_dtoa_r+0x59c>
 800a57a:	e0d7      	b.n	800a72c <_dtoa_r+0x74c>
 800a57c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a57e:	9a08      	ldr	r2, [sp, #32]
 800a580:	4293      	cmp	r3, r2
 800a582:	d100      	bne.n	800a586 <_dtoa_r+0x5a6>
 800a584:	e771      	b.n	800a46a <_dtoa_r+0x48a>
 800a586:	2200      	movs	r2, #0
 800a588:	0020      	movs	r0, r4
 800a58a:	0029      	movs	r1, r5
 800a58c:	4b60      	ldr	r3, [pc, #384]	; (800a710 <_dtoa_r+0x730>)
 800a58e:	f7f7 fe0d 	bl	80021ac <__aeabi_dmul>
 800a592:	4b5f      	ldr	r3, [pc, #380]	; (800a710 <_dtoa_r+0x730>)
 800a594:	0004      	movs	r4, r0
 800a596:	000d      	movs	r5, r1
 800a598:	0030      	movs	r0, r6
 800a59a:	0039      	movs	r1, r7
 800a59c:	2200      	movs	r2, #0
 800a59e:	f7f7 fe05 	bl	80021ac <__aeabi_dmul>
 800a5a2:	9b08      	ldr	r3, [sp, #32]
 800a5a4:	0006      	movs	r6, r0
 800a5a6:	000f      	movs	r7, r1
 800a5a8:	9314      	str	r3, [sp, #80]	; 0x50
 800a5aa:	e7be      	b.n	800a52a <_dtoa_r+0x54a>
 800a5ac:	0020      	movs	r0, r4
 800a5ae:	0029      	movs	r1, r5
 800a5b0:	f7f7 fdfc 	bl	80021ac <__aeabi_dmul>
 800a5b4:	9a06      	ldr	r2, [sp, #24]
 800a5b6:	9b06      	ldr	r3, [sp, #24]
 800a5b8:	4694      	mov	ip, r2
 800a5ba:	9308      	str	r3, [sp, #32]
 800a5bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5be:	9014      	str	r0, [sp, #80]	; 0x50
 800a5c0:	9115      	str	r1, [sp, #84]	; 0x54
 800a5c2:	4463      	add	r3, ip
 800a5c4:	9319      	str	r3, [sp, #100]	; 0x64
 800a5c6:	0030      	movs	r0, r6
 800a5c8:	0039      	movs	r1, r7
 800a5ca:	f7f8 fc51 	bl	8002e70 <__aeabi_d2iz>
 800a5ce:	9018      	str	r0, [sp, #96]	; 0x60
 800a5d0:	f7f8 fc84 	bl	8002edc <__aeabi_i2d>
 800a5d4:	0002      	movs	r2, r0
 800a5d6:	000b      	movs	r3, r1
 800a5d8:	0030      	movs	r0, r6
 800a5da:	0039      	movs	r1, r7
 800a5dc:	f7f8 f8a8 	bl	8002730 <__aeabi_dsub>
 800a5e0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a5e2:	9b08      	ldr	r3, [sp, #32]
 800a5e4:	3630      	adds	r6, #48	; 0x30
 800a5e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5e8:	701e      	strb	r6, [r3, #0]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	0004      	movs	r4, r0
 800a5ee:	000d      	movs	r5, r1
 800a5f0:	9308      	str	r3, [sp, #32]
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d12d      	bne.n	800a652 <_dtoa_r+0x672>
 800a5f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a5f8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a5fa:	9a06      	ldr	r2, [sp, #24]
 800a5fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5fe:	4694      	mov	ip, r2
 800a600:	4463      	add	r3, ip
 800a602:	2200      	movs	r2, #0
 800a604:	9308      	str	r3, [sp, #32]
 800a606:	4b47      	ldr	r3, [pc, #284]	; (800a724 <_dtoa_r+0x744>)
 800a608:	f7f6 fe76 	bl	80012f8 <__aeabi_dadd>
 800a60c:	0002      	movs	r2, r0
 800a60e:	000b      	movs	r3, r1
 800a610:	0020      	movs	r0, r4
 800a612:	0029      	movs	r1, r5
 800a614:	f7f5 ff30 	bl	8000478 <__aeabi_dcmpgt>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d000      	beq.n	800a61e <_dtoa_r+0x63e>
 800a61c:	e086      	b.n	800a72c <_dtoa_r+0x74c>
 800a61e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a620:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a622:	2000      	movs	r0, #0
 800a624:	493f      	ldr	r1, [pc, #252]	; (800a724 <_dtoa_r+0x744>)
 800a626:	f7f8 f883 	bl	8002730 <__aeabi_dsub>
 800a62a:	0002      	movs	r2, r0
 800a62c:	000b      	movs	r3, r1
 800a62e:	0020      	movs	r0, r4
 800a630:	0029      	movs	r1, r5
 800a632:	f7f5 ff0d 	bl	8000450 <__aeabi_dcmplt>
 800a636:	2800      	cmp	r0, #0
 800a638:	d100      	bne.n	800a63c <_dtoa_r+0x65c>
 800a63a:	e716      	b.n	800a46a <_dtoa_r+0x48a>
 800a63c:	9b08      	ldr	r3, [sp, #32]
 800a63e:	001a      	movs	r2, r3
 800a640:	3a01      	subs	r2, #1
 800a642:	9208      	str	r2, [sp, #32]
 800a644:	7812      	ldrb	r2, [r2, #0]
 800a646:	2a30      	cmp	r2, #48	; 0x30
 800a648:	d0f8      	beq.n	800a63c <_dtoa_r+0x65c>
 800a64a:	9308      	str	r3, [sp, #32]
 800a64c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a64e:	9303      	str	r3, [sp, #12]
 800a650:	e046      	b.n	800a6e0 <_dtoa_r+0x700>
 800a652:	2200      	movs	r2, #0
 800a654:	4b2e      	ldr	r3, [pc, #184]	; (800a710 <_dtoa_r+0x730>)
 800a656:	f7f7 fda9 	bl	80021ac <__aeabi_dmul>
 800a65a:	0006      	movs	r6, r0
 800a65c:	000f      	movs	r7, r1
 800a65e:	e7b2      	b.n	800a5c6 <_dtoa_r+0x5e6>
 800a660:	9b06      	ldr	r3, [sp, #24]
 800a662:	9a06      	ldr	r2, [sp, #24]
 800a664:	930a      	str	r3, [sp, #40]	; 0x28
 800a666:	9b07      	ldr	r3, [sp, #28]
 800a668:	9c08      	ldr	r4, [sp, #32]
 800a66a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a66c:	3b01      	subs	r3, #1
 800a66e:	189b      	adds	r3, r3, r2
 800a670:	930b      	str	r3, [sp, #44]	; 0x2c
 800a672:	0032      	movs	r2, r6
 800a674:	003b      	movs	r3, r7
 800a676:	0020      	movs	r0, r4
 800a678:	0029      	movs	r1, r5
 800a67a:	f7f7 f99d 	bl	80019b8 <__aeabi_ddiv>
 800a67e:	f7f8 fbf7 	bl	8002e70 <__aeabi_d2iz>
 800a682:	9007      	str	r0, [sp, #28]
 800a684:	f7f8 fc2a 	bl	8002edc <__aeabi_i2d>
 800a688:	0032      	movs	r2, r6
 800a68a:	003b      	movs	r3, r7
 800a68c:	f7f7 fd8e 	bl	80021ac <__aeabi_dmul>
 800a690:	0002      	movs	r2, r0
 800a692:	000b      	movs	r3, r1
 800a694:	0020      	movs	r0, r4
 800a696:	0029      	movs	r1, r5
 800a698:	f7f8 f84a 	bl	8002730 <__aeabi_dsub>
 800a69c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a69e:	001a      	movs	r2, r3
 800a6a0:	3201      	adds	r2, #1
 800a6a2:	920a      	str	r2, [sp, #40]	; 0x28
 800a6a4:	9208      	str	r2, [sp, #32]
 800a6a6:	9a07      	ldr	r2, [sp, #28]
 800a6a8:	3230      	adds	r2, #48	; 0x30
 800a6aa:	701a      	strb	r2, [r3, #0]
 800a6ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d14f      	bne.n	800a752 <_dtoa_r+0x772>
 800a6b2:	0002      	movs	r2, r0
 800a6b4:	000b      	movs	r3, r1
 800a6b6:	f7f6 fe1f 	bl	80012f8 <__aeabi_dadd>
 800a6ba:	0032      	movs	r2, r6
 800a6bc:	003b      	movs	r3, r7
 800a6be:	0004      	movs	r4, r0
 800a6c0:	000d      	movs	r5, r1
 800a6c2:	f7f5 fed9 	bl	8000478 <__aeabi_dcmpgt>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d12e      	bne.n	800a728 <_dtoa_r+0x748>
 800a6ca:	0032      	movs	r2, r6
 800a6cc:	003b      	movs	r3, r7
 800a6ce:	0020      	movs	r0, r4
 800a6d0:	0029      	movs	r1, r5
 800a6d2:	f7f5 feb7 	bl	8000444 <__aeabi_dcmpeq>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	d002      	beq.n	800a6e0 <_dtoa_r+0x700>
 800a6da:	9b07      	ldr	r3, [sp, #28]
 800a6dc:	07de      	lsls	r6, r3, #31
 800a6de:	d423      	bmi.n	800a728 <_dtoa_r+0x748>
 800a6e0:	9905      	ldr	r1, [sp, #20]
 800a6e2:	9804      	ldr	r0, [sp, #16]
 800a6e4:	f000 fbe8 	bl	800aeb8 <_Bfree>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9a08      	ldr	r2, [sp, #32]
 800a6ec:	7013      	strb	r3, [r2, #0]
 800a6ee:	9b03      	ldr	r3, [sp, #12]
 800a6f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a6f2:	3301      	adds	r3, #1
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d100      	bne.n	800a6fe <_dtoa_r+0x71e>
 800a6fc:	e4ba      	b.n	800a074 <_dtoa_r+0x94>
 800a6fe:	9a08      	ldr	r2, [sp, #32]
 800a700:	601a      	str	r2, [r3, #0]
 800a702:	e4b7      	b.n	800a074 <_dtoa_r+0x94>
 800a704:	0800c3d0 	.word	0x0800c3d0
 800a708:	0800c3a8 	.word	0x0800c3a8
 800a70c:	3ff00000 	.word	0x3ff00000
 800a710:	40240000 	.word	0x40240000
 800a714:	401c0000 	.word	0x401c0000
 800a718:	fcc00000 	.word	0xfcc00000
 800a71c:	40140000 	.word	0x40140000
 800a720:	7cc00000 	.word	0x7cc00000
 800a724:	3fe00000 	.word	0x3fe00000
 800a728:	9b03      	ldr	r3, [sp, #12]
 800a72a:	930e      	str	r3, [sp, #56]	; 0x38
 800a72c:	9b08      	ldr	r3, [sp, #32]
 800a72e:	9308      	str	r3, [sp, #32]
 800a730:	3b01      	subs	r3, #1
 800a732:	781a      	ldrb	r2, [r3, #0]
 800a734:	2a39      	cmp	r2, #57	; 0x39
 800a736:	d108      	bne.n	800a74a <_dtoa_r+0x76a>
 800a738:	9a06      	ldr	r2, [sp, #24]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d1f7      	bne.n	800a72e <_dtoa_r+0x74e>
 800a73e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a740:	9906      	ldr	r1, [sp, #24]
 800a742:	3201      	adds	r2, #1
 800a744:	920e      	str	r2, [sp, #56]	; 0x38
 800a746:	2230      	movs	r2, #48	; 0x30
 800a748:	700a      	strb	r2, [r1, #0]
 800a74a:	781a      	ldrb	r2, [r3, #0]
 800a74c:	3201      	adds	r2, #1
 800a74e:	701a      	strb	r2, [r3, #0]
 800a750:	e77c      	b.n	800a64c <_dtoa_r+0x66c>
 800a752:	2200      	movs	r2, #0
 800a754:	4ba9      	ldr	r3, [pc, #676]	; (800a9fc <_dtoa_r+0xa1c>)
 800a756:	f7f7 fd29 	bl	80021ac <__aeabi_dmul>
 800a75a:	2200      	movs	r2, #0
 800a75c:	2300      	movs	r3, #0
 800a75e:	0004      	movs	r4, r0
 800a760:	000d      	movs	r5, r1
 800a762:	f7f5 fe6f 	bl	8000444 <__aeabi_dcmpeq>
 800a766:	2800      	cmp	r0, #0
 800a768:	d100      	bne.n	800a76c <_dtoa_r+0x78c>
 800a76a:	e782      	b.n	800a672 <_dtoa_r+0x692>
 800a76c:	e7b8      	b.n	800a6e0 <_dtoa_r+0x700>
 800a76e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a770:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a772:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a774:	2f00      	cmp	r7, #0
 800a776:	d012      	beq.n	800a79e <_dtoa_r+0x7be>
 800a778:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a77a:	2a01      	cmp	r2, #1
 800a77c:	dc6e      	bgt.n	800a85c <_dtoa_r+0x87c>
 800a77e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a780:	2a00      	cmp	r2, #0
 800a782:	d065      	beq.n	800a850 <_dtoa_r+0x870>
 800a784:	4a9e      	ldr	r2, [pc, #632]	; (800aa00 <_dtoa_r+0xa20>)
 800a786:	189b      	adds	r3, r3, r2
 800a788:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a78a:	2101      	movs	r1, #1
 800a78c:	18d2      	adds	r2, r2, r3
 800a78e:	920a      	str	r2, [sp, #40]	; 0x28
 800a790:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a792:	9804      	ldr	r0, [sp, #16]
 800a794:	18d3      	adds	r3, r2, r3
 800a796:	930c      	str	r3, [sp, #48]	; 0x30
 800a798:	f000 fc3e 	bl	800b018 <__i2b>
 800a79c:	0007      	movs	r7, r0
 800a79e:	2c00      	cmp	r4, #0
 800a7a0:	d00e      	beq.n	800a7c0 <_dtoa_r+0x7e0>
 800a7a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd0b      	ble.n	800a7c0 <_dtoa_r+0x7e0>
 800a7a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7aa:	0023      	movs	r3, r4
 800a7ac:	4294      	cmp	r4, r2
 800a7ae:	dd00      	ble.n	800a7b2 <_dtoa_r+0x7d2>
 800a7b0:	0013      	movs	r3, r2
 800a7b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7b4:	1ae4      	subs	r4, r4, r3
 800a7b6:	1ad2      	subs	r2, r2, r3
 800a7b8:	920a      	str	r2, [sp, #40]	; 0x28
 800a7ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	930c      	str	r3, [sp, #48]	; 0x30
 800a7c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d01e      	beq.n	800a804 <_dtoa_r+0x824>
 800a7c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d05c      	beq.n	800a886 <_dtoa_r+0x8a6>
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	dd10      	ble.n	800a7f2 <_dtoa_r+0x812>
 800a7d0:	0039      	movs	r1, r7
 800a7d2:	002a      	movs	r2, r5
 800a7d4:	9804      	ldr	r0, [sp, #16]
 800a7d6:	f000 fce7 	bl	800b1a8 <__pow5mult>
 800a7da:	9a05      	ldr	r2, [sp, #20]
 800a7dc:	0001      	movs	r1, r0
 800a7de:	0007      	movs	r7, r0
 800a7e0:	9804      	ldr	r0, [sp, #16]
 800a7e2:	f000 fc31 	bl	800b048 <__multiply>
 800a7e6:	0006      	movs	r6, r0
 800a7e8:	9905      	ldr	r1, [sp, #20]
 800a7ea:	9804      	ldr	r0, [sp, #16]
 800a7ec:	f000 fb64 	bl	800aeb8 <_Bfree>
 800a7f0:	9605      	str	r6, [sp, #20]
 800a7f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7f4:	1b5a      	subs	r2, r3, r5
 800a7f6:	42ab      	cmp	r3, r5
 800a7f8:	d004      	beq.n	800a804 <_dtoa_r+0x824>
 800a7fa:	9905      	ldr	r1, [sp, #20]
 800a7fc:	9804      	ldr	r0, [sp, #16]
 800a7fe:	f000 fcd3 	bl	800b1a8 <__pow5mult>
 800a802:	9005      	str	r0, [sp, #20]
 800a804:	2101      	movs	r1, #1
 800a806:	9804      	ldr	r0, [sp, #16]
 800a808:	f000 fc06 	bl	800b018 <__i2b>
 800a80c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a80e:	0006      	movs	r6, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	dd3a      	ble.n	800a88a <_dtoa_r+0x8aa>
 800a814:	001a      	movs	r2, r3
 800a816:	0001      	movs	r1, r0
 800a818:	9804      	ldr	r0, [sp, #16]
 800a81a:	f000 fcc5 	bl	800b1a8 <__pow5mult>
 800a81e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a820:	0006      	movs	r6, r0
 800a822:	2500      	movs	r5, #0
 800a824:	2b01      	cmp	r3, #1
 800a826:	dc38      	bgt.n	800a89a <_dtoa_r+0x8ba>
 800a828:	2500      	movs	r5, #0
 800a82a:	9b08      	ldr	r3, [sp, #32]
 800a82c:	42ab      	cmp	r3, r5
 800a82e:	d130      	bne.n	800a892 <_dtoa_r+0x8b2>
 800a830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a832:	031b      	lsls	r3, r3, #12
 800a834:	42ab      	cmp	r3, r5
 800a836:	d12c      	bne.n	800a892 <_dtoa_r+0x8b2>
 800a838:	4b72      	ldr	r3, [pc, #456]	; (800aa04 <_dtoa_r+0xa24>)
 800a83a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a83c:	4213      	tst	r3, r2
 800a83e:	d028      	beq.n	800a892 <_dtoa_r+0x8b2>
 800a840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a842:	3501      	adds	r5, #1
 800a844:	3301      	adds	r3, #1
 800a846:	930a      	str	r3, [sp, #40]	; 0x28
 800a848:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a84a:	3301      	adds	r3, #1
 800a84c:	930c      	str	r3, [sp, #48]	; 0x30
 800a84e:	e020      	b.n	800a892 <_dtoa_r+0x8b2>
 800a850:	2336      	movs	r3, #54	; 0x36
 800a852:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a854:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a856:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a858:	1a9b      	subs	r3, r3, r2
 800a85a:	e795      	b.n	800a788 <_dtoa_r+0x7a8>
 800a85c:	9b07      	ldr	r3, [sp, #28]
 800a85e:	1e5d      	subs	r5, r3, #1
 800a860:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a862:	42ab      	cmp	r3, r5
 800a864:	db07      	blt.n	800a876 <_dtoa_r+0x896>
 800a866:	1b5d      	subs	r5, r3, r5
 800a868:	9b07      	ldr	r3, [sp, #28]
 800a86a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	da8b      	bge.n	800a788 <_dtoa_r+0x7a8>
 800a870:	1ae4      	subs	r4, r4, r3
 800a872:	2300      	movs	r3, #0
 800a874:	e788      	b.n	800a788 <_dtoa_r+0x7a8>
 800a876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a878:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a87a:	1aeb      	subs	r3, r5, r3
 800a87c:	18d3      	adds	r3, r2, r3
 800a87e:	950d      	str	r5, [sp, #52]	; 0x34
 800a880:	9313      	str	r3, [sp, #76]	; 0x4c
 800a882:	2500      	movs	r5, #0
 800a884:	e7f0      	b.n	800a868 <_dtoa_r+0x888>
 800a886:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a888:	e7b7      	b.n	800a7fa <_dtoa_r+0x81a>
 800a88a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a88c:	2500      	movs	r5, #0
 800a88e:	2b01      	cmp	r3, #1
 800a890:	ddca      	ble.n	800a828 <_dtoa_r+0x848>
 800a892:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a894:	2001      	movs	r0, #1
 800a896:	2b00      	cmp	r3, #0
 800a898:	d008      	beq.n	800a8ac <_dtoa_r+0x8cc>
 800a89a:	6933      	ldr	r3, [r6, #16]
 800a89c:	3303      	adds	r3, #3
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	18f3      	adds	r3, r6, r3
 800a8a2:	6858      	ldr	r0, [r3, #4]
 800a8a4:	f000 fb70 	bl	800af88 <__hi0bits>
 800a8a8:	2320      	movs	r3, #32
 800a8aa:	1a18      	subs	r0, r3, r0
 800a8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8ae:	1818      	adds	r0, r3, r0
 800a8b0:	0002      	movs	r2, r0
 800a8b2:	231f      	movs	r3, #31
 800a8b4:	401a      	ands	r2, r3
 800a8b6:	4218      	tst	r0, r3
 800a8b8:	d047      	beq.n	800a94a <_dtoa_r+0x96a>
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	1a9b      	subs	r3, r3, r2
 800a8be:	2b04      	cmp	r3, #4
 800a8c0:	dd3f      	ble.n	800a942 <_dtoa_r+0x962>
 800a8c2:	231c      	movs	r3, #28
 800a8c4:	1a9b      	subs	r3, r3, r2
 800a8c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8c8:	18e4      	adds	r4, r4, r3
 800a8ca:	18d2      	adds	r2, r2, r3
 800a8cc:	920a      	str	r2, [sp, #40]	; 0x28
 800a8ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8d0:	18d3      	adds	r3, r2, r3
 800a8d2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	dd05      	ble.n	800a8e6 <_dtoa_r+0x906>
 800a8da:	001a      	movs	r2, r3
 800a8dc:	9905      	ldr	r1, [sp, #20]
 800a8de:	9804      	ldr	r0, [sp, #16]
 800a8e0:	f000 fcbe 	bl	800b260 <__lshift>
 800a8e4:	9005      	str	r0, [sp, #20]
 800a8e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	dd05      	ble.n	800a8f8 <_dtoa_r+0x918>
 800a8ec:	0031      	movs	r1, r6
 800a8ee:	001a      	movs	r2, r3
 800a8f0:	9804      	ldr	r0, [sp, #16]
 800a8f2:	f000 fcb5 	bl	800b260 <__lshift>
 800a8f6:	0006      	movs	r6, r0
 800a8f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d027      	beq.n	800a94e <_dtoa_r+0x96e>
 800a8fe:	0031      	movs	r1, r6
 800a900:	9805      	ldr	r0, [sp, #20]
 800a902:	f000 fd1b 	bl	800b33c <__mcmp>
 800a906:	2800      	cmp	r0, #0
 800a908:	da21      	bge.n	800a94e <_dtoa_r+0x96e>
 800a90a:	9b03      	ldr	r3, [sp, #12]
 800a90c:	220a      	movs	r2, #10
 800a90e:	3b01      	subs	r3, #1
 800a910:	9303      	str	r3, [sp, #12]
 800a912:	9905      	ldr	r1, [sp, #20]
 800a914:	2300      	movs	r3, #0
 800a916:	9804      	ldr	r0, [sp, #16]
 800a918:	f000 faf2 	bl	800af00 <__multadd>
 800a91c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a91e:	9005      	str	r0, [sp, #20]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d100      	bne.n	800a926 <_dtoa_r+0x946>
 800a924:	e15d      	b.n	800abe2 <_dtoa_r+0xc02>
 800a926:	2300      	movs	r3, #0
 800a928:	0039      	movs	r1, r7
 800a92a:	220a      	movs	r2, #10
 800a92c:	9804      	ldr	r0, [sp, #16]
 800a92e:	f000 fae7 	bl	800af00 <__multadd>
 800a932:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a934:	0007      	movs	r7, r0
 800a936:	2b00      	cmp	r3, #0
 800a938:	dc49      	bgt.n	800a9ce <_dtoa_r+0x9ee>
 800a93a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a93c:	2b02      	cmp	r3, #2
 800a93e:	dc0e      	bgt.n	800a95e <_dtoa_r+0x97e>
 800a940:	e045      	b.n	800a9ce <_dtoa_r+0x9ee>
 800a942:	2b04      	cmp	r3, #4
 800a944:	d0c6      	beq.n	800a8d4 <_dtoa_r+0x8f4>
 800a946:	331c      	adds	r3, #28
 800a948:	e7bd      	b.n	800a8c6 <_dtoa_r+0x8e6>
 800a94a:	0013      	movs	r3, r2
 800a94c:	e7fb      	b.n	800a946 <_dtoa_r+0x966>
 800a94e:	9b07      	ldr	r3, [sp, #28]
 800a950:	2b00      	cmp	r3, #0
 800a952:	dc36      	bgt.n	800a9c2 <_dtoa_r+0x9e2>
 800a954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a956:	2b02      	cmp	r3, #2
 800a958:	dd33      	ble.n	800a9c2 <_dtoa_r+0x9e2>
 800a95a:	9b07      	ldr	r3, [sp, #28]
 800a95c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a95e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10c      	bne.n	800a97e <_dtoa_r+0x99e>
 800a964:	0031      	movs	r1, r6
 800a966:	2205      	movs	r2, #5
 800a968:	9804      	ldr	r0, [sp, #16]
 800a96a:	f000 fac9 	bl	800af00 <__multadd>
 800a96e:	0006      	movs	r6, r0
 800a970:	0001      	movs	r1, r0
 800a972:	9805      	ldr	r0, [sp, #20]
 800a974:	f000 fce2 	bl	800b33c <__mcmp>
 800a978:	2800      	cmp	r0, #0
 800a97a:	dd00      	ble.n	800a97e <_dtoa_r+0x99e>
 800a97c:	e59f      	b.n	800a4be <_dtoa_r+0x4de>
 800a97e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a980:	43db      	mvns	r3, r3
 800a982:	9303      	str	r3, [sp, #12]
 800a984:	9b06      	ldr	r3, [sp, #24]
 800a986:	9308      	str	r3, [sp, #32]
 800a988:	2500      	movs	r5, #0
 800a98a:	0031      	movs	r1, r6
 800a98c:	9804      	ldr	r0, [sp, #16]
 800a98e:	f000 fa93 	bl	800aeb8 <_Bfree>
 800a992:	2f00      	cmp	r7, #0
 800a994:	d100      	bne.n	800a998 <_dtoa_r+0x9b8>
 800a996:	e6a3      	b.n	800a6e0 <_dtoa_r+0x700>
 800a998:	2d00      	cmp	r5, #0
 800a99a:	d005      	beq.n	800a9a8 <_dtoa_r+0x9c8>
 800a99c:	42bd      	cmp	r5, r7
 800a99e:	d003      	beq.n	800a9a8 <_dtoa_r+0x9c8>
 800a9a0:	0029      	movs	r1, r5
 800a9a2:	9804      	ldr	r0, [sp, #16]
 800a9a4:	f000 fa88 	bl	800aeb8 <_Bfree>
 800a9a8:	0039      	movs	r1, r7
 800a9aa:	9804      	ldr	r0, [sp, #16]
 800a9ac:	f000 fa84 	bl	800aeb8 <_Bfree>
 800a9b0:	e696      	b.n	800a6e0 <_dtoa_r+0x700>
 800a9b2:	2600      	movs	r6, #0
 800a9b4:	0037      	movs	r7, r6
 800a9b6:	e7e2      	b.n	800a97e <_dtoa_r+0x99e>
 800a9b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9ba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a9bc:	9303      	str	r3, [sp, #12]
 800a9be:	0037      	movs	r7, r6
 800a9c0:	e57d      	b.n	800a4be <_dtoa_r+0x4de>
 800a9c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d100      	bne.n	800a9ca <_dtoa_r+0x9ea>
 800a9c8:	e0c3      	b.n	800ab52 <_dtoa_r+0xb72>
 800a9ca:	9b07      	ldr	r3, [sp, #28]
 800a9cc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9ce:	2c00      	cmp	r4, #0
 800a9d0:	dd05      	ble.n	800a9de <_dtoa_r+0x9fe>
 800a9d2:	0039      	movs	r1, r7
 800a9d4:	0022      	movs	r2, r4
 800a9d6:	9804      	ldr	r0, [sp, #16]
 800a9d8:	f000 fc42 	bl	800b260 <__lshift>
 800a9dc:	0007      	movs	r7, r0
 800a9de:	0038      	movs	r0, r7
 800a9e0:	2d00      	cmp	r5, #0
 800a9e2:	d024      	beq.n	800aa2e <_dtoa_r+0xa4e>
 800a9e4:	6879      	ldr	r1, [r7, #4]
 800a9e6:	9804      	ldr	r0, [sp, #16]
 800a9e8:	f000 fa22 	bl	800ae30 <_Balloc>
 800a9ec:	1e04      	subs	r4, r0, #0
 800a9ee:	d111      	bne.n	800aa14 <_dtoa_r+0xa34>
 800a9f0:	0022      	movs	r2, r4
 800a9f2:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <_dtoa_r+0xa28>)
 800a9f4:	4805      	ldr	r0, [pc, #20]	; (800aa0c <_dtoa_r+0xa2c>)
 800a9f6:	4906      	ldr	r1, [pc, #24]	; (800aa10 <_dtoa_r+0xa30>)
 800a9f8:	f7ff fb07 	bl	800a00a <_dtoa_r+0x2a>
 800a9fc:	40240000 	.word	0x40240000
 800aa00:	00000433 	.word	0x00000433
 800aa04:	7ff00000 	.word	0x7ff00000
 800aa08:	0800c33e 	.word	0x0800c33e
 800aa0c:	0800c2e6 	.word	0x0800c2e6
 800aa10:	000002ef 	.word	0x000002ef
 800aa14:	0039      	movs	r1, r7
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	310c      	adds	r1, #12
 800aa1a:	3202      	adds	r2, #2
 800aa1c:	0092      	lsls	r2, r2, #2
 800aa1e:	300c      	adds	r0, #12
 800aa20:	f7ff fa26 	bl	8009e70 <memcpy>
 800aa24:	2201      	movs	r2, #1
 800aa26:	0021      	movs	r1, r4
 800aa28:	9804      	ldr	r0, [sp, #16]
 800aa2a:	f000 fc19 	bl	800b260 <__lshift>
 800aa2e:	9b06      	ldr	r3, [sp, #24]
 800aa30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa32:	9307      	str	r3, [sp, #28]
 800aa34:	3b01      	subs	r3, #1
 800aa36:	189b      	adds	r3, r3, r2
 800aa38:	2201      	movs	r2, #1
 800aa3a:	003d      	movs	r5, r7
 800aa3c:	0007      	movs	r7, r0
 800aa3e:	930e      	str	r3, [sp, #56]	; 0x38
 800aa40:	9b08      	ldr	r3, [sp, #32]
 800aa42:	4013      	ands	r3, r2
 800aa44:	930d      	str	r3, [sp, #52]	; 0x34
 800aa46:	0031      	movs	r1, r6
 800aa48:	9805      	ldr	r0, [sp, #20]
 800aa4a:	f7ff fa39 	bl	8009ec0 <quorem>
 800aa4e:	0029      	movs	r1, r5
 800aa50:	0004      	movs	r4, r0
 800aa52:	900b      	str	r0, [sp, #44]	; 0x2c
 800aa54:	9805      	ldr	r0, [sp, #20]
 800aa56:	f000 fc71 	bl	800b33c <__mcmp>
 800aa5a:	003a      	movs	r2, r7
 800aa5c:	900c      	str	r0, [sp, #48]	; 0x30
 800aa5e:	0031      	movs	r1, r6
 800aa60:	9804      	ldr	r0, [sp, #16]
 800aa62:	f000 fc87 	bl	800b374 <__mdiff>
 800aa66:	2201      	movs	r2, #1
 800aa68:	68c3      	ldr	r3, [r0, #12]
 800aa6a:	3430      	adds	r4, #48	; 0x30
 800aa6c:	9008      	str	r0, [sp, #32]
 800aa6e:	920a      	str	r2, [sp, #40]	; 0x28
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d104      	bne.n	800aa7e <_dtoa_r+0xa9e>
 800aa74:	0001      	movs	r1, r0
 800aa76:	9805      	ldr	r0, [sp, #20]
 800aa78:	f000 fc60 	bl	800b33c <__mcmp>
 800aa7c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa7e:	9908      	ldr	r1, [sp, #32]
 800aa80:	9804      	ldr	r0, [sp, #16]
 800aa82:	f000 fa19 	bl	800aeb8 <_Bfree>
 800aa86:	9b07      	ldr	r3, [sp, #28]
 800aa88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	9308      	str	r3, [sp, #32]
 800aa8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800aa90:	4313      	orrs	r3, r2
 800aa92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa94:	4313      	orrs	r3, r2
 800aa96:	d109      	bne.n	800aaac <_dtoa_r+0xacc>
 800aa98:	2c39      	cmp	r4, #57	; 0x39
 800aa9a:	d022      	beq.n	800aae2 <_dtoa_r+0xb02>
 800aa9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dd01      	ble.n	800aaa6 <_dtoa_r+0xac6>
 800aaa2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800aaa4:	3431      	adds	r4, #49	; 0x31
 800aaa6:	9b07      	ldr	r3, [sp, #28]
 800aaa8:	701c      	strb	r4, [r3, #0]
 800aaaa:	e76e      	b.n	800a98a <_dtoa_r+0x9aa>
 800aaac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	db04      	blt.n	800aabc <_dtoa_r+0xadc>
 800aab2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800aab4:	4313      	orrs	r3, r2
 800aab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aab8:	4313      	orrs	r3, r2
 800aaba:	d11e      	bne.n	800aafa <_dtoa_r+0xb1a>
 800aabc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	ddf1      	ble.n	800aaa6 <_dtoa_r+0xac6>
 800aac2:	9905      	ldr	r1, [sp, #20]
 800aac4:	2201      	movs	r2, #1
 800aac6:	9804      	ldr	r0, [sp, #16]
 800aac8:	f000 fbca 	bl	800b260 <__lshift>
 800aacc:	0031      	movs	r1, r6
 800aace:	9005      	str	r0, [sp, #20]
 800aad0:	f000 fc34 	bl	800b33c <__mcmp>
 800aad4:	2800      	cmp	r0, #0
 800aad6:	dc02      	bgt.n	800aade <_dtoa_r+0xafe>
 800aad8:	d1e5      	bne.n	800aaa6 <_dtoa_r+0xac6>
 800aada:	07e3      	lsls	r3, r4, #31
 800aadc:	d5e3      	bpl.n	800aaa6 <_dtoa_r+0xac6>
 800aade:	2c39      	cmp	r4, #57	; 0x39
 800aae0:	d1df      	bne.n	800aaa2 <_dtoa_r+0xac2>
 800aae2:	2339      	movs	r3, #57	; 0x39
 800aae4:	9a07      	ldr	r2, [sp, #28]
 800aae6:	7013      	strb	r3, [r2, #0]
 800aae8:	9b08      	ldr	r3, [sp, #32]
 800aaea:	9308      	str	r3, [sp, #32]
 800aaec:	3b01      	subs	r3, #1
 800aaee:	781a      	ldrb	r2, [r3, #0]
 800aaf0:	2a39      	cmp	r2, #57	; 0x39
 800aaf2:	d063      	beq.n	800abbc <_dtoa_r+0xbdc>
 800aaf4:	3201      	adds	r2, #1
 800aaf6:	701a      	strb	r2, [r3, #0]
 800aaf8:	e747      	b.n	800a98a <_dtoa_r+0x9aa>
 800aafa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	dd03      	ble.n	800ab08 <_dtoa_r+0xb28>
 800ab00:	2c39      	cmp	r4, #57	; 0x39
 800ab02:	d0ee      	beq.n	800aae2 <_dtoa_r+0xb02>
 800ab04:	3401      	adds	r4, #1
 800ab06:	e7ce      	b.n	800aaa6 <_dtoa_r+0xac6>
 800ab08:	9b07      	ldr	r3, [sp, #28]
 800ab0a:	9a07      	ldr	r2, [sp, #28]
 800ab0c:	701c      	strb	r4, [r3, #0]
 800ab0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d03e      	beq.n	800ab92 <_dtoa_r+0xbb2>
 800ab14:	2300      	movs	r3, #0
 800ab16:	220a      	movs	r2, #10
 800ab18:	9905      	ldr	r1, [sp, #20]
 800ab1a:	9804      	ldr	r0, [sp, #16]
 800ab1c:	f000 f9f0 	bl	800af00 <__multadd>
 800ab20:	2300      	movs	r3, #0
 800ab22:	9005      	str	r0, [sp, #20]
 800ab24:	220a      	movs	r2, #10
 800ab26:	0029      	movs	r1, r5
 800ab28:	9804      	ldr	r0, [sp, #16]
 800ab2a:	42bd      	cmp	r5, r7
 800ab2c:	d106      	bne.n	800ab3c <_dtoa_r+0xb5c>
 800ab2e:	f000 f9e7 	bl	800af00 <__multadd>
 800ab32:	0005      	movs	r5, r0
 800ab34:	0007      	movs	r7, r0
 800ab36:	9b08      	ldr	r3, [sp, #32]
 800ab38:	9307      	str	r3, [sp, #28]
 800ab3a:	e784      	b.n	800aa46 <_dtoa_r+0xa66>
 800ab3c:	f000 f9e0 	bl	800af00 <__multadd>
 800ab40:	0039      	movs	r1, r7
 800ab42:	0005      	movs	r5, r0
 800ab44:	2300      	movs	r3, #0
 800ab46:	220a      	movs	r2, #10
 800ab48:	9804      	ldr	r0, [sp, #16]
 800ab4a:	f000 f9d9 	bl	800af00 <__multadd>
 800ab4e:	0007      	movs	r7, r0
 800ab50:	e7f1      	b.n	800ab36 <_dtoa_r+0xb56>
 800ab52:	9b07      	ldr	r3, [sp, #28]
 800ab54:	930b      	str	r3, [sp, #44]	; 0x2c
 800ab56:	2500      	movs	r5, #0
 800ab58:	0031      	movs	r1, r6
 800ab5a:	9805      	ldr	r0, [sp, #20]
 800ab5c:	f7ff f9b0 	bl	8009ec0 <quorem>
 800ab60:	9b06      	ldr	r3, [sp, #24]
 800ab62:	3030      	adds	r0, #48	; 0x30
 800ab64:	5558      	strb	r0, [r3, r5]
 800ab66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab68:	3501      	adds	r5, #1
 800ab6a:	0004      	movs	r4, r0
 800ab6c:	42ab      	cmp	r3, r5
 800ab6e:	dd07      	ble.n	800ab80 <_dtoa_r+0xba0>
 800ab70:	2300      	movs	r3, #0
 800ab72:	220a      	movs	r2, #10
 800ab74:	9905      	ldr	r1, [sp, #20]
 800ab76:	9804      	ldr	r0, [sp, #16]
 800ab78:	f000 f9c2 	bl	800af00 <__multadd>
 800ab7c:	9005      	str	r0, [sp, #20]
 800ab7e:	e7eb      	b.n	800ab58 <_dtoa_r+0xb78>
 800ab80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab82:	2301      	movs	r3, #1
 800ab84:	2a00      	cmp	r2, #0
 800ab86:	dd00      	ble.n	800ab8a <_dtoa_r+0xbaa>
 800ab88:	0013      	movs	r3, r2
 800ab8a:	2500      	movs	r5, #0
 800ab8c:	9a06      	ldr	r2, [sp, #24]
 800ab8e:	18d3      	adds	r3, r2, r3
 800ab90:	9308      	str	r3, [sp, #32]
 800ab92:	9905      	ldr	r1, [sp, #20]
 800ab94:	2201      	movs	r2, #1
 800ab96:	9804      	ldr	r0, [sp, #16]
 800ab98:	f000 fb62 	bl	800b260 <__lshift>
 800ab9c:	0031      	movs	r1, r6
 800ab9e:	9005      	str	r0, [sp, #20]
 800aba0:	f000 fbcc 	bl	800b33c <__mcmp>
 800aba4:	2800      	cmp	r0, #0
 800aba6:	dc9f      	bgt.n	800aae8 <_dtoa_r+0xb08>
 800aba8:	d101      	bne.n	800abae <_dtoa_r+0xbce>
 800abaa:	07e4      	lsls	r4, r4, #31
 800abac:	d49c      	bmi.n	800aae8 <_dtoa_r+0xb08>
 800abae:	9b08      	ldr	r3, [sp, #32]
 800abb0:	9308      	str	r3, [sp, #32]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	781a      	ldrb	r2, [r3, #0]
 800abb6:	2a30      	cmp	r2, #48	; 0x30
 800abb8:	d0fa      	beq.n	800abb0 <_dtoa_r+0xbd0>
 800abba:	e6e6      	b.n	800a98a <_dtoa_r+0x9aa>
 800abbc:	9a06      	ldr	r2, [sp, #24]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d193      	bne.n	800aaea <_dtoa_r+0xb0a>
 800abc2:	9b03      	ldr	r3, [sp, #12]
 800abc4:	3301      	adds	r3, #1
 800abc6:	9303      	str	r3, [sp, #12]
 800abc8:	2331      	movs	r3, #49	; 0x31
 800abca:	7013      	strb	r3, [r2, #0]
 800abcc:	e6dd      	b.n	800a98a <_dtoa_r+0x9aa>
 800abce:	4b09      	ldr	r3, [pc, #36]	; (800abf4 <_dtoa_r+0xc14>)
 800abd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800abd2:	9306      	str	r3, [sp, #24]
 800abd4:	4b08      	ldr	r3, [pc, #32]	; (800abf8 <_dtoa_r+0xc18>)
 800abd6:	2a00      	cmp	r2, #0
 800abd8:	d001      	beq.n	800abde <_dtoa_r+0xbfe>
 800abda:	f7ff fa49 	bl	800a070 <_dtoa_r+0x90>
 800abde:	f7ff fa49 	bl	800a074 <_dtoa_r+0x94>
 800abe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	dcb6      	bgt.n	800ab56 <_dtoa_r+0xb76>
 800abe8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800abea:	2b02      	cmp	r3, #2
 800abec:	dd00      	ble.n	800abf0 <_dtoa_r+0xc10>
 800abee:	e6b6      	b.n	800a95e <_dtoa_r+0x97e>
 800abf0:	e7b1      	b.n	800ab56 <_dtoa_r+0xb76>
 800abf2:	46c0      	nop			; (mov r8, r8)
 800abf4:	0800c2c2 	.word	0x0800c2c2
 800abf8:	0800c2ca 	.word	0x0800c2ca

0800abfc <_free_r>:
 800abfc:	b570      	push	{r4, r5, r6, lr}
 800abfe:	0005      	movs	r5, r0
 800ac00:	2900      	cmp	r1, #0
 800ac02:	d010      	beq.n	800ac26 <_free_r+0x2a>
 800ac04:	1f0c      	subs	r4, r1, #4
 800ac06:	6823      	ldr	r3, [r4, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da00      	bge.n	800ac0e <_free_r+0x12>
 800ac0c:	18e4      	adds	r4, r4, r3
 800ac0e:	0028      	movs	r0, r5
 800ac10:	f000 f8fe 	bl	800ae10 <__malloc_lock>
 800ac14:	4a1d      	ldr	r2, [pc, #116]	; (800ac8c <_free_r+0x90>)
 800ac16:	6813      	ldr	r3, [r2, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d105      	bne.n	800ac28 <_free_r+0x2c>
 800ac1c:	6063      	str	r3, [r4, #4]
 800ac1e:	6014      	str	r4, [r2, #0]
 800ac20:	0028      	movs	r0, r5
 800ac22:	f000 f8fd 	bl	800ae20 <__malloc_unlock>
 800ac26:	bd70      	pop	{r4, r5, r6, pc}
 800ac28:	42a3      	cmp	r3, r4
 800ac2a:	d908      	bls.n	800ac3e <_free_r+0x42>
 800ac2c:	6820      	ldr	r0, [r4, #0]
 800ac2e:	1821      	adds	r1, r4, r0
 800ac30:	428b      	cmp	r3, r1
 800ac32:	d1f3      	bne.n	800ac1c <_free_r+0x20>
 800ac34:	6819      	ldr	r1, [r3, #0]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	1809      	adds	r1, r1, r0
 800ac3a:	6021      	str	r1, [r4, #0]
 800ac3c:	e7ee      	b.n	800ac1c <_free_r+0x20>
 800ac3e:	001a      	movs	r2, r3
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <_free_r+0x4e>
 800ac46:	42a3      	cmp	r3, r4
 800ac48:	d9f9      	bls.n	800ac3e <_free_r+0x42>
 800ac4a:	6811      	ldr	r1, [r2, #0]
 800ac4c:	1850      	adds	r0, r2, r1
 800ac4e:	42a0      	cmp	r0, r4
 800ac50:	d10b      	bne.n	800ac6a <_free_r+0x6e>
 800ac52:	6820      	ldr	r0, [r4, #0]
 800ac54:	1809      	adds	r1, r1, r0
 800ac56:	1850      	adds	r0, r2, r1
 800ac58:	6011      	str	r1, [r2, #0]
 800ac5a:	4283      	cmp	r3, r0
 800ac5c:	d1e0      	bne.n	800ac20 <_free_r+0x24>
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	1841      	adds	r1, r0, r1
 800ac64:	6011      	str	r1, [r2, #0]
 800ac66:	6053      	str	r3, [r2, #4]
 800ac68:	e7da      	b.n	800ac20 <_free_r+0x24>
 800ac6a:	42a0      	cmp	r0, r4
 800ac6c:	d902      	bls.n	800ac74 <_free_r+0x78>
 800ac6e:	230c      	movs	r3, #12
 800ac70:	602b      	str	r3, [r5, #0]
 800ac72:	e7d5      	b.n	800ac20 <_free_r+0x24>
 800ac74:	6820      	ldr	r0, [r4, #0]
 800ac76:	1821      	adds	r1, r4, r0
 800ac78:	428b      	cmp	r3, r1
 800ac7a:	d103      	bne.n	800ac84 <_free_r+0x88>
 800ac7c:	6819      	ldr	r1, [r3, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	1809      	adds	r1, r1, r0
 800ac82:	6021      	str	r1, [r4, #0]
 800ac84:	6063      	str	r3, [r4, #4]
 800ac86:	6054      	str	r4, [r2, #4]
 800ac88:	e7ca      	b.n	800ac20 <_free_r+0x24>
 800ac8a:	46c0      	nop			; (mov r8, r8)
 800ac8c:	20000780 	.word	0x20000780

0800ac90 <malloc>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	4b03      	ldr	r3, [pc, #12]	; (800aca0 <malloc+0x10>)
 800ac94:	0001      	movs	r1, r0
 800ac96:	6818      	ldr	r0, [r3, #0]
 800ac98:	f000 f826 	bl	800ace8 <_malloc_r>
 800ac9c:	bd10      	pop	{r4, pc}
 800ac9e:	46c0      	nop			; (mov r8, r8)
 800aca0:	2000024c 	.word	0x2000024c

0800aca4 <sbrk_aligned>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	4e0f      	ldr	r6, [pc, #60]	; (800ace4 <sbrk_aligned+0x40>)
 800aca8:	000d      	movs	r5, r1
 800acaa:	6831      	ldr	r1, [r6, #0]
 800acac:	0004      	movs	r4, r0
 800acae:	2900      	cmp	r1, #0
 800acb0:	d102      	bne.n	800acb8 <sbrk_aligned+0x14>
 800acb2:	f001 f86f 	bl	800bd94 <_sbrk_r>
 800acb6:	6030      	str	r0, [r6, #0]
 800acb8:	0029      	movs	r1, r5
 800acba:	0020      	movs	r0, r4
 800acbc:	f001 f86a 	bl	800bd94 <_sbrk_r>
 800acc0:	1c43      	adds	r3, r0, #1
 800acc2:	d00a      	beq.n	800acda <sbrk_aligned+0x36>
 800acc4:	2303      	movs	r3, #3
 800acc6:	1cc5      	adds	r5, r0, #3
 800acc8:	439d      	bics	r5, r3
 800acca:	42a8      	cmp	r0, r5
 800accc:	d007      	beq.n	800acde <sbrk_aligned+0x3a>
 800acce:	1a29      	subs	r1, r5, r0
 800acd0:	0020      	movs	r0, r4
 800acd2:	f001 f85f 	bl	800bd94 <_sbrk_r>
 800acd6:	3001      	adds	r0, #1
 800acd8:	d101      	bne.n	800acde <sbrk_aligned+0x3a>
 800acda:	2501      	movs	r5, #1
 800acdc:	426d      	negs	r5, r5
 800acde:	0028      	movs	r0, r5
 800ace0:	bd70      	pop	{r4, r5, r6, pc}
 800ace2:	46c0      	nop			; (mov r8, r8)
 800ace4:	20000784 	.word	0x20000784

0800ace8 <_malloc_r>:
 800ace8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acea:	2203      	movs	r2, #3
 800acec:	1ccb      	adds	r3, r1, #3
 800acee:	4393      	bics	r3, r2
 800acf0:	3308      	adds	r3, #8
 800acf2:	0006      	movs	r6, r0
 800acf4:	001f      	movs	r7, r3
 800acf6:	2b0c      	cmp	r3, #12
 800acf8:	d238      	bcs.n	800ad6c <_malloc_r+0x84>
 800acfa:	270c      	movs	r7, #12
 800acfc:	42b9      	cmp	r1, r7
 800acfe:	d837      	bhi.n	800ad70 <_malloc_r+0x88>
 800ad00:	0030      	movs	r0, r6
 800ad02:	f000 f885 	bl	800ae10 <__malloc_lock>
 800ad06:	4b38      	ldr	r3, [pc, #224]	; (800ade8 <_malloc_r+0x100>)
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	001c      	movs	r4, r3
 800ad0e:	2c00      	cmp	r4, #0
 800ad10:	d133      	bne.n	800ad7a <_malloc_r+0x92>
 800ad12:	0039      	movs	r1, r7
 800ad14:	0030      	movs	r0, r6
 800ad16:	f7ff ffc5 	bl	800aca4 <sbrk_aligned>
 800ad1a:	0004      	movs	r4, r0
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d15e      	bne.n	800adde <_malloc_r+0xf6>
 800ad20:	9b00      	ldr	r3, [sp, #0]
 800ad22:	681c      	ldr	r4, [r3, #0]
 800ad24:	0025      	movs	r5, r4
 800ad26:	2d00      	cmp	r5, #0
 800ad28:	d14e      	bne.n	800adc8 <_malloc_r+0xe0>
 800ad2a:	2c00      	cmp	r4, #0
 800ad2c:	d051      	beq.n	800add2 <_malloc_r+0xea>
 800ad2e:	6823      	ldr	r3, [r4, #0]
 800ad30:	0029      	movs	r1, r5
 800ad32:	18e3      	adds	r3, r4, r3
 800ad34:	0030      	movs	r0, r6
 800ad36:	9301      	str	r3, [sp, #4]
 800ad38:	f001 f82c 	bl	800bd94 <_sbrk_r>
 800ad3c:	9b01      	ldr	r3, [sp, #4]
 800ad3e:	4283      	cmp	r3, r0
 800ad40:	d147      	bne.n	800add2 <_malloc_r+0xea>
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	0030      	movs	r0, r6
 800ad46:	1aff      	subs	r7, r7, r3
 800ad48:	0039      	movs	r1, r7
 800ad4a:	f7ff ffab 	bl	800aca4 <sbrk_aligned>
 800ad4e:	3001      	adds	r0, #1
 800ad50:	d03f      	beq.n	800add2 <_malloc_r+0xea>
 800ad52:	6823      	ldr	r3, [r4, #0]
 800ad54:	19db      	adds	r3, r3, r7
 800ad56:	6023      	str	r3, [r4, #0]
 800ad58:	9b00      	ldr	r3, [sp, #0]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d040      	beq.n	800ade2 <_malloc_r+0xfa>
 800ad60:	685a      	ldr	r2, [r3, #4]
 800ad62:	42a2      	cmp	r2, r4
 800ad64:	d133      	bne.n	800adce <_malloc_r+0xe6>
 800ad66:	2200      	movs	r2, #0
 800ad68:	605a      	str	r2, [r3, #4]
 800ad6a:	e014      	b.n	800ad96 <_malloc_r+0xae>
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	dac5      	bge.n	800acfc <_malloc_r+0x14>
 800ad70:	230c      	movs	r3, #12
 800ad72:	2500      	movs	r5, #0
 800ad74:	6033      	str	r3, [r6, #0]
 800ad76:	0028      	movs	r0, r5
 800ad78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad7a:	6821      	ldr	r1, [r4, #0]
 800ad7c:	1bc9      	subs	r1, r1, r7
 800ad7e:	d420      	bmi.n	800adc2 <_malloc_r+0xda>
 800ad80:	290b      	cmp	r1, #11
 800ad82:	d918      	bls.n	800adb6 <_malloc_r+0xce>
 800ad84:	19e2      	adds	r2, r4, r7
 800ad86:	6027      	str	r7, [r4, #0]
 800ad88:	42a3      	cmp	r3, r4
 800ad8a:	d112      	bne.n	800adb2 <_malloc_r+0xca>
 800ad8c:	9b00      	ldr	r3, [sp, #0]
 800ad8e:	601a      	str	r2, [r3, #0]
 800ad90:	6863      	ldr	r3, [r4, #4]
 800ad92:	6011      	str	r1, [r2, #0]
 800ad94:	6053      	str	r3, [r2, #4]
 800ad96:	0030      	movs	r0, r6
 800ad98:	0025      	movs	r5, r4
 800ad9a:	f000 f841 	bl	800ae20 <__malloc_unlock>
 800ad9e:	2207      	movs	r2, #7
 800ada0:	350b      	adds	r5, #11
 800ada2:	1d23      	adds	r3, r4, #4
 800ada4:	4395      	bics	r5, r2
 800ada6:	1aea      	subs	r2, r5, r3
 800ada8:	429d      	cmp	r5, r3
 800adaa:	d0e4      	beq.n	800ad76 <_malloc_r+0x8e>
 800adac:	1b5b      	subs	r3, r3, r5
 800adae:	50a3      	str	r3, [r4, r2]
 800adb0:	e7e1      	b.n	800ad76 <_malloc_r+0x8e>
 800adb2:	605a      	str	r2, [r3, #4]
 800adb4:	e7ec      	b.n	800ad90 <_malloc_r+0xa8>
 800adb6:	6862      	ldr	r2, [r4, #4]
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d1d5      	bne.n	800ad68 <_malloc_r+0x80>
 800adbc:	9b00      	ldr	r3, [sp, #0]
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	e7e9      	b.n	800ad96 <_malloc_r+0xae>
 800adc2:	0023      	movs	r3, r4
 800adc4:	6864      	ldr	r4, [r4, #4]
 800adc6:	e7a2      	b.n	800ad0e <_malloc_r+0x26>
 800adc8:	002c      	movs	r4, r5
 800adca:	686d      	ldr	r5, [r5, #4]
 800adcc:	e7ab      	b.n	800ad26 <_malloc_r+0x3e>
 800adce:	0013      	movs	r3, r2
 800add0:	e7c4      	b.n	800ad5c <_malloc_r+0x74>
 800add2:	230c      	movs	r3, #12
 800add4:	0030      	movs	r0, r6
 800add6:	6033      	str	r3, [r6, #0]
 800add8:	f000 f822 	bl	800ae20 <__malloc_unlock>
 800addc:	e7cb      	b.n	800ad76 <_malloc_r+0x8e>
 800adde:	6027      	str	r7, [r4, #0]
 800ade0:	e7d9      	b.n	800ad96 <_malloc_r+0xae>
 800ade2:	605b      	str	r3, [r3, #4]
 800ade4:	deff      	udf	#255	; 0xff
 800ade6:	46c0      	nop			; (mov r8, r8)
 800ade8:	20000780 	.word	0x20000780

0800adec <__ascii_mbtowc>:
 800adec:	b082      	sub	sp, #8
 800adee:	2900      	cmp	r1, #0
 800adf0:	d100      	bne.n	800adf4 <__ascii_mbtowc+0x8>
 800adf2:	a901      	add	r1, sp, #4
 800adf4:	1e10      	subs	r0, r2, #0
 800adf6:	d006      	beq.n	800ae06 <__ascii_mbtowc+0x1a>
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d006      	beq.n	800ae0a <__ascii_mbtowc+0x1e>
 800adfc:	7813      	ldrb	r3, [r2, #0]
 800adfe:	600b      	str	r3, [r1, #0]
 800ae00:	7810      	ldrb	r0, [r2, #0]
 800ae02:	1e43      	subs	r3, r0, #1
 800ae04:	4198      	sbcs	r0, r3
 800ae06:	b002      	add	sp, #8
 800ae08:	4770      	bx	lr
 800ae0a:	2002      	movs	r0, #2
 800ae0c:	4240      	negs	r0, r0
 800ae0e:	e7fa      	b.n	800ae06 <__ascii_mbtowc+0x1a>

0800ae10 <__malloc_lock>:
 800ae10:	b510      	push	{r4, lr}
 800ae12:	4802      	ldr	r0, [pc, #8]	; (800ae1c <__malloc_lock+0xc>)
 800ae14:	f7ff f81f 	bl	8009e56 <__retarget_lock_acquire_recursive>
 800ae18:	bd10      	pop	{r4, pc}
 800ae1a:	46c0      	nop			; (mov r8, r8)
 800ae1c:	2000077c 	.word	0x2000077c

0800ae20 <__malloc_unlock>:
 800ae20:	b510      	push	{r4, lr}
 800ae22:	4802      	ldr	r0, [pc, #8]	; (800ae2c <__malloc_unlock+0xc>)
 800ae24:	f7ff f818 	bl	8009e58 <__retarget_lock_release_recursive>
 800ae28:	bd10      	pop	{r4, pc}
 800ae2a:	46c0      	nop			; (mov r8, r8)
 800ae2c:	2000077c 	.word	0x2000077c

0800ae30 <_Balloc>:
 800ae30:	b570      	push	{r4, r5, r6, lr}
 800ae32:	69c5      	ldr	r5, [r0, #28]
 800ae34:	0006      	movs	r6, r0
 800ae36:	000c      	movs	r4, r1
 800ae38:	2d00      	cmp	r5, #0
 800ae3a:	d10e      	bne.n	800ae5a <_Balloc+0x2a>
 800ae3c:	2010      	movs	r0, #16
 800ae3e:	f7ff ff27 	bl	800ac90 <malloc>
 800ae42:	1e02      	subs	r2, r0, #0
 800ae44:	61f0      	str	r0, [r6, #28]
 800ae46:	d104      	bne.n	800ae52 <_Balloc+0x22>
 800ae48:	216b      	movs	r1, #107	; 0x6b
 800ae4a:	4b19      	ldr	r3, [pc, #100]	; (800aeb0 <_Balloc+0x80>)
 800ae4c:	4819      	ldr	r0, [pc, #100]	; (800aeb4 <_Balloc+0x84>)
 800ae4e:	f7ff f819 	bl	8009e84 <__assert_func>
 800ae52:	6045      	str	r5, [r0, #4]
 800ae54:	6085      	str	r5, [r0, #8]
 800ae56:	6005      	str	r5, [r0, #0]
 800ae58:	60c5      	str	r5, [r0, #12]
 800ae5a:	69f5      	ldr	r5, [r6, #28]
 800ae5c:	68eb      	ldr	r3, [r5, #12]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d013      	beq.n	800ae8a <_Balloc+0x5a>
 800ae62:	69f3      	ldr	r3, [r6, #28]
 800ae64:	00a2      	lsls	r2, r4, #2
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	189b      	adds	r3, r3, r2
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d118      	bne.n	800aea2 <_Balloc+0x72>
 800ae70:	2101      	movs	r1, #1
 800ae72:	000d      	movs	r5, r1
 800ae74:	40a5      	lsls	r5, r4
 800ae76:	1d6a      	adds	r2, r5, #5
 800ae78:	0030      	movs	r0, r6
 800ae7a:	0092      	lsls	r2, r2, #2
 800ae7c:	f000 ffa3 	bl	800bdc6 <_calloc_r>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d00c      	beq.n	800ae9e <_Balloc+0x6e>
 800ae84:	6044      	str	r4, [r0, #4]
 800ae86:	6085      	str	r5, [r0, #8]
 800ae88:	e00d      	b.n	800aea6 <_Balloc+0x76>
 800ae8a:	2221      	movs	r2, #33	; 0x21
 800ae8c:	2104      	movs	r1, #4
 800ae8e:	0030      	movs	r0, r6
 800ae90:	f000 ff99 	bl	800bdc6 <_calloc_r>
 800ae94:	69f3      	ldr	r3, [r6, #28]
 800ae96:	60e8      	str	r0, [r5, #12]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1e1      	bne.n	800ae62 <_Balloc+0x32>
 800ae9e:	2000      	movs	r0, #0
 800aea0:	bd70      	pop	{r4, r5, r6, pc}
 800aea2:	6802      	ldr	r2, [r0, #0]
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	2300      	movs	r3, #0
 800aea8:	6103      	str	r3, [r0, #16]
 800aeaa:	60c3      	str	r3, [r0, #12]
 800aeac:	e7f8      	b.n	800aea0 <_Balloc+0x70>
 800aeae:	46c0      	nop			; (mov r8, r8)
 800aeb0:	0800c2cf 	.word	0x0800c2cf
 800aeb4:	0800c34f 	.word	0x0800c34f

0800aeb8 <_Bfree>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	69c6      	ldr	r6, [r0, #28]
 800aebc:	0005      	movs	r5, r0
 800aebe:	000c      	movs	r4, r1
 800aec0:	2e00      	cmp	r6, #0
 800aec2:	d10e      	bne.n	800aee2 <_Bfree+0x2a>
 800aec4:	2010      	movs	r0, #16
 800aec6:	f7ff fee3 	bl	800ac90 <malloc>
 800aeca:	1e02      	subs	r2, r0, #0
 800aecc:	61e8      	str	r0, [r5, #28]
 800aece:	d104      	bne.n	800aeda <_Bfree+0x22>
 800aed0:	218f      	movs	r1, #143	; 0x8f
 800aed2:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <_Bfree+0x40>)
 800aed4:	4809      	ldr	r0, [pc, #36]	; (800aefc <_Bfree+0x44>)
 800aed6:	f7fe ffd5 	bl	8009e84 <__assert_func>
 800aeda:	6046      	str	r6, [r0, #4]
 800aedc:	6086      	str	r6, [r0, #8]
 800aede:	6006      	str	r6, [r0, #0]
 800aee0:	60c6      	str	r6, [r0, #12]
 800aee2:	2c00      	cmp	r4, #0
 800aee4:	d007      	beq.n	800aef6 <_Bfree+0x3e>
 800aee6:	69eb      	ldr	r3, [r5, #28]
 800aee8:	6862      	ldr	r2, [r4, #4]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	0092      	lsls	r2, r2, #2
 800aeee:	189b      	adds	r3, r3, r2
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	6022      	str	r2, [r4, #0]
 800aef4:	601c      	str	r4, [r3, #0]
 800aef6:	bd70      	pop	{r4, r5, r6, pc}
 800aef8:	0800c2cf 	.word	0x0800c2cf
 800aefc:	0800c34f 	.word	0x0800c34f

0800af00 <__multadd>:
 800af00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af02:	000e      	movs	r6, r1
 800af04:	9001      	str	r0, [sp, #4]
 800af06:	000c      	movs	r4, r1
 800af08:	001d      	movs	r5, r3
 800af0a:	2000      	movs	r0, #0
 800af0c:	690f      	ldr	r7, [r1, #16]
 800af0e:	3614      	adds	r6, #20
 800af10:	6833      	ldr	r3, [r6, #0]
 800af12:	3001      	adds	r0, #1
 800af14:	b299      	uxth	r1, r3
 800af16:	4351      	muls	r1, r2
 800af18:	0c1b      	lsrs	r3, r3, #16
 800af1a:	4353      	muls	r3, r2
 800af1c:	1949      	adds	r1, r1, r5
 800af1e:	0c0d      	lsrs	r5, r1, #16
 800af20:	195b      	adds	r3, r3, r5
 800af22:	0c1d      	lsrs	r5, r3, #16
 800af24:	b289      	uxth	r1, r1
 800af26:	041b      	lsls	r3, r3, #16
 800af28:	185b      	adds	r3, r3, r1
 800af2a:	c608      	stmia	r6!, {r3}
 800af2c:	4287      	cmp	r7, r0
 800af2e:	dcef      	bgt.n	800af10 <__multadd+0x10>
 800af30:	2d00      	cmp	r5, #0
 800af32:	d022      	beq.n	800af7a <__multadd+0x7a>
 800af34:	68a3      	ldr	r3, [r4, #8]
 800af36:	42bb      	cmp	r3, r7
 800af38:	dc19      	bgt.n	800af6e <__multadd+0x6e>
 800af3a:	6861      	ldr	r1, [r4, #4]
 800af3c:	9801      	ldr	r0, [sp, #4]
 800af3e:	3101      	adds	r1, #1
 800af40:	f7ff ff76 	bl	800ae30 <_Balloc>
 800af44:	1e06      	subs	r6, r0, #0
 800af46:	d105      	bne.n	800af54 <__multadd+0x54>
 800af48:	0032      	movs	r2, r6
 800af4a:	21ba      	movs	r1, #186	; 0xba
 800af4c:	4b0c      	ldr	r3, [pc, #48]	; (800af80 <__multadd+0x80>)
 800af4e:	480d      	ldr	r0, [pc, #52]	; (800af84 <__multadd+0x84>)
 800af50:	f7fe ff98 	bl	8009e84 <__assert_func>
 800af54:	0021      	movs	r1, r4
 800af56:	6922      	ldr	r2, [r4, #16]
 800af58:	310c      	adds	r1, #12
 800af5a:	3202      	adds	r2, #2
 800af5c:	0092      	lsls	r2, r2, #2
 800af5e:	300c      	adds	r0, #12
 800af60:	f7fe ff86 	bl	8009e70 <memcpy>
 800af64:	0021      	movs	r1, r4
 800af66:	9801      	ldr	r0, [sp, #4]
 800af68:	f7ff ffa6 	bl	800aeb8 <_Bfree>
 800af6c:	0034      	movs	r4, r6
 800af6e:	1d3b      	adds	r3, r7, #4
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	18e3      	adds	r3, r4, r3
 800af74:	605d      	str	r5, [r3, #4]
 800af76:	1c7b      	adds	r3, r7, #1
 800af78:	6123      	str	r3, [r4, #16]
 800af7a:	0020      	movs	r0, r4
 800af7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af7e:	46c0      	nop			; (mov r8, r8)
 800af80:	0800c33e 	.word	0x0800c33e
 800af84:	0800c34f 	.word	0x0800c34f

0800af88 <__hi0bits>:
 800af88:	0003      	movs	r3, r0
 800af8a:	0c02      	lsrs	r2, r0, #16
 800af8c:	2000      	movs	r0, #0
 800af8e:	4282      	cmp	r2, r0
 800af90:	d101      	bne.n	800af96 <__hi0bits+0xe>
 800af92:	041b      	lsls	r3, r3, #16
 800af94:	3010      	adds	r0, #16
 800af96:	0e1a      	lsrs	r2, r3, #24
 800af98:	d101      	bne.n	800af9e <__hi0bits+0x16>
 800af9a:	3008      	adds	r0, #8
 800af9c:	021b      	lsls	r3, r3, #8
 800af9e:	0f1a      	lsrs	r2, r3, #28
 800afa0:	d101      	bne.n	800afa6 <__hi0bits+0x1e>
 800afa2:	3004      	adds	r0, #4
 800afa4:	011b      	lsls	r3, r3, #4
 800afa6:	0f9a      	lsrs	r2, r3, #30
 800afa8:	d101      	bne.n	800afae <__hi0bits+0x26>
 800afaa:	3002      	adds	r0, #2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	2b00      	cmp	r3, #0
 800afb0:	db03      	blt.n	800afba <__hi0bits+0x32>
 800afb2:	3001      	adds	r0, #1
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	d400      	bmi.n	800afba <__hi0bits+0x32>
 800afb8:	2020      	movs	r0, #32
 800afba:	4770      	bx	lr

0800afbc <__lo0bits>:
 800afbc:	6803      	ldr	r3, [r0, #0]
 800afbe:	0001      	movs	r1, r0
 800afc0:	2207      	movs	r2, #7
 800afc2:	0018      	movs	r0, r3
 800afc4:	4010      	ands	r0, r2
 800afc6:	4213      	tst	r3, r2
 800afc8:	d00d      	beq.n	800afe6 <__lo0bits+0x2a>
 800afca:	3a06      	subs	r2, #6
 800afcc:	2000      	movs	r0, #0
 800afce:	4213      	tst	r3, r2
 800afd0:	d105      	bne.n	800afde <__lo0bits+0x22>
 800afd2:	3002      	adds	r0, #2
 800afd4:	4203      	tst	r3, r0
 800afd6:	d003      	beq.n	800afe0 <__lo0bits+0x24>
 800afd8:	40d3      	lsrs	r3, r2
 800afda:	0010      	movs	r0, r2
 800afdc:	600b      	str	r3, [r1, #0]
 800afde:	4770      	bx	lr
 800afe0:	089b      	lsrs	r3, r3, #2
 800afe2:	600b      	str	r3, [r1, #0]
 800afe4:	e7fb      	b.n	800afde <__lo0bits+0x22>
 800afe6:	b29a      	uxth	r2, r3
 800afe8:	2a00      	cmp	r2, #0
 800afea:	d101      	bne.n	800aff0 <__lo0bits+0x34>
 800afec:	2010      	movs	r0, #16
 800afee:	0c1b      	lsrs	r3, r3, #16
 800aff0:	b2da      	uxtb	r2, r3
 800aff2:	2a00      	cmp	r2, #0
 800aff4:	d101      	bne.n	800affa <__lo0bits+0x3e>
 800aff6:	3008      	adds	r0, #8
 800aff8:	0a1b      	lsrs	r3, r3, #8
 800affa:	071a      	lsls	r2, r3, #28
 800affc:	d101      	bne.n	800b002 <__lo0bits+0x46>
 800affe:	3004      	adds	r0, #4
 800b000:	091b      	lsrs	r3, r3, #4
 800b002:	079a      	lsls	r2, r3, #30
 800b004:	d101      	bne.n	800b00a <__lo0bits+0x4e>
 800b006:	3002      	adds	r0, #2
 800b008:	089b      	lsrs	r3, r3, #2
 800b00a:	07da      	lsls	r2, r3, #31
 800b00c:	d4e9      	bmi.n	800afe2 <__lo0bits+0x26>
 800b00e:	3001      	adds	r0, #1
 800b010:	085b      	lsrs	r3, r3, #1
 800b012:	d1e6      	bne.n	800afe2 <__lo0bits+0x26>
 800b014:	2020      	movs	r0, #32
 800b016:	e7e2      	b.n	800afde <__lo0bits+0x22>

0800b018 <__i2b>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	000c      	movs	r4, r1
 800b01c:	2101      	movs	r1, #1
 800b01e:	f7ff ff07 	bl	800ae30 <_Balloc>
 800b022:	2800      	cmp	r0, #0
 800b024:	d107      	bne.n	800b036 <__i2b+0x1e>
 800b026:	2146      	movs	r1, #70	; 0x46
 800b028:	4c05      	ldr	r4, [pc, #20]	; (800b040 <__i2b+0x28>)
 800b02a:	0002      	movs	r2, r0
 800b02c:	4b05      	ldr	r3, [pc, #20]	; (800b044 <__i2b+0x2c>)
 800b02e:	0020      	movs	r0, r4
 800b030:	31ff      	adds	r1, #255	; 0xff
 800b032:	f7fe ff27 	bl	8009e84 <__assert_func>
 800b036:	2301      	movs	r3, #1
 800b038:	6144      	str	r4, [r0, #20]
 800b03a:	6103      	str	r3, [r0, #16]
 800b03c:	bd10      	pop	{r4, pc}
 800b03e:	46c0      	nop			; (mov r8, r8)
 800b040:	0800c34f 	.word	0x0800c34f
 800b044:	0800c33e 	.word	0x0800c33e

0800b048 <__multiply>:
 800b048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b04a:	0015      	movs	r5, r2
 800b04c:	690a      	ldr	r2, [r1, #16]
 800b04e:	692b      	ldr	r3, [r5, #16]
 800b050:	000c      	movs	r4, r1
 800b052:	b08b      	sub	sp, #44	; 0x2c
 800b054:	429a      	cmp	r2, r3
 800b056:	da01      	bge.n	800b05c <__multiply+0x14>
 800b058:	002c      	movs	r4, r5
 800b05a:	000d      	movs	r5, r1
 800b05c:	6927      	ldr	r7, [r4, #16]
 800b05e:	692e      	ldr	r6, [r5, #16]
 800b060:	6861      	ldr	r1, [r4, #4]
 800b062:	19bb      	adds	r3, r7, r6
 800b064:	9303      	str	r3, [sp, #12]
 800b066:	68a3      	ldr	r3, [r4, #8]
 800b068:	19ba      	adds	r2, r7, r6
 800b06a:	4293      	cmp	r3, r2
 800b06c:	da00      	bge.n	800b070 <__multiply+0x28>
 800b06e:	3101      	adds	r1, #1
 800b070:	f7ff fede 	bl	800ae30 <_Balloc>
 800b074:	9002      	str	r0, [sp, #8]
 800b076:	2800      	cmp	r0, #0
 800b078:	d106      	bne.n	800b088 <__multiply+0x40>
 800b07a:	21b1      	movs	r1, #177	; 0xb1
 800b07c:	4b48      	ldr	r3, [pc, #288]	; (800b1a0 <__multiply+0x158>)
 800b07e:	4849      	ldr	r0, [pc, #292]	; (800b1a4 <__multiply+0x15c>)
 800b080:	9a02      	ldr	r2, [sp, #8]
 800b082:	0049      	lsls	r1, r1, #1
 800b084:	f7fe fefe 	bl	8009e84 <__assert_func>
 800b088:	9b02      	ldr	r3, [sp, #8]
 800b08a:	2200      	movs	r2, #0
 800b08c:	3314      	adds	r3, #20
 800b08e:	469c      	mov	ip, r3
 800b090:	19bb      	adds	r3, r7, r6
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4463      	add	r3, ip
 800b096:	9304      	str	r3, [sp, #16]
 800b098:	4663      	mov	r3, ip
 800b09a:	9904      	ldr	r1, [sp, #16]
 800b09c:	428b      	cmp	r3, r1
 800b09e:	d32a      	bcc.n	800b0f6 <__multiply+0xae>
 800b0a0:	0023      	movs	r3, r4
 800b0a2:	00bf      	lsls	r7, r7, #2
 800b0a4:	3314      	adds	r3, #20
 800b0a6:	3514      	adds	r5, #20
 800b0a8:	9308      	str	r3, [sp, #32]
 800b0aa:	00b6      	lsls	r6, r6, #2
 800b0ac:	19db      	adds	r3, r3, r7
 800b0ae:	9305      	str	r3, [sp, #20]
 800b0b0:	19ab      	adds	r3, r5, r6
 800b0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	9306      	str	r3, [sp, #24]
 800b0b8:	0023      	movs	r3, r4
 800b0ba:	9a05      	ldr	r2, [sp, #20]
 800b0bc:	3315      	adds	r3, #21
 800b0be:	9501      	str	r5, [sp, #4]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d305      	bcc.n	800b0d0 <__multiply+0x88>
 800b0c4:	1b13      	subs	r3, r2, r4
 800b0c6:	3b15      	subs	r3, #21
 800b0c8:	089b      	lsrs	r3, r3, #2
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	9306      	str	r3, [sp, #24]
 800b0d0:	9b01      	ldr	r3, [sp, #4]
 800b0d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	d310      	bcc.n	800b0fa <__multiply+0xb2>
 800b0d8:	9b03      	ldr	r3, [sp, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	dd05      	ble.n	800b0ea <__multiply+0xa2>
 800b0de:	9b04      	ldr	r3, [sp, #16]
 800b0e0:	3b04      	subs	r3, #4
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d056      	beq.n	800b198 <__multiply+0x150>
 800b0ea:	9b02      	ldr	r3, [sp, #8]
 800b0ec:	9a03      	ldr	r2, [sp, #12]
 800b0ee:	0018      	movs	r0, r3
 800b0f0:	611a      	str	r2, [r3, #16]
 800b0f2:	b00b      	add	sp, #44	; 0x2c
 800b0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f6:	c304      	stmia	r3!, {r2}
 800b0f8:	e7cf      	b.n	800b09a <__multiply+0x52>
 800b0fa:	9b01      	ldr	r3, [sp, #4]
 800b0fc:	6818      	ldr	r0, [r3, #0]
 800b0fe:	b280      	uxth	r0, r0
 800b100:	2800      	cmp	r0, #0
 800b102:	d01e      	beq.n	800b142 <__multiply+0xfa>
 800b104:	4667      	mov	r7, ip
 800b106:	2500      	movs	r5, #0
 800b108:	9e08      	ldr	r6, [sp, #32]
 800b10a:	ce02      	ldmia	r6!, {r1}
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	9307      	str	r3, [sp, #28]
 800b110:	b28b      	uxth	r3, r1
 800b112:	4343      	muls	r3, r0
 800b114:	001a      	movs	r2, r3
 800b116:	466b      	mov	r3, sp
 800b118:	8b9b      	ldrh	r3, [r3, #28]
 800b11a:	18d3      	adds	r3, r2, r3
 800b11c:	195b      	adds	r3, r3, r5
 800b11e:	0c0d      	lsrs	r5, r1, #16
 800b120:	4345      	muls	r5, r0
 800b122:	9a07      	ldr	r2, [sp, #28]
 800b124:	0c11      	lsrs	r1, r2, #16
 800b126:	1869      	adds	r1, r5, r1
 800b128:	0c1a      	lsrs	r2, r3, #16
 800b12a:	188a      	adds	r2, r1, r2
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	0c15      	lsrs	r5, r2, #16
 800b130:	0412      	lsls	r2, r2, #16
 800b132:	431a      	orrs	r2, r3
 800b134:	9b05      	ldr	r3, [sp, #20]
 800b136:	c704      	stmia	r7!, {r2}
 800b138:	42b3      	cmp	r3, r6
 800b13a:	d8e6      	bhi.n	800b10a <__multiply+0xc2>
 800b13c:	4663      	mov	r3, ip
 800b13e:	9a06      	ldr	r2, [sp, #24]
 800b140:	509d      	str	r5, [r3, r2]
 800b142:	9b01      	ldr	r3, [sp, #4]
 800b144:	6818      	ldr	r0, [r3, #0]
 800b146:	0c00      	lsrs	r0, r0, #16
 800b148:	d020      	beq.n	800b18c <__multiply+0x144>
 800b14a:	4663      	mov	r3, ip
 800b14c:	0025      	movs	r5, r4
 800b14e:	4661      	mov	r1, ip
 800b150:	2700      	movs	r7, #0
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3514      	adds	r5, #20
 800b156:	682a      	ldr	r2, [r5, #0]
 800b158:	680e      	ldr	r6, [r1, #0]
 800b15a:	b292      	uxth	r2, r2
 800b15c:	4342      	muls	r2, r0
 800b15e:	0c36      	lsrs	r6, r6, #16
 800b160:	1992      	adds	r2, r2, r6
 800b162:	19d2      	adds	r2, r2, r7
 800b164:	0416      	lsls	r6, r2, #16
 800b166:	b29b      	uxth	r3, r3
 800b168:	431e      	orrs	r6, r3
 800b16a:	600e      	str	r6, [r1, #0]
 800b16c:	cd40      	ldmia	r5!, {r6}
 800b16e:	684b      	ldr	r3, [r1, #4]
 800b170:	0c36      	lsrs	r6, r6, #16
 800b172:	4346      	muls	r6, r0
 800b174:	b29b      	uxth	r3, r3
 800b176:	0c12      	lsrs	r2, r2, #16
 800b178:	18f3      	adds	r3, r6, r3
 800b17a:	189b      	adds	r3, r3, r2
 800b17c:	9a05      	ldr	r2, [sp, #20]
 800b17e:	0c1f      	lsrs	r7, r3, #16
 800b180:	3104      	adds	r1, #4
 800b182:	42aa      	cmp	r2, r5
 800b184:	d8e7      	bhi.n	800b156 <__multiply+0x10e>
 800b186:	4662      	mov	r2, ip
 800b188:	9906      	ldr	r1, [sp, #24]
 800b18a:	5053      	str	r3, [r2, r1]
 800b18c:	9b01      	ldr	r3, [sp, #4]
 800b18e:	3304      	adds	r3, #4
 800b190:	9301      	str	r3, [sp, #4]
 800b192:	2304      	movs	r3, #4
 800b194:	449c      	add	ip, r3
 800b196:	e79b      	b.n	800b0d0 <__multiply+0x88>
 800b198:	9b03      	ldr	r3, [sp, #12]
 800b19a:	3b01      	subs	r3, #1
 800b19c:	9303      	str	r3, [sp, #12]
 800b19e:	e79b      	b.n	800b0d8 <__multiply+0x90>
 800b1a0:	0800c33e 	.word	0x0800c33e
 800b1a4:	0800c34f 	.word	0x0800c34f

0800b1a8 <__pow5mult>:
 800b1a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1aa:	2303      	movs	r3, #3
 800b1ac:	0015      	movs	r5, r2
 800b1ae:	0007      	movs	r7, r0
 800b1b0:	000e      	movs	r6, r1
 800b1b2:	401a      	ands	r2, r3
 800b1b4:	421d      	tst	r5, r3
 800b1b6:	d008      	beq.n	800b1ca <__pow5mult+0x22>
 800b1b8:	4925      	ldr	r1, [pc, #148]	; (800b250 <__pow5mult+0xa8>)
 800b1ba:	3a01      	subs	r2, #1
 800b1bc:	0092      	lsls	r2, r2, #2
 800b1be:	5852      	ldr	r2, [r2, r1]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	0031      	movs	r1, r6
 800b1c4:	f7ff fe9c 	bl	800af00 <__multadd>
 800b1c8:	0006      	movs	r6, r0
 800b1ca:	10ad      	asrs	r5, r5, #2
 800b1cc:	d03d      	beq.n	800b24a <__pow5mult+0xa2>
 800b1ce:	69fc      	ldr	r4, [r7, #28]
 800b1d0:	2c00      	cmp	r4, #0
 800b1d2:	d10f      	bne.n	800b1f4 <__pow5mult+0x4c>
 800b1d4:	2010      	movs	r0, #16
 800b1d6:	f7ff fd5b 	bl	800ac90 <malloc>
 800b1da:	1e02      	subs	r2, r0, #0
 800b1dc:	61f8      	str	r0, [r7, #28]
 800b1de:	d105      	bne.n	800b1ec <__pow5mult+0x44>
 800b1e0:	21b4      	movs	r1, #180	; 0xb4
 800b1e2:	4b1c      	ldr	r3, [pc, #112]	; (800b254 <__pow5mult+0xac>)
 800b1e4:	481c      	ldr	r0, [pc, #112]	; (800b258 <__pow5mult+0xb0>)
 800b1e6:	31ff      	adds	r1, #255	; 0xff
 800b1e8:	f7fe fe4c 	bl	8009e84 <__assert_func>
 800b1ec:	6044      	str	r4, [r0, #4]
 800b1ee:	6084      	str	r4, [r0, #8]
 800b1f0:	6004      	str	r4, [r0, #0]
 800b1f2:	60c4      	str	r4, [r0, #12]
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	689c      	ldr	r4, [r3, #8]
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	2c00      	cmp	r4, #0
 800b1fc:	d108      	bne.n	800b210 <__pow5mult+0x68>
 800b1fe:	0038      	movs	r0, r7
 800b200:	4916      	ldr	r1, [pc, #88]	; (800b25c <__pow5mult+0xb4>)
 800b202:	f7ff ff09 	bl	800b018 <__i2b>
 800b206:	9b01      	ldr	r3, [sp, #4]
 800b208:	0004      	movs	r4, r0
 800b20a:	6098      	str	r0, [r3, #8]
 800b20c:	2300      	movs	r3, #0
 800b20e:	6003      	str	r3, [r0, #0]
 800b210:	2301      	movs	r3, #1
 800b212:	421d      	tst	r5, r3
 800b214:	d00a      	beq.n	800b22c <__pow5mult+0x84>
 800b216:	0031      	movs	r1, r6
 800b218:	0022      	movs	r2, r4
 800b21a:	0038      	movs	r0, r7
 800b21c:	f7ff ff14 	bl	800b048 <__multiply>
 800b220:	0031      	movs	r1, r6
 800b222:	9001      	str	r0, [sp, #4]
 800b224:	0038      	movs	r0, r7
 800b226:	f7ff fe47 	bl	800aeb8 <_Bfree>
 800b22a:	9e01      	ldr	r6, [sp, #4]
 800b22c:	106d      	asrs	r5, r5, #1
 800b22e:	d00c      	beq.n	800b24a <__pow5mult+0xa2>
 800b230:	6820      	ldr	r0, [r4, #0]
 800b232:	2800      	cmp	r0, #0
 800b234:	d107      	bne.n	800b246 <__pow5mult+0x9e>
 800b236:	0022      	movs	r2, r4
 800b238:	0021      	movs	r1, r4
 800b23a:	0038      	movs	r0, r7
 800b23c:	f7ff ff04 	bl	800b048 <__multiply>
 800b240:	2300      	movs	r3, #0
 800b242:	6020      	str	r0, [r4, #0]
 800b244:	6003      	str	r3, [r0, #0]
 800b246:	0004      	movs	r4, r0
 800b248:	e7e2      	b.n	800b210 <__pow5mult+0x68>
 800b24a:	0030      	movs	r0, r6
 800b24c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b24e:	46c0      	nop			; (mov r8, r8)
 800b250:	0800c498 	.word	0x0800c498
 800b254:	0800c2cf 	.word	0x0800c2cf
 800b258:	0800c34f 	.word	0x0800c34f
 800b25c:	00000271 	.word	0x00000271

0800b260 <__lshift>:
 800b260:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b262:	000c      	movs	r4, r1
 800b264:	0017      	movs	r7, r2
 800b266:	6923      	ldr	r3, [r4, #16]
 800b268:	1155      	asrs	r5, r2, #5
 800b26a:	b087      	sub	sp, #28
 800b26c:	18eb      	adds	r3, r5, r3
 800b26e:	9302      	str	r3, [sp, #8]
 800b270:	3301      	adds	r3, #1
 800b272:	9301      	str	r3, [sp, #4]
 800b274:	6849      	ldr	r1, [r1, #4]
 800b276:	68a3      	ldr	r3, [r4, #8]
 800b278:	9004      	str	r0, [sp, #16]
 800b27a:	9a01      	ldr	r2, [sp, #4]
 800b27c:	4293      	cmp	r3, r2
 800b27e:	db10      	blt.n	800b2a2 <__lshift+0x42>
 800b280:	9804      	ldr	r0, [sp, #16]
 800b282:	f7ff fdd5 	bl	800ae30 <_Balloc>
 800b286:	2300      	movs	r3, #0
 800b288:	0002      	movs	r2, r0
 800b28a:	0006      	movs	r6, r0
 800b28c:	0019      	movs	r1, r3
 800b28e:	3214      	adds	r2, #20
 800b290:	4298      	cmp	r0, r3
 800b292:	d10c      	bne.n	800b2ae <__lshift+0x4e>
 800b294:	31df      	adds	r1, #223	; 0xdf
 800b296:	0032      	movs	r2, r6
 800b298:	4b26      	ldr	r3, [pc, #152]	; (800b334 <__lshift+0xd4>)
 800b29a:	4827      	ldr	r0, [pc, #156]	; (800b338 <__lshift+0xd8>)
 800b29c:	31ff      	adds	r1, #255	; 0xff
 800b29e:	f7fe fdf1 	bl	8009e84 <__assert_func>
 800b2a2:	3101      	adds	r1, #1
 800b2a4:	005b      	lsls	r3, r3, #1
 800b2a6:	e7e8      	b.n	800b27a <__lshift+0x1a>
 800b2a8:	0098      	lsls	r0, r3, #2
 800b2aa:	5011      	str	r1, [r2, r0]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	42ab      	cmp	r3, r5
 800b2b0:	dbfa      	blt.n	800b2a8 <__lshift+0x48>
 800b2b2:	43eb      	mvns	r3, r5
 800b2b4:	17db      	asrs	r3, r3, #31
 800b2b6:	401d      	ands	r5, r3
 800b2b8:	211f      	movs	r1, #31
 800b2ba:	0023      	movs	r3, r4
 800b2bc:	0038      	movs	r0, r7
 800b2be:	00ad      	lsls	r5, r5, #2
 800b2c0:	1955      	adds	r5, r2, r5
 800b2c2:	6922      	ldr	r2, [r4, #16]
 800b2c4:	3314      	adds	r3, #20
 800b2c6:	0092      	lsls	r2, r2, #2
 800b2c8:	4008      	ands	r0, r1
 800b2ca:	4684      	mov	ip, r0
 800b2cc:	189a      	adds	r2, r3, r2
 800b2ce:	420f      	tst	r7, r1
 800b2d0:	d02a      	beq.n	800b328 <__lshift+0xc8>
 800b2d2:	3101      	adds	r1, #1
 800b2d4:	1a09      	subs	r1, r1, r0
 800b2d6:	9105      	str	r1, [sp, #20]
 800b2d8:	2100      	movs	r1, #0
 800b2da:	9503      	str	r5, [sp, #12]
 800b2dc:	4667      	mov	r7, ip
 800b2de:	6818      	ldr	r0, [r3, #0]
 800b2e0:	40b8      	lsls	r0, r7
 800b2e2:	4308      	orrs	r0, r1
 800b2e4:	9903      	ldr	r1, [sp, #12]
 800b2e6:	c101      	stmia	r1!, {r0}
 800b2e8:	9103      	str	r1, [sp, #12]
 800b2ea:	9805      	ldr	r0, [sp, #20]
 800b2ec:	cb02      	ldmia	r3!, {r1}
 800b2ee:	40c1      	lsrs	r1, r0
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d8f3      	bhi.n	800b2dc <__lshift+0x7c>
 800b2f4:	0020      	movs	r0, r4
 800b2f6:	3015      	adds	r0, #21
 800b2f8:	2304      	movs	r3, #4
 800b2fa:	4282      	cmp	r2, r0
 800b2fc:	d304      	bcc.n	800b308 <__lshift+0xa8>
 800b2fe:	1b13      	subs	r3, r2, r4
 800b300:	3b15      	subs	r3, #21
 800b302:	089b      	lsrs	r3, r3, #2
 800b304:	3301      	adds	r3, #1
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	50e9      	str	r1, [r5, r3]
 800b30a:	2900      	cmp	r1, #0
 800b30c:	d002      	beq.n	800b314 <__lshift+0xb4>
 800b30e:	9b02      	ldr	r3, [sp, #8]
 800b310:	3302      	adds	r3, #2
 800b312:	9301      	str	r3, [sp, #4]
 800b314:	9b01      	ldr	r3, [sp, #4]
 800b316:	9804      	ldr	r0, [sp, #16]
 800b318:	3b01      	subs	r3, #1
 800b31a:	0021      	movs	r1, r4
 800b31c:	6133      	str	r3, [r6, #16]
 800b31e:	f7ff fdcb 	bl	800aeb8 <_Bfree>
 800b322:	0030      	movs	r0, r6
 800b324:	b007      	add	sp, #28
 800b326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b328:	cb02      	ldmia	r3!, {r1}
 800b32a:	c502      	stmia	r5!, {r1}
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d8fb      	bhi.n	800b328 <__lshift+0xc8>
 800b330:	e7f0      	b.n	800b314 <__lshift+0xb4>
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	0800c33e 	.word	0x0800c33e
 800b338:	0800c34f 	.word	0x0800c34f

0800b33c <__mcmp>:
 800b33c:	b530      	push	{r4, r5, lr}
 800b33e:	690b      	ldr	r3, [r1, #16]
 800b340:	6904      	ldr	r4, [r0, #16]
 800b342:	0002      	movs	r2, r0
 800b344:	1ae0      	subs	r0, r4, r3
 800b346:	429c      	cmp	r4, r3
 800b348:	d10e      	bne.n	800b368 <__mcmp+0x2c>
 800b34a:	3214      	adds	r2, #20
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	3114      	adds	r1, #20
 800b350:	0014      	movs	r4, r2
 800b352:	18c9      	adds	r1, r1, r3
 800b354:	18d2      	adds	r2, r2, r3
 800b356:	3a04      	subs	r2, #4
 800b358:	3904      	subs	r1, #4
 800b35a:	6815      	ldr	r5, [r2, #0]
 800b35c:	680b      	ldr	r3, [r1, #0]
 800b35e:	429d      	cmp	r5, r3
 800b360:	d003      	beq.n	800b36a <__mcmp+0x2e>
 800b362:	2001      	movs	r0, #1
 800b364:	429d      	cmp	r5, r3
 800b366:	d303      	bcc.n	800b370 <__mcmp+0x34>
 800b368:	bd30      	pop	{r4, r5, pc}
 800b36a:	4294      	cmp	r4, r2
 800b36c:	d3f3      	bcc.n	800b356 <__mcmp+0x1a>
 800b36e:	e7fb      	b.n	800b368 <__mcmp+0x2c>
 800b370:	4240      	negs	r0, r0
 800b372:	e7f9      	b.n	800b368 <__mcmp+0x2c>

0800b374 <__mdiff>:
 800b374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b376:	000e      	movs	r6, r1
 800b378:	0007      	movs	r7, r0
 800b37a:	0011      	movs	r1, r2
 800b37c:	0030      	movs	r0, r6
 800b37e:	b087      	sub	sp, #28
 800b380:	0014      	movs	r4, r2
 800b382:	f7ff ffdb 	bl	800b33c <__mcmp>
 800b386:	1e05      	subs	r5, r0, #0
 800b388:	d110      	bne.n	800b3ac <__mdiff+0x38>
 800b38a:	0001      	movs	r1, r0
 800b38c:	0038      	movs	r0, r7
 800b38e:	f7ff fd4f 	bl	800ae30 <_Balloc>
 800b392:	1e02      	subs	r2, r0, #0
 800b394:	d104      	bne.n	800b3a0 <__mdiff+0x2c>
 800b396:	4b3f      	ldr	r3, [pc, #252]	; (800b494 <__mdiff+0x120>)
 800b398:	483f      	ldr	r0, [pc, #252]	; (800b498 <__mdiff+0x124>)
 800b39a:	4940      	ldr	r1, [pc, #256]	; (800b49c <__mdiff+0x128>)
 800b39c:	f7fe fd72 	bl	8009e84 <__assert_func>
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	6145      	str	r5, [r0, #20]
 800b3a4:	6103      	str	r3, [r0, #16]
 800b3a6:	0010      	movs	r0, r2
 800b3a8:	b007      	add	sp, #28
 800b3aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	9301      	str	r3, [sp, #4]
 800b3b0:	2800      	cmp	r0, #0
 800b3b2:	db04      	blt.n	800b3be <__mdiff+0x4a>
 800b3b4:	0023      	movs	r3, r4
 800b3b6:	0034      	movs	r4, r6
 800b3b8:	001e      	movs	r6, r3
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	0038      	movs	r0, r7
 800b3c0:	6861      	ldr	r1, [r4, #4]
 800b3c2:	f7ff fd35 	bl	800ae30 <_Balloc>
 800b3c6:	1e02      	subs	r2, r0, #0
 800b3c8:	d103      	bne.n	800b3d2 <__mdiff+0x5e>
 800b3ca:	4b32      	ldr	r3, [pc, #200]	; (800b494 <__mdiff+0x120>)
 800b3cc:	4832      	ldr	r0, [pc, #200]	; (800b498 <__mdiff+0x124>)
 800b3ce:	4934      	ldr	r1, [pc, #208]	; (800b4a0 <__mdiff+0x12c>)
 800b3d0:	e7e4      	b.n	800b39c <__mdiff+0x28>
 800b3d2:	9b01      	ldr	r3, [sp, #4]
 800b3d4:	2700      	movs	r7, #0
 800b3d6:	60c3      	str	r3, [r0, #12]
 800b3d8:	6920      	ldr	r0, [r4, #16]
 800b3da:	3414      	adds	r4, #20
 800b3dc:	0083      	lsls	r3, r0, #2
 800b3de:	18e3      	adds	r3, r4, r3
 800b3e0:	0021      	movs	r1, r4
 800b3e2:	9401      	str	r4, [sp, #4]
 800b3e4:	0034      	movs	r4, r6
 800b3e6:	9302      	str	r3, [sp, #8]
 800b3e8:	6933      	ldr	r3, [r6, #16]
 800b3ea:	3414      	adds	r4, #20
 800b3ec:	009b      	lsls	r3, r3, #2
 800b3ee:	18e3      	adds	r3, r4, r3
 800b3f0:	9303      	str	r3, [sp, #12]
 800b3f2:	0013      	movs	r3, r2
 800b3f4:	3314      	adds	r3, #20
 800b3f6:	469c      	mov	ip, r3
 800b3f8:	9305      	str	r3, [sp, #20]
 800b3fa:	9104      	str	r1, [sp, #16]
 800b3fc:	9b04      	ldr	r3, [sp, #16]
 800b3fe:	cc02      	ldmia	r4!, {r1}
 800b400:	cb20      	ldmia	r3!, {r5}
 800b402:	9304      	str	r3, [sp, #16]
 800b404:	b2ab      	uxth	r3, r5
 800b406:	19df      	adds	r7, r3, r7
 800b408:	b28b      	uxth	r3, r1
 800b40a:	1afb      	subs	r3, r7, r3
 800b40c:	0c09      	lsrs	r1, r1, #16
 800b40e:	0c2d      	lsrs	r5, r5, #16
 800b410:	1a6d      	subs	r5, r5, r1
 800b412:	1419      	asrs	r1, r3, #16
 800b414:	1869      	adds	r1, r5, r1
 800b416:	b29b      	uxth	r3, r3
 800b418:	140f      	asrs	r7, r1, #16
 800b41a:	0409      	lsls	r1, r1, #16
 800b41c:	4319      	orrs	r1, r3
 800b41e:	4663      	mov	r3, ip
 800b420:	c302      	stmia	r3!, {r1}
 800b422:	469c      	mov	ip, r3
 800b424:	9b03      	ldr	r3, [sp, #12]
 800b426:	42a3      	cmp	r3, r4
 800b428:	d8e8      	bhi.n	800b3fc <__mdiff+0x88>
 800b42a:	0031      	movs	r1, r6
 800b42c:	9c03      	ldr	r4, [sp, #12]
 800b42e:	3115      	adds	r1, #21
 800b430:	2304      	movs	r3, #4
 800b432:	428c      	cmp	r4, r1
 800b434:	d304      	bcc.n	800b440 <__mdiff+0xcc>
 800b436:	1ba3      	subs	r3, r4, r6
 800b438:	3b15      	subs	r3, #21
 800b43a:	089b      	lsrs	r3, r3, #2
 800b43c:	3301      	adds	r3, #1
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	9901      	ldr	r1, [sp, #4]
 800b442:	18cd      	adds	r5, r1, r3
 800b444:	9905      	ldr	r1, [sp, #20]
 800b446:	002e      	movs	r6, r5
 800b448:	18cb      	adds	r3, r1, r3
 800b44a:	469c      	mov	ip, r3
 800b44c:	9902      	ldr	r1, [sp, #8]
 800b44e:	428e      	cmp	r6, r1
 800b450:	d310      	bcc.n	800b474 <__mdiff+0x100>
 800b452:	9e02      	ldr	r6, [sp, #8]
 800b454:	1ee9      	subs	r1, r5, #3
 800b456:	2400      	movs	r4, #0
 800b458:	428e      	cmp	r6, r1
 800b45a:	d304      	bcc.n	800b466 <__mdiff+0xf2>
 800b45c:	0031      	movs	r1, r6
 800b45e:	3103      	adds	r1, #3
 800b460:	1b49      	subs	r1, r1, r5
 800b462:	0889      	lsrs	r1, r1, #2
 800b464:	008c      	lsls	r4, r1, #2
 800b466:	191b      	adds	r3, r3, r4
 800b468:	3b04      	subs	r3, #4
 800b46a:	6819      	ldr	r1, [r3, #0]
 800b46c:	2900      	cmp	r1, #0
 800b46e:	d00f      	beq.n	800b490 <__mdiff+0x11c>
 800b470:	6110      	str	r0, [r2, #16]
 800b472:	e798      	b.n	800b3a6 <__mdiff+0x32>
 800b474:	ce02      	ldmia	r6!, {r1}
 800b476:	b28c      	uxth	r4, r1
 800b478:	19e4      	adds	r4, r4, r7
 800b47a:	0c0f      	lsrs	r7, r1, #16
 800b47c:	1421      	asrs	r1, r4, #16
 800b47e:	1879      	adds	r1, r7, r1
 800b480:	b2a4      	uxth	r4, r4
 800b482:	140f      	asrs	r7, r1, #16
 800b484:	0409      	lsls	r1, r1, #16
 800b486:	4321      	orrs	r1, r4
 800b488:	4664      	mov	r4, ip
 800b48a:	c402      	stmia	r4!, {r1}
 800b48c:	46a4      	mov	ip, r4
 800b48e:	e7dd      	b.n	800b44c <__mdiff+0xd8>
 800b490:	3801      	subs	r0, #1
 800b492:	e7e9      	b.n	800b468 <__mdiff+0xf4>
 800b494:	0800c33e 	.word	0x0800c33e
 800b498:	0800c34f 	.word	0x0800c34f
 800b49c:	00000237 	.word	0x00000237
 800b4a0:	00000245 	.word	0x00000245

0800b4a4 <__d2b>:
 800b4a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	0014      	movs	r4, r2
 800b4aa:	001d      	movs	r5, r3
 800b4ac:	9f08      	ldr	r7, [sp, #32]
 800b4ae:	f7ff fcbf 	bl	800ae30 <_Balloc>
 800b4b2:	1e06      	subs	r6, r0, #0
 800b4b4:	d105      	bne.n	800b4c2 <__d2b+0x1e>
 800b4b6:	0032      	movs	r2, r6
 800b4b8:	4b24      	ldr	r3, [pc, #144]	; (800b54c <__d2b+0xa8>)
 800b4ba:	4825      	ldr	r0, [pc, #148]	; (800b550 <__d2b+0xac>)
 800b4bc:	4925      	ldr	r1, [pc, #148]	; (800b554 <__d2b+0xb0>)
 800b4be:	f7fe fce1 	bl	8009e84 <__assert_func>
 800b4c2:	032b      	lsls	r3, r5, #12
 800b4c4:	006d      	lsls	r5, r5, #1
 800b4c6:	0b1b      	lsrs	r3, r3, #12
 800b4c8:	0d6d      	lsrs	r5, r5, #21
 800b4ca:	d125      	bne.n	800b518 <__d2b+0x74>
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	2c00      	cmp	r4, #0
 800b4d0:	d028      	beq.n	800b524 <__d2b+0x80>
 800b4d2:	4668      	mov	r0, sp
 800b4d4:	9400      	str	r4, [sp, #0]
 800b4d6:	f7ff fd71 	bl	800afbc <__lo0bits>
 800b4da:	9b01      	ldr	r3, [sp, #4]
 800b4dc:	9900      	ldr	r1, [sp, #0]
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d01e      	beq.n	800b520 <__d2b+0x7c>
 800b4e2:	2220      	movs	r2, #32
 800b4e4:	001c      	movs	r4, r3
 800b4e6:	1a12      	subs	r2, r2, r0
 800b4e8:	4094      	lsls	r4, r2
 800b4ea:	0022      	movs	r2, r4
 800b4ec:	40c3      	lsrs	r3, r0
 800b4ee:	430a      	orrs	r2, r1
 800b4f0:	6172      	str	r2, [r6, #20]
 800b4f2:	9301      	str	r3, [sp, #4]
 800b4f4:	9c01      	ldr	r4, [sp, #4]
 800b4f6:	61b4      	str	r4, [r6, #24]
 800b4f8:	1e63      	subs	r3, r4, #1
 800b4fa:	419c      	sbcs	r4, r3
 800b4fc:	3401      	adds	r4, #1
 800b4fe:	6134      	str	r4, [r6, #16]
 800b500:	2d00      	cmp	r5, #0
 800b502:	d017      	beq.n	800b534 <__d2b+0x90>
 800b504:	2435      	movs	r4, #53	; 0x35
 800b506:	4b14      	ldr	r3, [pc, #80]	; (800b558 <__d2b+0xb4>)
 800b508:	18ed      	adds	r5, r5, r3
 800b50a:	182d      	adds	r5, r5, r0
 800b50c:	603d      	str	r5, [r7, #0]
 800b50e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b510:	1a24      	subs	r4, r4, r0
 800b512:	601c      	str	r4, [r3, #0]
 800b514:	0030      	movs	r0, r6
 800b516:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b518:	2280      	movs	r2, #128	; 0x80
 800b51a:	0352      	lsls	r2, r2, #13
 800b51c:	4313      	orrs	r3, r2
 800b51e:	e7d5      	b.n	800b4cc <__d2b+0x28>
 800b520:	6171      	str	r1, [r6, #20]
 800b522:	e7e7      	b.n	800b4f4 <__d2b+0x50>
 800b524:	a801      	add	r0, sp, #4
 800b526:	f7ff fd49 	bl	800afbc <__lo0bits>
 800b52a:	9b01      	ldr	r3, [sp, #4]
 800b52c:	2401      	movs	r4, #1
 800b52e:	6173      	str	r3, [r6, #20]
 800b530:	3020      	adds	r0, #32
 800b532:	e7e4      	b.n	800b4fe <__d2b+0x5a>
 800b534:	4b09      	ldr	r3, [pc, #36]	; (800b55c <__d2b+0xb8>)
 800b536:	18c0      	adds	r0, r0, r3
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <__d2b+0xbc>)
 800b53a:	6038      	str	r0, [r7, #0]
 800b53c:	18e3      	adds	r3, r4, r3
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	18f3      	adds	r3, r6, r3
 800b542:	6958      	ldr	r0, [r3, #20]
 800b544:	f7ff fd20 	bl	800af88 <__hi0bits>
 800b548:	0164      	lsls	r4, r4, #5
 800b54a:	e7e0      	b.n	800b50e <__d2b+0x6a>
 800b54c:	0800c33e 	.word	0x0800c33e
 800b550:	0800c34f 	.word	0x0800c34f
 800b554:	0000030f 	.word	0x0000030f
 800b558:	fffffbcd 	.word	0xfffffbcd
 800b55c:	fffffbce 	.word	0xfffffbce
 800b560:	3fffffff 	.word	0x3fffffff

0800b564 <__ascii_wctomb>:
 800b564:	0003      	movs	r3, r0
 800b566:	1e08      	subs	r0, r1, #0
 800b568:	d005      	beq.n	800b576 <__ascii_wctomb+0x12>
 800b56a:	2aff      	cmp	r2, #255	; 0xff
 800b56c:	d904      	bls.n	800b578 <__ascii_wctomb+0x14>
 800b56e:	228a      	movs	r2, #138	; 0x8a
 800b570:	2001      	movs	r0, #1
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	4240      	negs	r0, r0
 800b576:	4770      	bx	lr
 800b578:	2001      	movs	r0, #1
 800b57a:	700a      	strb	r2, [r1, #0]
 800b57c:	e7fb      	b.n	800b576 <__ascii_wctomb+0x12>
	...

0800b580 <__ssputs_r>:
 800b580:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b582:	b085      	sub	sp, #20
 800b584:	9301      	str	r3, [sp, #4]
 800b586:	9203      	str	r2, [sp, #12]
 800b588:	688e      	ldr	r6, [r1, #8]
 800b58a:	9a01      	ldr	r2, [sp, #4]
 800b58c:	0007      	movs	r7, r0
 800b58e:	000c      	movs	r4, r1
 800b590:	680b      	ldr	r3, [r1, #0]
 800b592:	4296      	cmp	r6, r2
 800b594:	d831      	bhi.n	800b5fa <__ssputs_r+0x7a>
 800b596:	898a      	ldrh	r2, [r1, #12]
 800b598:	2190      	movs	r1, #144	; 0x90
 800b59a:	00c9      	lsls	r1, r1, #3
 800b59c:	420a      	tst	r2, r1
 800b59e:	d029      	beq.n	800b5f4 <__ssputs_r+0x74>
 800b5a0:	2003      	movs	r0, #3
 800b5a2:	6921      	ldr	r1, [r4, #16]
 800b5a4:	1a5b      	subs	r3, r3, r1
 800b5a6:	9302      	str	r3, [sp, #8]
 800b5a8:	6963      	ldr	r3, [r4, #20]
 800b5aa:	4343      	muls	r3, r0
 800b5ac:	0fdd      	lsrs	r5, r3, #31
 800b5ae:	18ed      	adds	r5, r5, r3
 800b5b0:	9b01      	ldr	r3, [sp, #4]
 800b5b2:	9802      	ldr	r0, [sp, #8]
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	181b      	adds	r3, r3, r0
 800b5b8:	106d      	asrs	r5, r5, #1
 800b5ba:	42ab      	cmp	r3, r5
 800b5bc:	d900      	bls.n	800b5c0 <__ssputs_r+0x40>
 800b5be:	001d      	movs	r5, r3
 800b5c0:	0552      	lsls	r2, r2, #21
 800b5c2:	d529      	bpl.n	800b618 <__ssputs_r+0x98>
 800b5c4:	0029      	movs	r1, r5
 800b5c6:	0038      	movs	r0, r7
 800b5c8:	f7ff fb8e 	bl	800ace8 <_malloc_r>
 800b5cc:	1e06      	subs	r6, r0, #0
 800b5ce:	d02d      	beq.n	800b62c <__ssputs_r+0xac>
 800b5d0:	9a02      	ldr	r2, [sp, #8]
 800b5d2:	6921      	ldr	r1, [r4, #16]
 800b5d4:	f7fe fc4c 	bl	8009e70 <memcpy>
 800b5d8:	89a2      	ldrh	r2, [r4, #12]
 800b5da:	4b19      	ldr	r3, [pc, #100]	; (800b640 <__ssputs_r+0xc0>)
 800b5dc:	401a      	ands	r2, r3
 800b5de:	2380      	movs	r3, #128	; 0x80
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	81a3      	strh	r3, [r4, #12]
 800b5e4:	9b02      	ldr	r3, [sp, #8]
 800b5e6:	6126      	str	r6, [r4, #16]
 800b5e8:	18f6      	adds	r6, r6, r3
 800b5ea:	6026      	str	r6, [r4, #0]
 800b5ec:	6165      	str	r5, [r4, #20]
 800b5ee:	9e01      	ldr	r6, [sp, #4]
 800b5f0:	1aed      	subs	r5, r5, r3
 800b5f2:	60a5      	str	r5, [r4, #8]
 800b5f4:	9b01      	ldr	r3, [sp, #4]
 800b5f6:	429e      	cmp	r6, r3
 800b5f8:	d900      	bls.n	800b5fc <__ssputs_r+0x7c>
 800b5fa:	9e01      	ldr	r6, [sp, #4]
 800b5fc:	0032      	movs	r2, r6
 800b5fe:	9903      	ldr	r1, [sp, #12]
 800b600:	6820      	ldr	r0, [r4, #0]
 800b602:	f000 fb8f 	bl	800bd24 <memmove>
 800b606:	2000      	movs	r0, #0
 800b608:	68a3      	ldr	r3, [r4, #8]
 800b60a:	1b9b      	subs	r3, r3, r6
 800b60c:	60a3      	str	r3, [r4, #8]
 800b60e:	6823      	ldr	r3, [r4, #0]
 800b610:	199b      	adds	r3, r3, r6
 800b612:	6023      	str	r3, [r4, #0]
 800b614:	b005      	add	sp, #20
 800b616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b618:	002a      	movs	r2, r5
 800b61a:	0038      	movs	r0, r7
 800b61c:	f000 fc00 	bl	800be20 <_realloc_r>
 800b620:	1e06      	subs	r6, r0, #0
 800b622:	d1df      	bne.n	800b5e4 <__ssputs_r+0x64>
 800b624:	0038      	movs	r0, r7
 800b626:	6921      	ldr	r1, [r4, #16]
 800b628:	f7ff fae8 	bl	800abfc <_free_r>
 800b62c:	230c      	movs	r3, #12
 800b62e:	2001      	movs	r0, #1
 800b630:	603b      	str	r3, [r7, #0]
 800b632:	89a2      	ldrh	r2, [r4, #12]
 800b634:	3334      	adds	r3, #52	; 0x34
 800b636:	4313      	orrs	r3, r2
 800b638:	81a3      	strh	r3, [r4, #12]
 800b63a:	4240      	negs	r0, r0
 800b63c:	e7ea      	b.n	800b614 <__ssputs_r+0x94>
 800b63e:	46c0      	nop			; (mov r8, r8)
 800b640:	fffffb7f 	.word	0xfffffb7f

0800b644 <_svfiprintf_r>:
 800b644:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b646:	b0a1      	sub	sp, #132	; 0x84
 800b648:	9003      	str	r0, [sp, #12]
 800b64a:	001d      	movs	r5, r3
 800b64c:	898b      	ldrh	r3, [r1, #12]
 800b64e:	000f      	movs	r7, r1
 800b650:	0016      	movs	r6, r2
 800b652:	061b      	lsls	r3, r3, #24
 800b654:	d511      	bpl.n	800b67a <_svfiprintf_r+0x36>
 800b656:	690b      	ldr	r3, [r1, #16]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10e      	bne.n	800b67a <_svfiprintf_r+0x36>
 800b65c:	2140      	movs	r1, #64	; 0x40
 800b65e:	f7ff fb43 	bl	800ace8 <_malloc_r>
 800b662:	6038      	str	r0, [r7, #0]
 800b664:	6138      	str	r0, [r7, #16]
 800b666:	2800      	cmp	r0, #0
 800b668:	d105      	bne.n	800b676 <_svfiprintf_r+0x32>
 800b66a:	230c      	movs	r3, #12
 800b66c:	9a03      	ldr	r2, [sp, #12]
 800b66e:	3801      	subs	r0, #1
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	b021      	add	sp, #132	; 0x84
 800b674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b676:	2340      	movs	r3, #64	; 0x40
 800b678:	617b      	str	r3, [r7, #20]
 800b67a:	2300      	movs	r3, #0
 800b67c:	ac08      	add	r4, sp, #32
 800b67e:	6163      	str	r3, [r4, #20]
 800b680:	3320      	adds	r3, #32
 800b682:	7663      	strb	r3, [r4, #25]
 800b684:	3310      	adds	r3, #16
 800b686:	76a3      	strb	r3, [r4, #26]
 800b688:	9507      	str	r5, [sp, #28]
 800b68a:	0035      	movs	r5, r6
 800b68c:	782b      	ldrb	r3, [r5, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <_svfiprintf_r+0x52>
 800b692:	2b25      	cmp	r3, #37	; 0x25
 800b694:	d148      	bne.n	800b728 <_svfiprintf_r+0xe4>
 800b696:	1bab      	subs	r3, r5, r6
 800b698:	9305      	str	r3, [sp, #20]
 800b69a:	42b5      	cmp	r5, r6
 800b69c:	d00b      	beq.n	800b6b6 <_svfiprintf_r+0x72>
 800b69e:	0032      	movs	r2, r6
 800b6a0:	0039      	movs	r1, r7
 800b6a2:	9803      	ldr	r0, [sp, #12]
 800b6a4:	f7ff ff6c 	bl	800b580 <__ssputs_r>
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d100      	bne.n	800b6ae <_svfiprintf_r+0x6a>
 800b6ac:	e0af      	b.n	800b80e <_svfiprintf_r+0x1ca>
 800b6ae:	6963      	ldr	r3, [r4, #20]
 800b6b0:	9a05      	ldr	r2, [sp, #20]
 800b6b2:	189b      	adds	r3, r3, r2
 800b6b4:	6163      	str	r3, [r4, #20]
 800b6b6:	782b      	ldrb	r3, [r5, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d100      	bne.n	800b6be <_svfiprintf_r+0x7a>
 800b6bc:	e0a7      	b.n	800b80e <_svfiprintf_r+0x1ca>
 800b6be:	2201      	movs	r2, #1
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4252      	negs	r2, r2
 800b6c4:	6062      	str	r2, [r4, #4]
 800b6c6:	a904      	add	r1, sp, #16
 800b6c8:	3254      	adds	r2, #84	; 0x54
 800b6ca:	1852      	adds	r2, r2, r1
 800b6cc:	1c6e      	adds	r6, r5, #1
 800b6ce:	6023      	str	r3, [r4, #0]
 800b6d0:	60e3      	str	r3, [r4, #12]
 800b6d2:	60a3      	str	r3, [r4, #8]
 800b6d4:	7013      	strb	r3, [r2, #0]
 800b6d6:	65a3      	str	r3, [r4, #88]	; 0x58
 800b6d8:	4b55      	ldr	r3, [pc, #340]	; (800b830 <_svfiprintf_r+0x1ec>)
 800b6da:	2205      	movs	r2, #5
 800b6dc:	0018      	movs	r0, r3
 800b6de:	7831      	ldrb	r1, [r6, #0]
 800b6e0:	9305      	str	r3, [sp, #20]
 800b6e2:	f7fe fbba 	bl	8009e5a <memchr>
 800b6e6:	1c75      	adds	r5, r6, #1
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d11f      	bne.n	800b72c <_svfiprintf_r+0xe8>
 800b6ec:	6822      	ldr	r2, [r4, #0]
 800b6ee:	06d3      	lsls	r3, r2, #27
 800b6f0:	d504      	bpl.n	800b6fc <_svfiprintf_r+0xb8>
 800b6f2:	2353      	movs	r3, #83	; 0x53
 800b6f4:	a904      	add	r1, sp, #16
 800b6f6:	185b      	adds	r3, r3, r1
 800b6f8:	2120      	movs	r1, #32
 800b6fa:	7019      	strb	r1, [r3, #0]
 800b6fc:	0713      	lsls	r3, r2, #28
 800b6fe:	d504      	bpl.n	800b70a <_svfiprintf_r+0xc6>
 800b700:	2353      	movs	r3, #83	; 0x53
 800b702:	a904      	add	r1, sp, #16
 800b704:	185b      	adds	r3, r3, r1
 800b706:	212b      	movs	r1, #43	; 0x2b
 800b708:	7019      	strb	r1, [r3, #0]
 800b70a:	7833      	ldrb	r3, [r6, #0]
 800b70c:	2b2a      	cmp	r3, #42	; 0x2a
 800b70e:	d016      	beq.n	800b73e <_svfiprintf_r+0xfa>
 800b710:	0035      	movs	r5, r6
 800b712:	2100      	movs	r1, #0
 800b714:	200a      	movs	r0, #10
 800b716:	68e3      	ldr	r3, [r4, #12]
 800b718:	782a      	ldrb	r2, [r5, #0]
 800b71a:	1c6e      	adds	r6, r5, #1
 800b71c:	3a30      	subs	r2, #48	; 0x30
 800b71e:	2a09      	cmp	r2, #9
 800b720:	d94e      	bls.n	800b7c0 <_svfiprintf_r+0x17c>
 800b722:	2900      	cmp	r1, #0
 800b724:	d111      	bne.n	800b74a <_svfiprintf_r+0x106>
 800b726:	e017      	b.n	800b758 <_svfiprintf_r+0x114>
 800b728:	3501      	adds	r5, #1
 800b72a:	e7af      	b.n	800b68c <_svfiprintf_r+0x48>
 800b72c:	9b05      	ldr	r3, [sp, #20]
 800b72e:	6822      	ldr	r2, [r4, #0]
 800b730:	1ac0      	subs	r0, r0, r3
 800b732:	2301      	movs	r3, #1
 800b734:	4083      	lsls	r3, r0
 800b736:	4313      	orrs	r3, r2
 800b738:	002e      	movs	r6, r5
 800b73a:	6023      	str	r3, [r4, #0]
 800b73c:	e7cc      	b.n	800b6d8 <_svfiprintf_r+0x94>
 800b73e:	9b07      	ldr	r3, [sp, #28]
 800b740:	1d19      	adds	r1, r3, #4
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	9107      	str	r1, [sp, #28]
 800b746:	2b00      	cmp	r3, #0
 800b748:	db01      	blt.n	800b74e <_svfiprintf_r+0x10a>
 800b74a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b74c:	e004      	b.n	800b758 <_svfiprintf_r+0x114>
 800b74e:	425b      	negs	r3, r3
 800b750:	60e3      	str	r3, [r4, #12]
 800b752:	2302      	movs	r3, #2
 800b754:	4313      	orrs	r3, r2
 800b756:	6023      	str	r3, [r4, #0]
 800b758:	782b      	ldrb	r3, [r5, #0]
 800b75a:	2b2e      	cmp	r3, #46	; 0x2e
 800b75c:	d10a      	bne.n	800b774 <_svfiprintf_r+0x130>
 800b75e:	786b      	ldrb	r3, [r5, #1]
 800b760:	2b2a      	cmp	r3, #42	; 0x2a
 800b762:	d135      	bne.n	800b7d0 <_svfiprintf_r+0x18c>
 800b764:	9b07      	ldr	r3, [sp, #28]
 800b766:	3502      	adds	r5, #2
 800b768:	1d1a      	adds	r2, r3, #4
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	9207      	str	r2, [sp, #28]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	db2b      	blt.n	800b7ca <_svfiprintf_r+0x186>
 800b772:	9309      	str	r3, [sp, #36]	; 0x24
 800b774:	4e2f      	ldr	r6, [pc, #188]	; (800b834 <_svfiprintf_r+0x1f0>)
 800b776:	2203      	movs	r2, #3
 800b778:	0030      	movs	r0, r6
 800b77a:	7829      	ldrb	r1, [r5, #0]
 800b77c:	f7fe fb6d 	bl	8009e5a <memchr>
 800b780:	2800      	cmp	r0, #0
 800b782:	d006      	beq.n	800b792 <_svfiprintf_r+0x14e>
 800b784:	2340      	movs	r3, #64	; 0x40
 800b786:	1b80      	subs	r0, r0, r6
 800b788:	4083      	lsls	r3, r0
 800b78a:	6822      	ldr	r2, [r4, #0]
 800b78c:	3501      	adds	r5, #1
 800b78e:	4313      	orrs	r3, r2
 800b790:	6023      	str	r3, [r4, #0]
 800b792:	7829      	ldrb	r1, [r5, #0]
 800b794:	2206      	movs	r2, #6
 800b796:	4828      	ldr	r0, [pc, #160]	; (800b838 <_svfiprintf_r+0x1f4>)
 800b798:	1c6e      	adds	r6, r5, #1
 800b79a:	7621      	strb	r1, [r4, #24]
 800b79c:	f7fe fb5d 	bl	8009e5a <memchr>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d03c      	beq.n	800b81e <_svfiprintf_r+0x1da>
 800b7a4:	4b25      	ldr	r3, [pc, #148]	; (800b83c <_svfiprintf_r+0x1f8>)
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d125      	bne.n	800b7f6 <_svfiprintf_r+0x1b2>
 800b7aa:	2207      	movs	r2, #7
 800b7ac:	9b07      	ldr	r3, [sp, #28]
 800b7ae:	3307      	adds	r3, #7
 800b7b0:	4393      	bics	r3, r2
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	9307      	str	r3, [sp, #28]
 800b7b6:	6963      	ldr	r3, [r4, #20]
 800b7b8:	9a04      	ldr	r2, [sp, #16]
 800b7ba:	189b      	adds	r3, r3, r2
 800b7bc:	6163      	str	r3, [r4, #20]
 800b7be:	e764      	b.n	800b68a <_svfiprintf_r+0x46>
 800b7c0:	4343      	muls	r3, r0
 800b7c2:	0035      	movs	r5, r6
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	189b      	adds	r3, r3, r2
 800b7c8:	e7a6      	b.n	800b718 <_svfiprintf_r+0xd4>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	425b      	negs	r3, r3
 800b7ce:	e7d0      	b.n	800b772 <_svfiprintf_r+0x12e>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	200a      	movs	r0, #10
 800b7d4:	001a      	movs	r2, r3
 800b7d6:	3501      	adds	r5, #1
 800b7d8:	6063      	str	r3, [r4, #4]
 800b7da:	7829      	ldrb	r1, [r5, #0]
 800b7dc:	1c6e      	adds	r6, r5, #1
 800b7de:	3930      	subs	r1, #48	; 0x30
 800b7e0:	2909      	cmp	r1, #9
 800b7e2:	d903      	bls.n	800b7ec <_svfiprintf_r+0x1a8>
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d0c5      	beq.n	800b774 <_svfiprintf_r+0x130>
 800b7e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ea:	e7c3      	b.n	800b774 <_svfiprintf_r+0x130>
 800b7ec:	4342      	muls	r2, r0
 800b7ee:	0035      	movs	r5, r6
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	1852      	adds	r2, r2, r1
 800b7f4:	e7f1      	b.n	800b7da <_svfiprintf_r+0x196>
 800b7f6:	aa07      	add	r2, sp, #28
 800b7f8:	9200      	str	r2, [sp, #0]
 800b7fa:	0021      	movs	r1, r4
 800b7fc:	003a      	movs	r2, r7
 800b7fe:	4b10      	ldr	r3, [pc, #64]	; (800b840 <_svfiprintf_r+0x1fc>)
 800b800:	9803      	ldr	r0, [sp, #12]
 800b802:	f7fd fcd3 	bl	80091ac <_printf_float>
 800b806:	9004      	str	r0, [sp, #16]
 800b808:	9b04      	ldr	r3, [sp, #16]
 800b80a:	3301      	adds	r3, #1
 800b80c:	d1d3      	bne.n	800b7b6 <_svfiprintf_r+0x172>
 800b80e:	89bb      	ldrh	r3, [r7, #12]
 800b810:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b812:	065b      	lsls	r3, r3, #25
 800b814:	d400      	bmi.n	800b818 <_svfiprintf_r+0x1d4>
 800b816:	e72c      	b.n	800b672 <_svfiprintf_r+0x2e>
 800b818:	2001      	movs	r0, #1
 800b81a:	4240      	negs	r0, r0
 800b81c:	e729      	b.n	800b672 <_svfiprintf_r+0x2e>
 800b81e:	aa07      	add	r2, sp, #28
 800b820:	9200      	str	r2, [sp, #0]
 800b822:	0021      	movs	r1, r4
 800b824:	003a      	movs	r2, r7
 800b826:	4b06      	ldr	r3, [pc, #24]	; (800b840 <_svfiprintf_r+0x1fc>)
 800b828:	9803      	ldr	r0, [sp, #12]
 800b82a:	f7fd ff85 	bl	8009738 <_printf_i>
 800b82e:	e7ea      	b.n	800b806 <_svfiprintf_r+0x1c2>
 800b830:	0800c5a5 	.word	0x0800c5a5
 800b834:	0800c5ab 	.word	0x0800c5ab
 800b838:	0800c5af 	.word	0x0800c5af
 800b83c:	080091ad 	.word	0x080091ad
 800b840:	0800b581 	.word	0x0800b581

0800b844 <__sfputc_r>:
 800b844:	6893      	ldr	r3, [r2, #8]
 800b846:	b510      	push	{r4, lr}
 800b848:	3b01      	subs	r3, #1
 800b84a:	6093      	str	r3, [r2, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	da04      	bge.n	800b85a <__sfputc_r+0x16>
 800b850:	6994      	ldr	r4, [r2, #24]
 800b852:	42a3      	cmp	r3, r4
 800b854:	db07      	blt.n	800b866 <__sfputc_r+0x22>
 800b856:	290a      	cmp	r1, #10
 800b858:	d005      	beq.n	800b866 <__sfputc_r+0x22>
 800b85a:	6813      	ldr	r3, [r2, #0]
 800b85c:	1c58      	adds	r0, r3, #1
 800b85e:	6010      	str	r0, [r2, #0]
 800b860:	7019      	strb	r1, [r3, #0]
 800b862:	0008      	movs	r0, r1
 800b864:	bd10      	pop	{r4, pc}
 800b866:	f7fe f9cb 	bl	8009c00 <__swbuf_r>
 800b86a:	0001      	movs	r1, r0
 800b86c:	e7f9      	b.n	800b862 <__sfputc_r+0x1e>

0800b86e <__sfputs_r>:
 800b86e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b870:	0006      	movs	r6, r0
 800b872:	000f      	movs	r7, r1
 800b874:	0014      	movs	r4, r2
 800b876:	18d5      	adds	r5, r2, r3
 800b878:	42ac      	cmp	r4, r5
 800b87a:	d101      	bne.n	800b880 <__sfputs_r+0x12>
 800b87c:	2000      	movs	r0, #0
 800b87e:	e007      	b.n	800b890 <__sfputs_r+0x22>
 800b880:	7821      	ldrb	r1, [r4, #0]
 800b882:	003a      	movs	r2, r7
 800b884:	0030      	movs	r0, r6
 800b886:	f7ff ffdd 	bl	800b844 <__sfputc_r>
 800b88a:	3401      	adds	r4, #1
 800b88c:	1c43      	adds	r3, r0, #1
 800b88e:	d1f3      	bne.n	800b878 <__sfputs_r+0xa>
 800b890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b894 <_vfiprintf_r>:
 800b894:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b896:	b0a1      	sub	sp, #132	; 0x84
 800b898:	000f      	movs	r7, r1
 800b89a:	0015      	movs	r5, r2
 800b89c:	001e      	movs	r6, r3
 800b89e:	9003      	str	r0, [sp, #12]
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d004      	beq.n	800b8ae <_vfiprintf_r+0x1a>
 800b8a4:	6a03      	ldr	r3, [r0, #32]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <_vfiprintf_r+0x1a>
 800b8aa:	f7fe f8e5 	bl	8009a78 <__sinit>
 800b8ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8b0:	07db      	lsls	r3, r3, #31
 800b8b2:	d405      	bmi.n	800b8c0 <_vfiprintf_r+0x2c>
 800b8b4:	89bb      	ldrh	r3, [r7, #12]
 800b8b6:	059b      	lsls	r3, r3, #22
 800b8b8:	d402      	bmi.n	800b8c0 <_vfiprintf_r+0x2c>
 800b8ba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b8bc:	f7fe facb 	bl	8009e56 <__retarget_lock_acquire_recursive>
 800b8c0:	89bb      	ldrh	r3, [r7, #12]
 800b8c2:	071b      	lsls	r3, r3, #28
 800b8c4:	d502      	bpl.n	800b8cc <_vfiprintf_r+0x38>
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d113      	bne.n	800b8f4 <_vfiprintf_r+0x60>
 800b8cc:	0039      	movs	r1, r7
 800b8ce:	9803      	ldr	r0, [sp, #12]
 800b8d0:	f7fe f9d8 	bl	8009c84 <__swsetup_r>
 800b8d4:	2800      	cmp	r0, #0
 800b8d6:	d00d      	beq.n	800b8f4 <_vfiprintf_r+0x60>
 800b8d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8da:	07db      	lsls	r3, r3, #31
 800b8dc:	d503      	bpl.n	800b8e6 <_vfiprintf_r+0x52>
 800b8de:	2001      	movs	r0, #1
 800b8e0:	4240      	negs	r0, r0
 800b8e2:	b021      	add	sp, #132	; 0x84
 800b8e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8e6:	89bb      	ldrh	r3, [r7, #12]
 800b8e8:	059b      	lsls	r3, r3, #22
 800b8ea:	d4f8      	bmi.n	800b8de <_vfiprintf_r+0x4a>
 800b8ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b8ee:	f7fe fab3 	bl	8009e58 <__retarget_lock_release_recursive>
 800b8f2:	e7f4      	b.n	800b8de <_vfiprintf_r+0x4a>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	ac08      	add	r4, sp, #32
 800b8f8:	6163      	str	r3, [r4, #20]
 800b8fa:	3320      	adds	r3, #32
 800b8fc:	7663      	strb	r3, [r4, #25]
 800b8fe:	3310      	adds	r3, #16
 800b900:	76a3      	strb	r3, [r4, #26]
 800b902:	9607      	str	r6, [sp, #28]
 800b904:	002e      	movs	r6, r5
 800b906:	7833      	ldrb	r3, [r6, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <_vfiprintf_r+0x7c>
 800b90c:	2b25      	cmp	r3, #37	; 0x25
 800b90e:	d148      	bne.n	800b9a2 <_vfiprintf_r+0x10e>
 800b910:	1b73      	subs	r3, r6, r5
 800b912:	9305      	str	r3, [sp, #20]
 800b914:	42ae      	cmp	r6, r5
 800b916:	d00b      	beq.n	800b930 <_vfiprintf_r+0x9c>
 800b918:	002a      	movs	r2, r5
 800b91a:	0039      	movs	r1, r7
 800b91c:	9803      	ldr	r0, [sp, #12]
 800b91e:	f7ff ffa6 	bl	800b86e <__sfputs_r>
 800b922:	3001      	adds	r0, #1
 800b924:	d100      	bne.n	800b928 <_vfiprintf_r+0x94>
 800b926:	e0af      	b.n	800ba88 <_vfiprintf_r+0x1f4>
 800b928:	6963      	ldr	r3, [r4, #20]
 800b92a:	9a05      	ldr	r2, [sp, #20]
 800b92c:	189b      	adds	r3, r3, r2
 800b92e:	6163      	str	r3, [r4, #20]
 800b930:	7833      	ldrb	r3, [r6, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d100      	bne.n	800b938 <_vfiprintf_r+0xa4>
 800b936:	e0a7      	b.n	800ba88 <_vfiprintf_r+0x1f4>
 800b938:	2201      	movs	r2, #1
 800b93a:	2300      	movs	r3, #0
 800b93c:	4252      	negs	r2, r2
 800b93e:	6062      	str	r2, [r4, #4]
 800b940:	a904      	add	r1, sp, #16
 800b942:	3254      	adds	r2, #84	; 0x54
 800b944:	1852      	adds	r2, r2, r1
 800b946:	1c75      	adds	r5, r6, #1
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	60e3      	str	r3, [r4, #12]
 800b94c:	60a3      	str	r3, [r4, #8]
 800b94e:	7013      	strb	r3, [r2, #0]
 800b950:	65a3      	str	r3, [r4, #88]	; 0x58
 800b952:	4b59      	ldr	r3, [pc, #356]	; (800bab8 <_vfiprintf_r+0x224>)
 800b954:	2205      	movs	r2, #5
 800b956:	0018      	movs	r0, r3
 800b958:	7829      	ldrb	r1, [r5, #0]
 800b95a:	9305      	str	r3, [sp, #20]
 800b95c:	f7fe fa7d 	bl	8009e5a <memchr>
 800b960:	1c6e      	adds	r6, r5, #1
 800b962:	2800      	cmp	r0, #0
 800b964:	d11f      	bne.n	800b9a6 <_vfiprintf_r+0x112>
 800b966:	6822      	ldr	r2, [r4, #0]
 800b968:	06d3      	lsls	r3, r2, #27
 800b96a:	d504      	bpl.n	800b976 <_vfiprintf_r+0xe2>
 800b96c:	2353      	movs	r3, #83	; 0x53
 800b96e:	a904      	add	r1, sp, #16
 800b970:	185b      	adds	r3, r3, r1
 800b972:	2120      	movs	r1, #32
 800b974:	7019      	strb	r1, [r3, #0]
 800b976:	0713      	lsls	r3, r2, #28
 800b978:	d504      	bpl.n	800b984 <_vfiprintf_r+0xf0>
 800b97a:	2353      	movs	r3, #83	; 0x53
 800b97c:	a904      	add	r1, sp, #16
 800b97e:	185b      	adds	r3, r3, r1
 800b980:	212b      	movs	r1, #43	; 0x2b
 800b982:	7019      	strb	r1, [r3, #0]
 800b984:	782b      	ldrb	r3, [r5, #0]
 800b986:	2b2a      	cmp	r3, #42	; 0x2a
 800b988:	d016      	beq.n	800b9b8 <_vfiprintf_r+0x124>
 800b98a:	002e      	movs	r6, r5
 800b98c:	2100      	movs	r1, #0
 800b98e:	200a      	movs	r0, #10
 800b990:	68e3      	ldr	r3, [r4, #12]
 800b992:	7832      	ldrb	r2, [r6, #0]
 800b994:	1c75      	adds	r5, r6, #1
 800b996:	3a30      	subs	r2, #48	; 0x30
 800b998:	2a09      	cmp	r2, #9
 800b99a:	d94e      	bls.n	800ba3a <_vfiprintf_r+0x1a6>
 800b99c:	2900      	cmp	r1, #0
 800b99e:	d111      	bne.n	800b9c4 <_vfiprintf_r+0x130>
 800b9a0:	e017      	b.n	800b9d2 <_vfiprintf_r+0x13e>
 800b9a2:	3601      	adds	r6, #1
 800b9a4:	e7af      	b.n	800b906 <_vfiprintf_r+0x72>
 800b9a6:	9b05      	ldr	r3, [sp, #20]
 800b9a8:	6822      	ldr	r2, [r4, #0]
 800b9aa:	1ac0      	subs	r0, r0, r3
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	4083      	lsls	r3, r0
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	0035      	movs	r5, r6
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	e7cc      	b.n	800b952 <_vfiprintf_r+0xbe>
 800b9b8:	9b07      	ldr	r3, [sp, #28]
 800b9ba:	1d19      	adds	r1, r3, #4
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	9107      	str	r1, [sp, #28]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	db01      	blt.n	800b9c8 <_vfiprintf_r+0x134>
 800b9c4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9c6:	e004      	b.n	800b9d2 <_vfiprintf_r+0x13e>
 800b9c8:	425b      	negs	r3, r3
 800b9ca:	60e3      	str	r3, [r4, #12]
 800b9cc:	2302      	movs	r3, #2
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	7833      	ldrb	r3, [r6, #0]
 800b9d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b9d6:	d10a      	bne.n	800b9ee <_vfiprintf_r+0x15a>
 800b9d8:	7873      	ldrb	r3, [r6, #1]
 800b9da:	2b2a      	cmp	r3, #42	; 0x2a
 800b9dc:	d135      	bne.n	800ba4a <_vfiprintf_r+0x1b6>
 800b9de:	9b07      	ldr	r3, [sp, #28]
 800b9e0:	3602      	adds	r6, #2
 800b9e2:	1d1a      	adds	r2, r3, #4
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	9207      	str	r2, [sp, #28]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	db2b      	blt.n	800ba44 <_vfiprintf_r+0x1b0>
 800b9ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ee:	4d33      	ldr	r5, [pc, #204]	; (800babc <_vfiprintf_r+0x228>)
 800b9f0:	2203      	movs	r2, #3
 800b9f2:	0028      	movs	r0, r5
 800b9f4:	7831      	ldrb	r1, [r6, #0]
 800b9f6:	f7fe fa30 	bl	8009e5a <memchr>
 800b9fa:	2800      	cmp	r0, #0
 800b9fc:	d006      	beq.n	800ba0c <_vfiprintf_r+0x178>
 800b9fe:	2340      	movs	r3, #64	; 0x40
 800ba00:	1b40      	subs	r0, r0, r5
 800ba02:	4083      	lsls	r3, r0
 800ba04:	6822      	ldr	r2, [r4, #0]
 800ba06:	3601      	adds	r6, #1
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	6023      	str	r3, [r4, #0]
 800ba0c:	7831      	ldrb	r1, [r6, #0]
 800ba0e:	2206      	movs	r2, #6
 800ba10:	482b      	ldr	r0, [pc, #172]	; (800bac0 <_vfiprintf_r+0x22c>)
 800ba12:	1c75      	adds	r5, r6, #1
 800ba14:	7621      	strb	r1, [r4, #24]
 800ba16:	f7fe fa20 	bl	8009e5a <memchr>
 800ba1a:	2800      	cmp	r0, #0
 800ba1c:	d043      	beq.n	800baa6 <_vfiprintf_r+0x212>
 800ba1e:	4b29      	ldr	r3, [pc, #164]	; (800bac4 <_vfiprintf_r+0x230>)
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d125      	bne.n	800ba70 <_vfiprintf_r+0x1dc>
 800ba24:	2207      	movs	r2, #7
 800ba26:	9b07      	ldr	r3, [sp, #28]
 800ba28:	3307      	adds	r3, #7
 800ba2a:	4393      	bics	r3, r2
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	9307      	str	r3, [sp, #28]
 800ba30:	6963      	ldr	r3, [r4, #20]
 800ba32:	9a04      	ldr	r2, [sp, #16]
 800ba34:	189b      	adds	r3, r3, r2
 800ba36:	6163      	str	r3, [r4, #20]
 800ba38:	e764      	b.n	800b904 <_vfiprintf_r+0x70>
 800ba3a:	4343      	muls	r3, r0
 800ba3c:	002e      	movs	r6, r5
 800ba3e:	2101      	movs	r1, #1
 800ba40:	189b      	adds	r3, r3, r2
 800ba42:	e7a6      	b.n	800b992 <_vfiprintf_r+0xfe>
 800ba44:	2301      	movs	r3, #1
 800ba46:	425b      	negs	r3, r3
 800ba48:	e7d0      	b.n	800b9ec <_vfiprintf_r+0x158>
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	200a      	movs	r0, #10
 800ba4e:	001a      	movs	r2, r3
 800ba50:	3601      	adds	r6, #1
 800ba52:	6063      	str	r3, [r4, #4]
 800ba54:	7831      	ldrb	r1, [r6, #0]
 800ba56:	1c75      	adds	r5, r6, #1
 800ba58:	3930      	subs	r1, #48	; 0x30
 800ba5a:	2909      	cmp	r1, #9
 800ba5c:	d903      	bls.n	800ba66 <_vfiprintf_r+0x1d2>
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d0c5      	beq.n	800b9ee <_vfiprintf_r+0x15a>
 800ba62:	9209      	str	r2, [sp, #36]	; 0x24
 800ba64:	e7c3      	b.n	800b9ee <_vfiprintf_r+0x15a>
 800ba66:	4342      	muls	r2, r0
 800ba68:	002e      	movs	r6, r5
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	1852      	adds	r2, r2, r1
 800ba6e:	e7f1      	b.n	800ba54 <_vfiprintf_r+0x1c0>
 800ba70:	aa07      	add	r2, sp, #28
 800ba72:	9200      	str	r2, [sp, #0]
 800ba74:	0021      	movs	r1, r4
 800ba76:	003a      	movs	r2, r7
 800ba78:	4b13      	ldr	r3, [pc, #76]	; (800bac8 <_vfiprintf_r+0x234>)
 800ba7a:	9803      	ldr	r0, [sp, #12]
 800ba7c:	f7fd fb96 	bl	80091ac <_printf_float>
 800ba80:	9004      	str	r0, [sp, #16]
 800ba82:	9b04      	ldr	r3, [sp, #16]
 800ba84:	3301      	adds	r3, #1
 800ba86:	d1d3      	bne.n	800ba30 <_vfiprintf_r+0x19c>
 800ba88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba8a:	07db      	lsls	r3, r3, #31
 800ba8c:	d405      	bmi.n	800ba9a <_vfiprintf_r+0x206>
 800ba8e:	89bb      	ldrh	r3, [r7, #12]
 800ba90:	059b      	lsls	r3, r3, #22
 800ba92:	d402      	bmi.n	800ba9a <_vfiprintf_r+0x206>
 800ba94:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800ba96:	f7fe f9df 	bl	8009e58 <__retarget_lock_release_recursive>
 800ba9a:	89bb      	ldrh	r3, [r7, #12]
 800ba9c:	065b      	lsls	r3, r3, #25
 800ba9e:	d500      	bpl.n	800baa2 <_vfiprintf_r+0x20e>
 800baa0:	e71d      	b.n	800b8de <_vfiprintf_r+0x4a>
 800baa2:	980d      	ldr	r0, [sp, #52]	; 0x34
 800baa4:	e71d      	b.n	800b8e2 <_vfiprintf_r+0x4e>
 800baa6:	aa07      	add	r2, sp, #28
 800baa8:	9200      	str	r2, [sp, #0]
 800baaa:	0021      	movs	r1, r4
 800baac:	003a      	movs	r2, r7
 800baae:	4b06      	ldr	r3, [pc, #24]	; (800bac8 <_vfiprintf_r+0x234>)
 800bab0:	9803      	ldr	r0, [sp, #12]
 800bab2:	f7fd fe41 	bl	8009738 <_printf_i>
 800bab6:	e7e3      	b.n	800ba80 <_vfiprintf_r+0x1ec>
 800bab8:	0800c5a5 	.word	0x0800c5a5
 800babc:	0800c5ab 	.word	0x0800c5ab
 800bac0:	0800c5af 	.word	0x0800c5af
 800bac4:	080091ad 	.word	0x080091ad
 800bac8:	0800b86f 	.word	0x0800b86f

0800bacc <__sflush_r>:
 800bacc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bace:	898b      	ldrh	r3, [r1, #12]
 800bad0:	0005      	movs	r5, r0
 800bad2:	000c      	movs	r4, r1
 800bad4:	071a      	lsls	r2, r3, #28
 800bad6:	d45c      	bmi.n	800bb92 <__sflush_r+0xc6>
 800bad8:	684a      	ldr	r2, [r1, #4]
 800bada:	2a00      	cmp	r2, #0
 800badc:	dc04      	bgt.n	800bae8 <__sflush_r+0x1c>
 800bade:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800bae0:	2a00      	cmp	r2, #0
 800bae2:	dc01      	bgt.n	800bae8 <__sflush_r+0x1c>
 800bae4:	2000      	movs	r0, #0
 800bae6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bae8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800baea:	2f00      	cmp	r7, #0
 800baec:	d0fa      	beq.n	800bae4 <__sflush_r+0x18>
 800baee:	2200      	movs	r2, #0
 800baf0:	2080      	movs	r0, #128	; 0x80
 800baf2:	682e      	ldr	r6, [r5, #0]
 800baf4:	602a      	str	r2, [r5, #0]
 800baf6:	001a      	movs	r2, r3
 800baf8:	0140      	lsls	r0, r0, #5
 800bafa:	6a21      	ldr	r1, [r4, #32]
 800bafc:	4002      	ands	r2, r0
 800bafe:	4203      	tst	r3, r0
 800bb00:	d034      	beq.n	800bb6c <__sflush_r+0xa0>
 800bb02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bb04:	89a3      	ldrh	r3, [r4, #12]
 800bb06:	075b      	lsls	r3, r3, #29
 800bb08:	d506      	bpl.n	800bb18 <__sflush_r+0x4c>
 800bb0a:	6863      	ldr	r3, [r4, #4]
 800bb0c:	1ac0      	subs	r0, r0, r3
 800bb0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <__sflush_r+0x4c>
 800bb14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb16:	1ac0      	subs	r0, r0, r3
 800bb18:	0002      	movs	r2, r0
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	0028      	movs	r0, r5
 800bb1e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800bb20:	6a21      	ldr	r1, [r4, #32]
 800bb22:	47b8      	blx	r7
 800bb24:	89a2      	ldrh	r2, [r4, #12]
 800bb26:	1c43      	adds	r3, r0, #1
 800bb28:	d106      	bne.n	800bb38 <__sflush_r+0x6c>
 800bb2a:	6829      	ldr	r1, [r5, #0]
 800bb2c:	291d      	cmp	r1, #29
 800bb2e:	d82c      	bhi.n	800bb8a <__sflush_r+0xbe>
 800bb30:	4b2a      	ldr	r3, [pc, #168]	; (800bbdc <__sflush_r+0x110>)
 800bb32:	410b      	asrs	r3, r1
 800bb34:	07db      	lsls	r3, r3, #31
 800bb36:	d428      	bmi.n	800bb8a <__sflush_r+0xbe>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	6063      	str	r3, [r4, #4]
 800bb3c:	6923      	ldr	r3, [r4, #16]
 800bb3e:	6023      	str	r3, [r4, #0]
 800bb40:	04d2      	lsls	r2, r2, #19
 800bb42:	d505      	bpl.n	800bb50 <__sflush_r+0x84>
 800bb44:	1c43      	adds	r3, r0, #1
 800bb46:	d102      	bne.n	800bb4e <__sflush_r+0x82>
 800bb48:	682b      	ldr	r3, [r5, #0]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d100      	bne.n	800bb50 <__sflush_r+0x84>
 800bb4e:	6560      	str	r0, [r4, #84]	; 0x54
 800bb50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb52:	602e      	str	r6, [r5, #0]
 800bb54:	2900      	cmp	r1, #0
 800bb56:	d0c5      	beq.n	800bae4 <__sflush_r+0x18>
 800bb58:	0023      	movs	r3, r4
 800bb5a:	3344      	adds	r3, #68	; 0x44
 800bb5c:	4299      	cmp	r1, r3
 800bb5e:	d002      	beq.n	800bb66 <__sflush_r+0x9a>
 800bb60:	0028      	movs	r0, r5
 800bb62:	f7ff f84b 	bl	800abfc <_free_r>
 800bb66:	2000      	movs	r0, #0
 800bb68:	6360      	str	r0, [r4, #52]	; 0x34
 800bb6a:	e7bc      	b.n	800bae6 <__sflush_r+0x1a>
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	0028      	movs	r0, r5
 800bb70:	47b8      	blx	r7
 800bb72:	1c43      	adds	r3, r0, #1
 800bb74:	d1c6      	bne.n	800bb04 <__sflush_r+0x38>
 800bb76:	682b      	ldr	r3, [r5, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d0c3      	beq.n	800bb04 <__sflush_r+0x38>
 800bb7c:	2b1d      	cmp	r3, #29
 800bb7e:	d001      	beq.n	800bb84 <__sflush_r+0xb8>
 800bb80:	2b16      	cmp	r3, #22
 800bb82:	d101      	bne.n	800bb88 <__sflush_r+0xbc>
 800bb84:	602e      	str	r6, [r5, #0]
 800bb86:	e7ad      	b.n	800bae4 <__sflush_r+0x18>
 800bb88:	89a2      	ldrh	r2, [r4, #12]
 800bb8a:	2340      	movs	r3, #64	; 0x40
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	81a3      	strh	r3, [r4, #12]
 800bb90:	e7a9      	b.n	800bae6 <__sflush_r+0x1a>
 800bb92:	690e      	ldr	r6, [r1, #16]
 800bb94:	2e00      	cmp	r6, #0
 800bb96:	d0a5      	beq.n	800bae4 <__sflush_r+0x18>
 800bb98:	680f      	ldr	r7, [r1, #0]
 800bb9a:	600e      	str	r6, [r1, #0]
 800bb9c:	1bba      	subs	r2, r7, r6
 800bb9e:	9201      	str	r2, [sp, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	079b      	lsls	r3, r3, #30
 800bba4:	d100      	bne.n	800bba8 <__sflush_r+0xdc>
 800bba6:	694a      	ldr	r2, [r1, #20]
 800bba8:	60a2      	str	r2, [r4, #8]
 800bbaa:	9b01      	ldr	r3, [sp, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	dd99      	ble.n	800bae4 <__sflush_r+0x18>
 800bbb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bbb2:	0032      	movs	r2, r6
 800bbb4:	001f      	movs	r7, r3
 800bbb6:	0028      	movs	r0, r5
 800bbb8:	9b01      	ldr	r3, [sp, #4]
 800bbba:	6a21      	ldr	r1, [r4, #32]
 800bbbc:	47b8      	blx	r7
 800bbbe:	2800      	cmp	r0, #0
 800bbc0:	dc06      	bgt.n	800bbd0 <__sflush_r+0x104>
 800bbc2:	2340      	movs	r3, #64	; 0x40
 800bbc4:	2001      	movs	r0, #1
 800bbc6:	89a2      	ldrh	r2, [r4, #12]
 800bbc8:	4240      	negs	r0, r0
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	e78a      	b.n	800bae6 <__sflush_r+0x1a>
 800bbd0:	9b01      	ldr	r3, [sp, #4]
 800bbd2:	1836      	adds	r6, r6, r0
 800bbd4:	1a1b      	subs	r3, r3, r0
 800bbd6:	9301      	str	r3, [sp, #4]
 800bbd8:	e7e7      	b.n	800bbaa <__sflush_r+0xde>
 800bbda:	46c0      	nop			; (mov r8, r8)
 800bbdc:	dfbffffe 	.word	0xdfbffffe

0800bbe0 <_fflush_r>:
 800bbe0:	690b      	ldr	r3, [r1, #16]
 800bbe2:	b570      	push	{r4, r5, r6, lr}
 800bbe4:	0005      	movs	r5, r0
 800bbe6:	000c      	movs	r4, r1
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d102      	bne.n	800bbf2 <_fflush_r+0x12>
 800bbec:	2500      	movs	r5, #0
 800bbee:	0028      	movs	r0, r5
 800bbf0:	bd70      	pop	{r4, r5, r6, pc}
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d004      	beq.n	800bc00 <_fflush_r+0x20>
 800bbf6:	6a03      	ldr	r3, [r0, #32]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d101      	bne.n	800bc00 <_fflush_r+0x20>
 800bbfc:	f7fd ff3c 	bl	8009a78 <__sinit>
 800bc00:	220c      	movs	r2, #12
 800bc02:	5ea3      	ldrsh	r3, [r4, r2]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d0f1      	beq.n	800bbec <_fflush_r+0xc>
 800bc08:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bc0a:	07d2      	lsls	r2, r2, #31
 800bc0c:	d404      	bmi.n	800bc18 <_fflush_r+0x38>
 800bc0e:	059b      	lsls	r3, r3, #22
 800bc10:	d402      	bmi.n	800bc18 <_fflush_r+0x38>
 800bc12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc14:	f7fe f91f 	bl	8009e56 <__retarget_lock_acquire_recursive>
 800bc18:	0028      	movs	r0, r5
 800bc1a:	0021      	movs	r1, r4
 800bc1c:	f7ff ff56 	bl	800bacc <__sflush_r>
 800bc20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bc22:	0005      	movs	r5, r0
 800bc24:	07db      	lsls	r3, r3, #31
 800bc26:	d4e2      	bmi.n	800bbee <_fflush_r+0xe>
 800bc28:	89a3      	ldrh	r3, [r4, #12]
 800bc2a:	059b      	lsls	r3, r3, #22
 800bc2c:	d4df      	bmi.n	800bbee <_fflush_r+0xe>
 800bc2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bc30:	f7fe f912 	bl	8009e58 <__retarget_lock_release_recursive>
 800bc34:	e7db      	b.n	800bbee <_fflush_r+0xe>
	...

0800bc38 <fiprintf>:
 800bc38:	b40e      	push	{r1, r2, r3}
 800bc3a:	b517      	push	{r0, r1, r2, r4, lr}
 800bc3c:	4c05      	ldr	r4, [pc, #20]	; (800bc54 <fiprintf+0x1c>)
 800bc3e:	ab05      	add	r3, sp, #20
 800bc40:	cb04      	ldmia	r3!, {r2}
 800bc42:	0001      	movs	r1, r0
 800bc44:	6820      	ldr	r0, [r4, #0]
 800bc46:	9301      	str	r3, [sp, #4]
 800bc48:	f7ff fe24 	bl	800b894 <_vfiprintf_r>
 800bc4c:	bc1e      	pop	{r1, r2, r3, r4}
 800bc4e:	bc08      	pop	{r3}
 800bc50:	b003      	add	sp, #12
 800bc52:	4718      	bx	r3
 800bc54:	2000024c 	.word	0x2000024c

0800bc58 <__swhatbuf_r>:
 800bc58:	b570      	push	{r4, r5, r6, lr}
 800bc5a:	000e      	movs	r6, r1
 800bc5c:	001d      	movs	r5, r3
 800bc5e:	230e      	movs	r3, #14
 800bc60:	5ec9      	ldrsh	r1, [r1, r3]
 800bc62:	0014      	movs	r4, r2
 800bc64:	b096      	sub	sp, #88	; 0x58
 800bc66:	2900      	cmp	r1, #0
 800bc68:	da0c      	bge.n	800bc84 <__swhatbuf_r+0x2c>
 800bc6a:	89b2      	ldrh	r2, [r6, #12]
 800bc6c:	2380      	movs	r3, #128	; 0x80
 800bc6e:	0011      	movs	r1, r2
 800bc70:	4019      	ands	r1, r3
 800bc72:	421a      	tst	r2, r3
 800bc74:	d013      	beq.n	800bc9e <__swhatbuf_r+0x46>
 800bc76:	2100      	movs	r1, #0
 800bc78:	3b40      	subs	r3, #64	; 0x40
 800bc7a:	2000      	movs	r0, #0
 800bc7c:	6029      	str	r1, [r5, #0]
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	b016      	add	sp, #88	; 0x58
 800bc82:	bd70      	pop	{r4, r5, r6, pc}
 800bc84:	466a      	mov	r2, sp
 800bc86:	f000 f861 	bl	800bd4c <_fstat_r>
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	dbed      	blt.n	800bc6a <__swhatbuf_r+0x12>
 800bc8e:	23f0      	movs	r3, #240	; 0xf0
 800bc90:	9901      	ldr	r1, [sp, #4]
 800bc92:	021b      	lsls	r3, r3, #8
 800bc94:	4019      	ands	r1, r3
 800bc96:	4b03      	ldr	r3, [pc, #12]	; (800bca4 <__swhatbuf_r+0x4c>)
 800bc98:	18c9      	adds	r1, r1, r3
 800bc9a:	424b      	negs	r3, r1
 800bc9c:	4159      	adcs	r1, r3
 800bc9e:	2380      	movs	r3, #128	; 0x80
 800bca0:	00db      	lsls	r3, r3, #3
 800bca2:	e7ea      	b.n	800bc7a <__swhatbuf_r+0x22>
 800bca4:	ffffe000 	.word	0xffffe000

0800bca8 <__smakebuf_r>:
 800bca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcaa:	2602      	movs	r6, #2
 800bcac:	898b      	ldrh	r3, [r1, #12]
 800bcae:	0005      	movs	r5, r0
 800bcb0:	000c      	movs	r4, r1
 800bcb2:	4233      	tst	r3, r6
 800bcb4:	d006      	beq.n	800bcc4 <__smakebuf_r+0x1c>
 800bcb6:	0023      	movs	r3, r4
 800bcb8:	3347      	adds	r3, #71	; 0x47
 800bcba:	6023      	str	r3, [r4, #0]
 800bcbc:	6123      	str	r3, [r4, #16]
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	6163      	str	r3, [r4, #20]
 800bcc2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bcc4:	466a      	mov	r2, sp
 800bcc6:	ab01      	add	r3, sp, #4
 800bcc8:	f7ff ffc6 	bl	800bc58 <__swhatbuf_r>
 800bccc:	9900      	ldr	r1, [sp, #0]
 800bcce:	0007      	movs	r7, r0
 800bcd0:	0028      	movs	r0, r5
 800bcd2:	f7ff f809 	bl	800ace8 <_malloc_r>
 800bcd6:	2800      	cmp	r0, #0
 800bcd8:	d108      	bne.n	800bcec <__smakebuf_r+0x44>
 800bcda:	220c      	movs	r2, #12
 800bcdc:	5ea3      	ldrsh	r3, [r4, r2]
 800bcde:	059a      	lsls	r2, r3, #22
 800bce0:	d4ef      	bmi.n	800bcc2 <__smakebuf_r+0x1a>
 800bce2:	2203      	movs	r2, #3
 800bce4:	4393      	bics	r3, r2
 800bce6:	431e      	orrs	r6, r3
 800bce8:	81a6      	strh	r6, [r4, #12]
 800bcea:	e7e4      	b.n	800bcb6 <__smakebuf_r+0xe>
 800bcec:	2380      	movs	r3, #128	; 0x80
 800bcee:	89a2      	ldrh	r2, [r4, #12]
 800bcf0:	6020      	str	r0, [r4, #0]
 800bcf2:	4313      	orrs	r3, r2
 800bcf4:	81a3      	strh	r3, [r4, #12]
 800bcf6:	9b00      	ldr	r3, [sp, #0]
 800bcf8:	6120      	str	r0, [r4, #16]
 800bcfa:	6163      	str	r3, [r4, #20]
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00c      	beq.n	800bd1c <__smakebuf_r+0x74>
 800bd02:	0028      	movs	r0, r5
 800bd04:	230e      	movs	r3, #14
 800bd06:	5ee1      	ldrsh	r1, [r4, r3]
 800bd08:	f000 f832 	bl	800bd70 <_isatty_r>
 800bd0c:	2800      	cmp	r0, #0
 800bd0e:	d005      	beq.n	800bd1c <__smakebuf_r+0x74>
 800bd10:	2303      	movs	r3, #3
 800bd12:	89a2      	ldrh	r2, [r4, #12]
 800bd14:	439a      	bics	r2, r3
 800bd16:	3b02      	subs	r3, #2
 800bd18:	4313      	orrs	r3, r2
 800bd1a:	81a3      	strh	r3, [r4, #12]
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	433b      	orrs	r3, r7
 800bd20:	81a3      	strh	r3, [r4, #12]
 800bd22:	e7ce      	b.n	800bcc2 <__smakebuf_r+0x1a>

0800bd24 <memmove>:
 800bd24:	b510      	push	{r4, lr}
 800bd26:	4288      	cmp	r0, r1
 800bd28:	d902      	bls.n	800bd30 <memmove+0xc>
 800bd2a:	188b      	adds	r3, r1, r2
 800bd2c:	4298      	cmp	r0, r3
 800bd2e:	d303      	bcc.n	800bd38 <memmove+0x14>
 800bd30:	2300      	movs	r3, #0
 800bd32:	e007      	b.n	800bd44 <memmove+0x20>
 800bd34:	5c8b      	ldrb	r3, [r1, r2]
 800bd36:	5483      	strb	r3, [r0, r2]
 800bd38:	3a01      	subs	r2, #1
 800bd3a:	d2fb      	bcs.n	800bd34 <memmove+0x10>
 800bd3c:	bd10      	pop	{r4, pc}
 800bd3e:	5ccc      	ldrb	r4, [r1, r3]
 800bd40:	54c4      	strb	r4, [r0, r3]
 800bd42:	3301      	adds	r3, #1
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d1fa      	bne.n	800bd3e <memmove+0x1a>
 800bd48:	e7f8      	b.n	800bd3c <memmove+0x18>
	...

0800bd4c <_fstat_r>:
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	b570      	push	{r4, r5, r6, lr}
 800bd50:	4d06      	ldr	r5, [pc, #24]	; (800bd6c <_fstat_r+0x20>)
 800bd52:	0004      	movs	r4, r0
 800bd54:	0008      	movs	r0, r1
 800bd56:	0011      	movs	r1, r2
 800bd58:	602b      	str	r3, [r5, #0]
 800bd5a:	f7f7 fc04 	bl	8003566 <_fstat>
 800bd5e:	1c43      	adds	r3, r0, #1
 800bd60:	d103      	bne.n	800bd6a <_fstat_r+0x1e>
 800bd62:	682b      	ldr	r3, [r5, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d000      	beq.n	800bd6a <_fstat_r+0x1e>
 800bd68:	6023      	str	r3, [r4, #0]
 800bd6a:	bd70      	pop	{r4, r5, r6, pc}
 800bd6c:	20000778 	.word	0x20000778

0800bd70 <_isatty_r>:
 800bd70:	2300      	movs	r3, #0
 800bd72:	b570      	push	{r4, r5, r6, lr}
 800bd74:	4d06      	ldr	r5, [pc, #24]	; (800bd90 <_isatty_r+0x20>)
 800bd76:	0004      	movs	r4, r0
 800bd78:	0008      	movs	r0, r1
 800bd7a:	602b      	str	r3, [r5, #0]
 800bd7c:	f7f7 fc01 	bl	8003582 <_isatty>
 800bd80:	1c43      	adds	r3, r0, #1
 800bd82:	d103      	bne.n	800bd8c <_isatty_r+0x1c>
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d000      	beq.n	800bd8c <_isatty_r+0x1c>
 800bd8a:	6023      	str	r3, [r4, #0]
 800bd8c:	bd70      	pop	{r4, r5, r6, pc}
 800bd8e:	46c0      	nop			; (mov r8, r8)
 800bd90:	20000778 	.word	0x20000778

0800bd94 <_sbrk_r>:
 800bd94:	2300      	movs	r3, #0
 800bd96:	b570      	push	{r4, r5, r6, lr}
 800bd98:	4d06      	ldr	r5, [pc, #24]	; (800bdb4 <_sbrk_r+0x20>)
 800bd9a:	0004      	movs	r4, r0
 800bd9c:	0008      	movs	r0, r1
 800bd9e:	602b      	str	r3, [r5, #0]
 800bda0:	f7f7 fc04 	bl	80035ac <_sbrk>
 800bda4:	1c43      	adds	r3, r0, #1
 800bda6:	d103      	bne.n	800bdb0 <_sbrk_r+0x1c>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d000      	beq.n	800bdb0 <_sbrk_r+0x1c>
 800bdae:	6023      	str	r3, [r4, #0]
 800bdb0:	bd70      	pop	{r4, r5, r6, pc}
 800bdb2:	46c0      	nop			; (mov r8, r8)
 800bdb4:	20000778 	.word	0x20000778

0800bdb8 <abort>:
 800bdb8:	2006      	movs	r0, #6
 800bdba:	b510      	push	{r4, lr}
 800bdbc:	f000 f88a 	bl	800bed4 <raise>
 800bdc0:	2001      	movs	r0, #1
 800bdc2:	f7f7 fb81 	bl	80034c8 <_exit>

0800bdc6 <_calloc_r>:
 800bdc6:	b570      	push	{r4, r5, r6, lr}
 800bdc8:	0c0b      	lsrs	r3, r1, #16
 800bdca:	0c15      	lsrs	r5, r2, #16
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d11e      	bne.n	800be0e <_calloc_r+0x48>
 800bdd0:	2d00      	cmp	r5, #0
 800bdd2:	d10c      	bne.n	800bdee <_calloc_r+0x28>
 800bdd4:	b289      	uxth	r1, r1
 800bdd6:	b294      	uxth	r4, r2
 800bdd8:	434c      	muls	r4, r1
 800bdda:	0021      	movs	r1, r4
 800bddc:	f7fe ff84 	bl	800ace8 <_malloc_r>
 800bde0:	1e05      	subs	r5, r0, #0
 800bde2:	d01b      	beq.n	800be1c <_calloc_r+0x56>
 800bde4:	0022      	movs	r2, r4
 800bde6:	2100      	movs	r1, #0
 800bde8:	f7fd ffb0 	bl	8009d4c <memset>
 800bdec:	e016      	b.n	800be1c <_calloc_r+0x56>
 800bdee:	1c2b      	adds	r3, r5, #0
 800bdf0:	1c0c      	adds	r4, r1, #0
 800bdf2:	b289      	uxth	r1, r1
 800bdf4:	b292      	uxth	r2, r2
 800bdf6:	434a      	muls	r2, r1
 800bdf8:	b2a1      	uxth	r1, r4
 800bdfa:	b29c      	uxth	r4, r3
 800bdfc:	434c      	muls	r4, r1
 800bdfe:	0c13      	lsrs	r3, r2, #16
 800be00:	18e4      	adds	r4, r4, r3
 800be02:	0c23      	lsrs	r3, r4, #16
 800be04:	d107      	bne.n	800be16 <_calloc_r+0x50>
 800be06:	0424      	lsls	r4, r4, #16
 800be08:	b292      	uxth	r2, r2
 800be0a:	4314      	orrs	r4, r2
 800be0c:	e7e5      	b.n	800bdda <_calloc_r+0x14>
 800be0e:	2d00      	cmp	r5, #0
 800be10:	d101      	bne.n	800be16 <_calloc_r+0x50>
 800be12:	1c14      	adds	r4, r2, #0
 800be14:	e7ed      	b.n	800bdf2 <_calloc_r+0x2c>
 800be16:	230c      	movs	r3, #12
 800be18:	2500      	movs	r5, #0
 800be1a:	6003      	str	r3, [r0, #0]
 800be1c:	0028      	movs	r0, r5
 800be1e:	bd70      	pop	{r4, r5, r6, pc}

0800be20 <_realloc_r>:
 800be20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be22:	0007      	movs	r7, r0
 800be24:	000e      	movs	r6, r1
 800be26:	0014      	movs	r4, r2
 800be28:	2900      	cmp	r1, #0
 800be2a:	d105      	bne.n	800be38 <_realloc_r+0x18>
 800be2c:	0011      	movs	r1, r2
 800be2e:	f7fe ff5b 	bl	800ace8 <_malloc_r>
 800be32:	0005      	movs	r5, r0
 800be34:	0028      	movs	r0, r5
 800be36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be38:	2a00      	cmp	r2, #0
 800be3a:	d103      	bne.n	800be44 <_realloc_r+0x24>
 800be3c:	f7fe fede 	bl	800abfc <_free_r>
 800be40:	0025      	movs	r5, r4
 800be42:	e7f7      	b.n	800be34 <_realloc_r+0x14>
 800be44:	f000 f866 	bl	800bf14 <_malloc_usable_size_r>
 800be48:	9001      	str	r0, [sp, #4]
 800be4a:	4284      	cmp	r4, r0
 800be4c:	d803      	bhi.n	800be56 <_realloc_r+0x36>
 800be4e:	0035      	movs	r5, r6
 800be50:	0843      	lsrs	r3, r0, #1
 800be52:	42a3      	cmp	r3, r4
 800be54:	d3ee      	bcc.n	800be34 <_realloc_r+0x14>
 800be56:	0021      	movs	r1, r4
 800be58:	0038      	movs	r0, r7
 800be5a:	f7fe ff45 	bl	800ace8 <_malloc_r>
 800be5e:	1e05      	subs	r5, r0, #0
 800be60:	d0e8      	beq.n	800be34 <_realloc_r+0x14>
 800be62:	9b01      	ldr	r3, [sp, #4]
 800be64:	0022      	movs	r2, r4
 800be66:	429c      	cmp	r4, r3
 800be68:	d900      	bls.n	800be6c <_realloc_r+0x4c>
 800be6a:	001a      	movs	r2, r3
 800be6c:	0031      	movs	r1, r6
 800be6e:	0028      	movs	r0, r5
 800be70:	f7fd fffe 	bl	8009e70 <memcpy>
 800be74:	0031      	movs	r1, r6
 800be76:	0038      	movs	r0, r7
 800be78:	f7fe fec0 	bl	800abfc <_free_r>
 800be7c:	e7da      	b.n	800be34 <_realloc_r+0x14>

0800be7e <_raise_r>:
 800be7e:	b570      	push	{r4, r5, r6, lr}
 800be80:	0004      	movs	r4, r0
 800be82:	000d      	movs	r5, r1
 800be84:	291f      	cmp	r1, #31
 800be86:	d904      	bls.n	800be92 <_raise_r+0x14>
 800be88:	2316      	movs	r3, #22
 800be8a:	6003      	str	r3, [r0, #0]
 800be8c:	2001      	movs	r0, #1
 800be8e:	4240      	negs	r0, r0
 800be90:	bd70      	pop	{r4, r5, r6, pc}
 800be92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800be94:	2b00      	cmp	r3, #0
 800be96:	d004      	beq.n	800bea2 <_raise_r+0x24>
 800be98:	008a      	lsls	r2, r1, #2
 800be9a:	189b      	adds	r3, r3, r2
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	d108      	bne.n	800beb4 <_raise_r+0x36>
 800bea2:	0020      	movs	r0, r4
 800bea4:	f000 f832 	bl	800bf0c <_getpid_r>
 800bea8:	002a      	movs	r2, r5
 800beaa:	0001      	movs	r1, r0
 800beac:	0020      	movs	r0, r4
 800beae:	f000 f81b 	bl	800bee8 <_kill_r>
 800beb2:	e7ed      	b.n	800be90 <_raise_r+0x12>
 800beb4:	2000      	movs	r0, #0
 800beb6:	2a01      	cmp	r2, #1
 800beb8:	d0ea      	beq.n	800be90 <_raise_r+0x12>
 800beba:	1c51      	adds	r1, r2, #1
 800bebc:	d103      	bne.n	800bec6 <_raise_r+0x48>
 800bebe:	2316      	movs	r3, #22
 800bec0:	3001      	adds	r0, #1
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	e7e4      	b.n	800be90 <_raise_r+0x12>
 800bec6:	2400      	movs	r4, #0
 800bec8:	0028      	movs	r0, r5
 800beca:	601c      	str	r4, [r3, #0]
 800becc:	4790      	blx	r2
 800bece:	0020      	movs	r0, r4
 800bed0:	e7de      	b.n	800be90 <_raise_r+0x12>
	...

0800bed4 <raise>:
 800bed4:	b510      	push	{r4, lr}
 800bed6:	4b03      	ldr	r3, [pc, #12]	; (800bee4 <raise+0x10>)
 800bed8:	0001      	movs	r1, r0
 800beda:	6818      	ldr	r0, [r3, #0]
 800bedc:	f7ff ffcf 	bl	800be7e <_raise_r>
 800bee0:	bd10      	pop	{r4, pc}
 800bee2:	46c0      	nop			; (mov r8, r8)
 800bee4:	2000024c 	.word	0x2000024c

0800bee8 <_kill_r>:
 800bee8:	2300      	movs	r3, #0
 800beea:	b570      	push	{r4, r5, r6, lr}
 800beec:	4d06      	ldr	r5, [pc, #24]	; (800bf08 <_kill_r+0x20>)
 800beee:	0004      	movs	r4, r0
 800bef0:	0008      	movs	r0, r1
 800bef2:	0011      	movs	r1, r2
 800bef4:	602b      	str	r3, [r5, #0]
 800bef6:	f7f7 fad7 	bl	80034a8 <_kill>
 800befa:	1c43      	adds	r3, r0, #1
 800befc:	d103      	bne.n	800bf06 <_kill_r+0x1e>
 800befe:	682b      	ldr	r3, [r5, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d000      	beq.n	800bf06 <_kill_r+0x1e>
 800bf04:	6023      	str	r3, [r4, #0]
 800bf06:	bd70      	pop	{r4, r5, r6, pc}
 800bf08:	20000778 	.word	0x20000778

0800bf0c <_getpid_r>:
 800bf0c:	b510      	push	{r4, lr}
 800bf0e:	f7f7 fac5 	bl	800349c <_getpid>
 800bf12:	bd10      	pop	{r4, pc}

0800bf14 <_malloc_usable_size_r>:
 800bf14:	1f0b      	subs	r3, r1, #4
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	1f18      	subs	r0, r3, #4
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	da01      	bge.n	800bf22 <_malloc_usable_size_r+0xe>
 800bf1e:	580b      	ldr	r3, [r1, r0]
 800bf20:	18c0      	adds	r0, r0, r3
 800bf22:	4770      	bx	lr

0800bf24 <_init>:
 800bf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf26:	46c0      	nop			; (mov r8, r8)
 800bf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf2a:	bc08      	pop	{r3}
 800bf2c:	469e      	mov	lr, r3
 800bf2e:	4770      	bx	lr

0800bf30 <_fini>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	46c0      	nop			; (mov r8, r8)
 800bf34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf36:	bc08      	pop	{r3}
 800bf38:	469e      	mov	lr, r3
 800bf3a:	4770      	bx	lr
